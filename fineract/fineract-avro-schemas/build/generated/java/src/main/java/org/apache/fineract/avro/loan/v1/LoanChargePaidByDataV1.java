/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanChargePaidByDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 6464779342612163647L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanChargePaidByDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"installmentNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"chargeId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"transactionId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanChargePaidByDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanChargePaidByDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanChargePaidByDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanChargePaidByDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanChargePaidByDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanChargePaidByDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanChargePaidByDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanChargePaidByDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanChargePaidByDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer id;
  private java.math.BigDecimal amount;
  private java.lang.Integer installmentNumber;
  private java.lang.Long chargeId;
  private java.lang.Long transactionId;
  private java.lang.String name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanChargePaidByDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param amount The new value for amount
   * @param installmentNumber The new value for installmentNumber
   * @param chargeId The new value for chargeId
   * @param transactionId The new value for transactionId
   * @param name The new value for name
   */
  public LoanChargePaidByDataV1(java.lang.Integer id, java.math.BigDecimal amount, java.lang.Integer installmentNumber, java.lang.Long chargeId, java.lang.Long transactionId, java.lang.String name) {
    this.id = id;
    this.amount = amount;
    this.installmentNumber = installmentNumber;
    this.chargeId = chargeId;
    this.transactionId = transactionId;
    this.name = name;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return amount;
    case 2: return installmentNumber;
    case 3: return chargeId;
    case 4: return transactionId;
    case 5: return name;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: amount = (java.math.BigDecimal)value$; break;
    case 2: installmentNumber = (java.lang.Integer)value$; break;
    case 3: chargeId = (java.lang.Long)value$; break;
    case 4: transactionId = (java.lang.Long)value$; break;
    case 5: name = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'installmentNumber' field.
   * @return The value of the 'installmentNumber' field.
   */
  public java.lang.Integer getInstallmentNumber() {
    return installmentNumber;
  }


  /**
   * Sets the value of the 'installmentNumber' field.
   * @param value the value to set.
   */
  public void setInstallmentNumber(java.lang.Integer value) {
    this.installmentNumber = value;
  }

  /**
   * Gets the value of the 'chargeId' field.
   * @return The value of the 'chargeId' field.
   */
  public java.lang.Long getChargeId() {
    return chargeId;
  }


  /**
   * Sets the value of the 'chargeId' field.
   * @param value the value to set.
   */
  public void setChargeId(java.lang.Long value) {
    this.chargeId = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.Long getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.Long value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Creates a new LoanChargePaidByDataV1 RecordBuilder.
   * @return A new LoanChargePaidByDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder();
  }

  /**
   * Creates a new LoanChargePaidByDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanChargePaidByDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanChargePaidByDataV1 RecordBuilder by copying an existing LoanChargePaidByDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanChargePaidByDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanChargePaidByDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanChargePaidByDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanChargePaidByDataV1> {

    private java.lang.Integer id;
    private java.math.BigDecimal amount;
    private java.lang.Integer installmentNumber;
    private java.lang.Long chargeId;
    private java.lang.Long transactionId;
    private java.lang.String name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.installmentNumber)) {
        this.installmentNumber = data().deepCopy(fields()[2].schema(), other.installmentNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.chargeId)) {
        this.chargeId = data().deepCopy(fields()[3].schema(), other.chargeId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanChargePaidByDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.installmentNumber)) {
        this.installmentNumber = data().deepCopy(fields()[2].schema(), other.installmentNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.chargeId)) {
        this.chargeId = data().deepCopy(fields()[3].schema(), other.chargeId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'installmentNumber' field.
      * @return The value.
      */
    public java.lang.Integer getInstallmentNumber() {
      return installmentNumber;
    }


    /**
      * Sets the value of the 'installmentNumber' field.
      * @param value The value of 'installmentNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setInstallmentNumber(java.lang.Integer value) {
      validate(fields()[2], value);
      this.installmentNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'installmentNumber' field has been set.
      * @return True if the 'installmentNumber' field has been set, false otherwise.
      */
    public boolean hasInstallmentNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'installmentNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearInstallmentNumber() {
      installmentNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeId' field.
      * @return The value.
      */
    public java.lang.Long getChargeId() {
      return chargeId;
    }


    /**
      * Sets the value of the 'chargeId' field.
      * @param value The value of 'chargeId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setChargeId(java.lang.Long value) {
      validate(fields()[3], value);
      this.chargeId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeId' field has been set.
      * @return True if the 'chargeId' field has been set, false otherwise.
      */
    public boolean hasChargeId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'chargeId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearChargeId() {
      chargeId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.Long getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setTransactionId(java.lang.Long value) {
      validate(fields()[4], value);
      this.transactionId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder setName(java.lang.String value) {
      validate(fields()[5], value);
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanChargePaidByDataV1.Builder clearName() {
      name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanChargePaidByDataV1 build() {
      try {
        LoanChargePaidByDataV1 record = new LoanChargePaidByDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.installmentNumber = fieldSetFlags()[2] ? this.installmentNumber : (java.lang.Integer) defaultValue(fields()[2]);
        record.chargeId = fieldSetFlags()[3] ? this.chargeId : (java.lang.Long) defaultValue(fields()[3]);
        record.transactionId = fieldSetFlags()[4] ? this.transactionId : (java.lang.Long) defaultValue(fields()[4]);
        record.name = fieldSetFlags()[5] ? this.name : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanChargePaidByDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanChargePaidByDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanChargePaidByDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanChargePaidByDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










