/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanAccountDelinquencyRangeDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 5648304527526071852L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanAccountDelinquencyRangeDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"loanId\",\"type\":\"long\"},{\"name\":\"loanAccountNo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"loanExternalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"delinquencyRange\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DelinquencyRangeDataV1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"classification\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"minimumAgeDays\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"maximumAgeDays\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"charges\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LoanChargeDataRangeViewV1\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"currency\",\"type\":{\"type\":\"record\",\"name\":\"CurrencyDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalPlaces\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"inMultiplesOf\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"displaySymbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nameCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"displayLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}}]}}},{\"name\":\"currency\",\"type\":\"org.apache.fineract.avro.generic.v1.CurrencyDataV1\"},{\"name\":\"amount\",\"type\":{\"type\":\"record\",\"name\":\"LoanAmountDataV1\",\"fields\":[{\"name\":\"totalAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null}]},\"doc\":\"Contains installments  total, fee, interest, principal and penalty amount summaries\"},{\"name\":\"delinquentDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"installmentDelinquencyBuckets\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LoanInstallmentDelinquencyBucketDataV1\",\"fields\":[{\"name\":\"delinquencyRange\",\"type\":[\"null\",\"DelinquencyRangeDataV1\"],\"default\":null},{\"name\":\"amount\",\"type\":\"LoanAmountDataV1\",\"doc\":\"Contains installments  total, fee, interest, principal and penalty amount summaries\"},{\"name\":\"charges\",\"type\":{\"type\":\"array\",\"items\":\"LoanChargeDataRangeViewV1\"}},{\"name\":\"currency\",\"type\":\"org.apache.fineract.avro.generic.v1.CurrencyDataV1\"}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanAccountDelinquencyRangeDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanAccountDelinquencyRangeDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanAccountDelinquencyRangeDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanAccountDelinquencyRangeDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanAccountDelinquencyRangeDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanAccountDelinquencyRangeDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanAccountDelinquencyRangeDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanAccountDelinquencyRangeDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanAccountDelinquencyRangeDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long loanId;
  private java.lang.String loanAccountNo;
  private java.lang.String loanExternalId;
  private org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 delinquencyRange;
  private java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> charges;
  private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
  /** Contains installments  total, fee, interest, principal and penalty amount summaries */
  private org.apache.fineract.avro.loan.v1.LoanAmountDataV1 amount;
  private java.lang.String delinquentDate;
  private java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> installmentDelinquencyBuckets;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanAccountDelinquencyRangeDataV1() {}

  /**
   * All-args constructor.
   * @param loanId The new value for loanId
   * @param loanAccountNo The new value for loanAccountNo
   * @param loanExternalId The new value for loanExternalId
   * @param delinquencyRange The new value for delinquencyRange
   * @param charges The new value for charges
   * @param currency The new value for currency
   * @param amount Contains installments  total, fee, interest, principal and penalty amount summaries
   * @param delinquentDate The new value for delinquentDate
   * @param installmentDelinquencyBuckets The new value for installmentDelinquencyBuckets
   */
  public LoanAccountDelinquencyRangeDataV1(java.lang.Long loanId, java.lang.String loanAccountNo, java.lang.String loanExternalId, org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 delinquencyRange, java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> charges, org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency, org.apache.fineract.avro.loan.v1.LoanAmountDataV1 amount, java.lang.String delinquentDate, java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> installmentDelinquencyBuckets) {
    this.loanId = loanId;
    this.loanAccountNo = loanAccountNo;
    this.loanExternalId = loanExternalId;
    this.delinquencyRange = delinquencyRange;
    this.charges = charges;
    this.currency = currency;
    this.amount = amount;
    this.delinquentDate = delinquentDate;
    this.installmentDelinquencyBuckets = installmentDelinquencyBuckets;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return loanId;
    case 1: return loanAccountNo;
    case 2: return loanExternalId;
    case 3: return delinquencyRange;
    case 4: return charges;
    case 5: return currency;
    case 6: return amount;
    case 7: return delinquentDate;
    case 8: return installmentDelinquencyBuckets;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: loanId = (java.lang.Long)value$; break;
    case 1: loanAccountNo = value$ != null ? value$.toString() : null; break;
    case 2: loanExternalId = value$ != null ? value$.toString() : null; break;
    case 3: delinquencyRange = (org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1)value$; break;
    case 4: charges = (java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1>)value$; break;
    case 5: currency = (org.apache.fineract.avro.generic.v1.CurrencyDataV1)value$; break;
    case 6: amount = (org.apache.fineract.avro.loan.v1.LoanAmountDataV1)value$; break;
    case 7: delinquentDate = value$ != null ? value$.toString() : null; break;
    case 8: installmentDelinquencyBuckets = (java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'loanId' field.
   * @return The value of the 'loanId' field.
   */
  public long getLoanId() {
    return loanId;
  }


  /**
   * Sets the value of the 'loanId' field.
   * @param value the value to set.
   */
  public void setLoanId(long value) {
    this.loanId = value;
  }

  /**
   * Gets the value of the 'loanAccountNo' field.
   * @return The value of the 'loanAccountNo' field.
   */
  public java.lang.String getLoanAccountNo() {
    return loanAccountNo;
  }


  /**
   * Sets the value of the 'loanAccountNo' field.
   * @param value the value to set.
   */
  public void setLoanAccountNo(java.lang.String value) {
    this.loanAccountNo = value;
  }

  /**
   * Gets the value of the 'loanExternalId' field.
   * @return The value of the 'loanExternalId' field.
   */
  public java.lang.String getLoanExternalId() {
    return loanExternalId;
  }


  /**
   * Sets the value of the 'loanExternalId' field.
   * @param value the value to set.
   */
  public void setLoanExternalId(java.lang.String value) {
    this.loanExternalId = value;
  }

  /**
   * Gets the value of the 'delinquencyRange' field.
   * @return The value of the 'delinquencyRange' field.
   */
  public org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 getDelinquencyRange() {
    return delinquencyRange;
  }


  /**
   * Sets the value of the 'delinquencyRange' field.
   * @param value the value to set.
   */
  public void setDelinquencyRange(org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 value) {
    this.delinquencyRange = value;
  }

  /**
   * Gets the value of the 'charges' field.
   * @return The value of the 'charges' field.
   */
  public java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> getCharges() {
    return charges;
  }


  /**
   * Sets the value of the 'charges' field.
   * @param value the value to set.
   */
  public void setCharges(java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> value) {
    this.charges = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Contains installments  total, fee, interest, principal and penalty amount summaries
   */
  public org.apache.fineract.avro.loan.v1.LoanAmountDataV1 getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Contains installments  total, fee, interest, principal and penalty amount summaries
   * @param value the value to set.
   */
  public void setAmount(org.apache.fineract.avro.loan.v1.LoanAmountDataV1 value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'delinquentDate' field.
   * @return The value of the 'delinquentDate' field.
   */
  public java.lang.String getDelinquentDate() {
    return delinquentDate;
  }


  /**
   * Sets the value of the 'delinquentDate' field.
   * @param value the value to set.
   */
  public void setDelinquentDate(java.lang.String value) {
    this.delinquentDate = value;
  }

  /**
   * Gets the value of the 'installmentDelinquencyBuckets' field.
   * @return The value of the 'installmentDelinquencyBuckets' field.
   */
  public java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> getInstallmentDelinquencyBuckets() {
    return installmentDelinquencyBuckets;
  }


  /**
   * Sets the value of the 'installmentDelinquencyBuckets' field.
   * @param value the value to set.
   */
  public void setInstallmentDelinquencyBuckets(java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> value) {
    this.installmentDelinquencyBuckets = value;
  }

  /**
   * Creates a new LoanAccountDelinquencyRangeDataV1 RecordBuilder.
   * @return A new LoanAccountDelinquencyRangeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder();
  }

  /**
   * Creates a new LoanAccountDelinquencyRangeDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanAccountDelinquencyRangeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanAccountDelinquencyRangeDataV1 RecordBuilder by copying an existing LoanAccountDelinquencyRangeDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanAccountDelinquencyRangeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanAccountDelinquencyRangeDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanAccountDelinquencyRangeDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanAccountDelinquencyRangeDataV1> {

    private long loanId;
    private java.lang.String loanAccountNo;
    private java.lang.String loanExternalId;
    private org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 delinquencyRange;
    private org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.Builder delinquencyRangeBuilder;
    private java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> charges;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder currencyBuilder;
    /** Contains installments  total, fee, interest, principal and penalty amount summaries */
    private org.apache.fineract.avro.loan.v1.LoanAmountDataV1 amount;
    private org.apache.fineract.avro.loan.v1.LoanAmountDataV1.Builder amountBuilder;
    private java.lang.String delinquentDate;
    private java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> installmentDelinquencyBuckets;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.loanId)) {
        this.loanId = data().deepCopy(fields()[0].schema(), other.loanId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.loanAccountNo)) {
        this.loanAccountNo = data().deepCopy(fields()[1].schema(), other.loanAccountNo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.loanExternalId)) {
        this.loanExternalId = data().deepCopy(fields()[2].schema(), other.loanExternalId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.delinquencyRange)) {
        this.delinquencyRange = data().deepCopy(fields()[3].schema(), other.delinquencyRange);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasDelinquencyRangeBuilder()) {
        this.delinquencyRangeBuilder = org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.newBuilder(other.getDelinquencyRangeBuilder());
      }
      if (isValidValue(fields()[4], other.charges)) {
        this.charges = data().deepCopy(fields()[4].schema(), other.charges);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasCurrencyBuilder()) {
        this.currencyBuilder = org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(other.getCurrencyBuilder());
      }
      if (isValidValue(fields()[6], other.amount)) {
        this.amount = data().deepCopy(fields()[6].schema(), other.amount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasAmountBuilder()) {
        this.amountBuilder = org.apache.fineract.avro.loan.v1.LoanAmountDataV1.newBuilder(other.getAmountBuilder());
      }
      if (isValidValue(fields()[7], other.delinquentDate)) {
        this.delinquentDate = data().deepCopy(fields()[7].schema(), other.delinquentDate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.installmentDelinquencyBuckets)) {
        this.installmentDelinquencyBuckets = data().deepCopy(fields()[8].schema(), other.installmentDelinquencyBuckets);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanAccountDelinquencyRangeDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.loanId)) {
        this.loanId = data().deepCopy(fields()[0].schema(), other.loanId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.loanAccountNo)) {
        this.loanAccountNo = data().deepCopy(fields()[1].schema(), other.loanAccountNo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.loanExternalId)) {
        this.loanExternalId = data().deepCopy(fields()[2].schema(), other.loanExternalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.delinquencyRange)) {
        this.delinquencyRange = data().deepCopy(fields()[3].schema(), other.delinquencyRange);
        fieldSetFlags()[3] = true;
      }
      this.delinquencyRangeBuilder = null;
      if (isValidValue(fields()[4], other.charges)) {
        this.charges = data().deepCopy(fields()[4].schema(), other.charges);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      this.currencyBuilder = null;
      if (isValidValue(fields()[6], other.amount)) {
        this.amount = data().deepCopy(fields()[6].schema(), other.amount);
        fieldSetFlags()[6] = true;
      }
      this.amountBuilder = null;
      if (isValidValue(fields()[7], other.delinquentDate)) {
        this.delinquentDate = data().deepCopy(fields()[7].schema(), other.delinquentDate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.installmentDelinquencyBuckets)) {
        this.installmentDelinquencyBuckets = data().deepCopy(fields()[8].schema(), other.installmentDelinquencyBuckets);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'loanId' field.
      * @return The value.
      */
    public long getLoanId() {
      return loanId;
    }


    /**
      * Sets the value of the 'loanId' field.
      * @param value The value of 'loanId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setLoanId(long value) {
      validate(fields()[0], value);
      this.loanId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'loanId' field has been set.
      * @return True if the 'loanId' field has been set, false otherwise.
      */
    public boolean hasLoanId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'loanId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearLoanId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'loanAccountNo' field.
      * @return The value.
      */
    public java.lang.String getLoanAccountNo() {
      return loanAccountNo;
    }


    /**
      * Sets the value of the 'loanAccountNo' field.
      * @param value The value of 'loanAccountNo'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setLoanAccountNo(java.lang.String value) {
      validate(fields()[1], value);
      this.loanAccountNo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'loanAccountNo' field has been set.
      * @return True if the 'loanAccountNo' field has been set, false otherwise.
      */
    public boolean hasLoanAccountNo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'loanAccountNo' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearLoanAccountNo() {
      loanAccountNo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'loanExternalId' field.
      * @return The value.
      */
    public java.lang.String getLoanExternalId() {
      return loanExternalId;
    }


    /**
      * Sets the value of the 'loanExternalId' field.
      * @param value The value of 'loanExternalId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setLoanExternalId(java.lang.String value) {
      validate(fields()[2], value);
      this.loanExternalId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'loanExternalId' field has been set.
      * @return True if the 'loanExternalId' field has been set, false otherwise.
      */
    public boolean hasLoanExternalId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'loanExternalId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearLoanExternalId() {
      loanExternalId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'delinquencyRange' field.
      * @return The value.
      */
    public org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 getDelinquencyRange() {
      return delinquencyRange;
    }


    /**
      * Sets the value of the 'delinquencyRange' field.
      * @param value The value of 'delinquencyRange'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setDelinquencyRange(org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1 value) {
      validate(fields()[3], value);
      this.delinquencyRangeBuilder = null;
      this.delinquencyRange = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'delinquencyRange' field has been set.
      * @return True if the 'delinquencyRange' field has been set, false otherwise.
      */
    public boolean hasDelinquencyRange() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'delinquencyRange' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.Builder getDelinquencyRangeBuilder() {
      if (delinquencyRangeBuilder == null) {
        if (hasDelinquencyRange()) {
          setDelinquencyRangeBuilder(org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.newBuilder(delinquencyRange));
        } else {
          setDelinquencyRangeBuilder(org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.newBuilder());
        }
      }
      return delinquencyRangeBuilder;
    }

    /**
     * Sets the Builder instance for the 'delinquencyRange' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setDelinquencyRangeBuilder(org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1.Builder value) {
      clearDelinquencyRange();
      delinquencyRangeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'delinquencyRange' field has an active Builder instance
     * @return True if the 'delinquencyRange' field has an active Builder instance
     */
    public boolean hasDelinquencyRangeBuilder() {
      return delinquencyRangeBuilder != null;
    }

    /**
      * Clears the value of the 'delinquencyRange' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearDelinquencyRange() {
      delinquencyRange = null;
      delinquencyRangeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'charges' field.
      * @return The value.
      */
    public java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> getCharges() {
      return charges;
    }


    /**
      * Sets the value of the 'charges' field.
      * @param value The value of 'charges'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setCharges(java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1> value) {
      validate(fields()[4], value);
      this.charges = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'charges' field has been set.
      * @return True if the 'charges' field has been set, false otherwise.
      */
    public boolean hasCharges() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'charges' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearCharges() {
      charges = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
      validate(fields()[5], value);
      this.currencyBuilder = null;
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'currency' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder getCurrencyBuilder() {
      if (currencyBuilder == null) {
        if (hasCurrency()) {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(currency));
        } else {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder());
        }
      }
      return currencyBuilder;
    }

    /**
     * Sets the Builder instance for the 'currency' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder value) {
      clearCurrency();
      currencyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currency' field has an active Builder instance
     * @return True if the 'currency' field has an active Builder instance
     */
    public boolean hasCurrencyBuilder() {
      return currencyBuilder != null;
    }

    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearCurrency() {
      currency = null;
      currencyBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Contains installments  total, fee, interest, principal and penalty amount summaries
      * @return The value.
      */
    public org.apache.fineract.avro.loan.v1.LoanAmountDataV1 getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Contains installments  total, fee, interest, principal and penalty amount summaries
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setAmount(org.apache.fineract.avro.loan.v1.LoanAmountDataV1 value) {
      validate(fields()[6], value);
      this.amountBuilder = null;
      this.amount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Contains installments  total, fee, interest, principal and penalty amount summaries
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'amount' field and creates one if it doesn't exist yet.
     * Contains installments  total, fee, interest, principal and penalty amount summaries
     * @return This builder.
     */
    public org.apache.fineract.avro.loan.v1.LoanAmountDataV1.Builder getAmountBuilder() {
      if (amountBuilder == null) {
        if (hasAmount()) {
          setAmountBuilder(org.apache.fineract.avro.loan.v1.LoanAmountDataV1.newBuilder(amount));
        } else {
          setAmountBuilder(org.apache.fineract.avro.loan.v1.LoanAmountDataV1.newBuilder());
        }
      }
      return amountBuilder;
    }

    /**
     * Sets the Builder instance for the 'amount' field
     * Contains installments  total, fee, interest, principal and penalty amount summaries
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setAmountBuilder(org.apache.fineract.avro.loan.v1.LoanAmountDataV1.Builder value) {
      clearAmount();
      amountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'amount' field has an active Builder instance
     * Contains installments  total, fee, interest, principal and penalty amount summaries
     * @return True if the 'amount' field has an active Builder instance
     */
    public boolean hasAmountBuilder() {
      return amountBuilder != null;
    }

    /**
      * Clears the value of the 'amount' field.
      * Contains installments  total, fee, interest, principal and penalty amount summaries
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearAmount() {
      amount = null;
      amountBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'delinquentDate' field.
      * @return The value.
      */
    public java.lang.String getDelinquentDate() {
      return delinquentDate;
    }


    /**
      * Sets the value of the 'delinquentDate' field.
      * @param value The value of 'delinquentDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setDelinquentDate(java.lang.String value) {
      validate(fields()[7], value);
      this.delinquentDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'delinquentDate' field has been set.
      * @return True if the 'delinquentDate' field has been set, false otherwise.
      */
    public boolean hasDelinquentDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'delinquentDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearDelinquentDate() {
      delinquentDate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'installmentDelinquencyBuckets' field.
      * @return The value.
      */
    public java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> getInstallmentDelinquencyBuckets() {
      return installmentDelinquencyBuckets;
    }


    /**
      * Sets the value of the 'installmentDelinquencyBuckets' field.
      * @param value The value of 'installmentDelinquencyBuckets'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder setInstallmentDelinquencyBuckets(java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1> value) {
      validate(fields()[8], value);
      this.installmentDelinquencyBuckets = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'installmentDelinquencyBuckets' field has been set.
      * @return True if the 'installmentDelinquencyBuckets' field has been set, false otherwise.
      */
    public boolean hasInstallmentDelinquencyBuckets() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'installmentDelinquencyBuckets' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanAccountDelinquencyRangeDataV1.Builder clearInstallmentDelinquencyBuckets() {
      installmentDelinquencyBuckets = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanAccountDelinquencyRangeDataV1 build() {
      try {
        LoanAccountDelinquencyRangeDataV1 record = new LoanAccountDelinquencyRangeDataV1();
        record.loanId = fieldSetFlags()[0] ? this.loanId : (java.lang.Long) defaultValue(fields()[0]);
        record.loanAccountNo = fieldSetFlags()[1] ? this.loanAccountNo : (java.lang.String) defaultValue(fields()[1]);
        record.loanExternalId = fieldSetFlags()[2] ? this.loanExternalId : (java.lang.String) defaultValue(fields()[2]);
        if (delinquencyRangeBuilder != null) {
          try {
            record.delinquencyRange = this.delinquencyRangeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("delinquencyRange"));
            throw e;
          }
        } else {
          record.delinquencyRange = fieldSetFlags()[3] ? this.delinquencyRange : (org.apache.fineract.avro.loan.v1.DelinquencyRangeDataV1) defaultValue(fields()[3]);
        }
        record.charges = fieldSetFlags()[4] ? this.charges : (java.util.List<org.apache.fineract.avro.loan.v1.LoanChargeDataRangeViewV1>) defaultValue(fields()[4]);
        if (currencyBuilder != null) {
          try {
            record.currency = this.currencyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currency"));
            throw e;
          }
        } else {
          record.currency = fieldSetFlags()[5] ? this.currency : (org.apache.fineract.avro.generic.v1.CurrencyDataV1) defaultValue(fields()[5]);
        }
        if (amountBuilder != null) {
          try {
            record.amount = this.amountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("amount"));
            throw e;
          }
        } else {
          record.amount = fieldSetFlags()[6] ? this.amount : (org.apache.fineract.avro.loan.v1.LoanAmountDataV1) defaultValue(fields()[6]);
        }
        record.delinquentDate = fieldSetFlags()[7] ? this.delinquentDate : (java.lang.String) defaultValue(fields()[7]);
        record.installmentDelinquencyBuckets = fieldSetFlags()[8] ? this.installmentDelinquencyBuckets : (java.util.List<org.apache.fineract.avro.loan.v1.LoanInstallmentDelinquencyBucketDataV1>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanAccountDelinquencyRangeDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanAccountDelinquencyRangeDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanAccountDelinquencyRangeDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanAccountDelinquencyRangeDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










