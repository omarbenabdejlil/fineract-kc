/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.share.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShareAccountTransactionDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 6791528303342210025L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShareAccountTransactionDataV1\",\"namespace\":\"org.apache.fineract.avro.share.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"accountId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"purchasedDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"numberOfShares\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"purchasedPrice\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EnumOptionDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"org.apache.fineract.avro.generic.v1.EnumOptionDataV1\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"chargeAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"amountPaid\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<ShareAccountTransactionDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShareAccountTransactionDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShareAccountTransactionDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShareAccountTransactionDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShareAccountTransactionDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShareAccountTransactionDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShareAccountTransactionDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShareAccountTransactionDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShareAccountTransactionDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private java.lang.Long accountId;
  private java.lang.String purchasedDate;
  private java.lang.Long numberOfShares;
  private java.math.BigDecimal purchasedPrice;
  private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 status;
  private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 type;
  private java.math.BigDecimal amount;
  private java.math.BigDecimal chargeAmount;
  private java.math.BigDecimal amountPaid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShareAccountTransactionDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param accountId The new value for accountId
   * @param purchasedDate The new value for purchasedDate
   * @param numberOfShares The new value for numberOfShares
   * @param purchasedPrice The new value for purchasedPrice
   * @param status The new value for status
   * @param type The new value for type
   * @param amount The new value for amount
   * @param chargeAmount The new value for chargeAmount
   * @param amountPaid The new value for amountPaid
   */
  public ShareAccountTransactionDataV1(java.lang.Long id, java.lang.Long accountId, java.lang.String purchasedDate, java.lang.Long numberOfShares, java.math.BigDecimal purchasedPrice, org.apache.fineract.avro.generic.v1.EnumOptionDataV1 status, org.apache.fineract.avro.generic.v1.EnumOptionDataV1 type, java.math.BigDecimal amount, java.math.BigDecimal chargeAmount, java.math.BigDecimal amountPaid) {
    this.id = id;
    this.accountId = accountId;
    this.purchasedDate = purchasedDate;
    this.numberOfShares = numberOfShares;
    this.purchasedPrice = purchasedPrice;
    this.status = status;
    this.type = type;
    this.amount = amount;
    this.chargeAmount = chargeAmount;
    this.amountPaid = amountPaid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return accountId;
    case 2: return purchasedDate;
    case 3: return numberOfShares;
    case 4: return purchasedPrice;
    case 5: return status;
    case 6: return type;
    case 7: return amount;
    case 8: return chargeAmount;
    case 9: return amountPaid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: accountId = (java.lang.Long)value$; break;
    case 2: purchasedDate = value$ != null ? value$.toString() : null; break;
    case 3: numberOfShares = (java.lang.Long)value$; break;
    case 4: purchasedPrice = (java.math.BigDecimal)value$; break;
    case 5: status = (org.apache.fineract.avro.generic.v1.EnumOptionDataV1)value$; break;
    case 6: type = (org.apache.fineract.avro.generic.v1.EnumOptionDataV1)value$; break;
    case 7: amount = (java.math.BigDecimal)value$; break;
    case 8: chargeAmount = (java.math.BigDecimal)value$; break;
    case 9: amountPaid = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public java.lang.Long getAccountId() {
    return accountId;
  }


  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.Long value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'purchasedDate' field.
   * @return The value of the 'purchasedDate' field.
   */
  public java.lang.String getPurchasedDate() {
    return purchasedDate;
  }


  /**
   * Sets the value of the 'purchasedDate' field.
   * @param value the value to set.
   */
  public void setPurchasedDate(java.lang.String value) {
    this.purchasedDate = value;
  }

  /**
   * Gets the value of the 'numberOfShares' field.
   * @return The value of the 'numberOfShares' field.
   */
  public java.lang.Long getNumberOfShares() {
    return numberOfShares;
  }


  /**
   * Sets the value of the 'numberOfShares' field.
   * @param value the value to set.
   */
  public void setNumberOfShares(java.lang.Long value) {
    this.numberOfShares = value;
  }

  /**
   * Gets the value of the 'purchasedPrice' field.
   * @return The value of the 'purchasedPrice' field.
   */
  public java.math.BigDecimal getPurchasedPrice() {
    return purchasedPrice;
  }


  /**
   * Sets the value of the 'purchasedPrice' field.
   * @param value the value to set.
   */
  public void setPurchasedPrice(java.math.BigDecimal value) {
    this.purchasedPrice = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'chargeAmount' field.
   * @return The value of the 'chargeAmount' field.
   */
  public java.math.BigDecimal getChargeAmount() {
    return chargeAmount;
  }


  /**
   * Sets the value of the 'chargeAmount' field.
   * @param value the value to set.
   */
  public void setChargeAmount(java.math.BigDecimal value) {
    this.chargeAmount = value;
  }

  /**
   * Gets the value of the 'amountPaid' field.
   * @return The value of the 'amountPaid' field.
   */
  public java.math.BigDecimal getAmountPaid() {
    return amountPaid;
  }


  /**
   * Sets the value of the 'amountPaid' field.
   * @param value the value to set.
   */
  public void setAmountPaid(java.math.BigDecimal value) {
    this.amountPaid = value;
  }

  /**
   * Creates a new ShareAccountTransactionDataV1 RecordBuilder.
   * @return A new ShareAccountTransactionDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder();
  }

  /**
   * Creates a new ShareAccountTransactionDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShareAccountTransactionDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder newBuilder(org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder(other);
    }
  }

  /**
   * Creates a new ShareAccountTransactionDataV1 RecordBuilder by copying an existing ShareAccountTransactionDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new ShareAccountTransactionDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder newBuilder(org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShareAccountTransactionDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShareAccountTransactionDataV1>
    implements org.apache.avro.data.RecordBuilder<ShareAccountTransactionDataV1> {

    private java.lang.Long id;
    private java.lang.Long accountId;
    private java.lang.String purchasedDate;
    private java.lang.Long numberOfShares;
    private java.math.BigDecimal purchasedPrice;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 status;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder statusBuilder;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 type;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder typeBuilder;
    private java.math.BigDecimal amount;
    private java.math.BigDecimal chargeAmount;
    private java.math.BigDecimal amountPaid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountId)) {
        this.accountId = data().deepCopy(fields()[1].schema(), other.accountId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.purchasedDate)) {
        this.purchasedDate = data().deepCopy(fields()[2].schema(), other.purchasedDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.numberOfShares)) {
        this.numberOfShares = data().deepCopy(fields()[3].schema(), other.numberOfShares);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.purchasedPrice)) {
        this.purchasedPrice = data().deepCopy(fields()[4].schema(), other.purchasedPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasStatusBuilder()) {
        this.statusBuilder = org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(other.getStatusBuilder());
      }
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasTypeBuilder()) {
        this.typeBuilder = org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(other.getTypeBuilder());
      }
      if (isValidValue(fields()[7], other.amount)) {
        this.amount = data().deepCopy(fields()[7].schema(), other.amount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.chargeAmount)) {
        this.chargeAmount = data().deepCopy(fields()[8].schema(), other.chargeAmount);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.amountPaid)) {
        this.amountPaid = data().deepCopy(fields()[9].schema(), other.amountPaid);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing ShareAccountTransactionDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountId)) {
        this.accountId = data().deepCopy(fields()[1].schema(), other.accountId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.purchasedDate)) {
        this.purchasedDate = data().deepCopy(fields()[2].schema(), other.purchasedDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberOfShares)) {
        this.numberOfShares = data().deepCopy(fields()[3].schema(), other.numberOfShares);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.purchasedPrice)) {
        this.purchasedPrice = data().deepCopy(fields()[4].schema(), other.purchasedPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      this.statusBuilder = null;
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = true;
      }
      this.typeBuilder = null;
      if (isValidValue(fields()[7], other.amount)) {
        this.amount = data().deepCopy(fields()[7].schema(), other.amount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.chargeAmount)) {
        this.chargeAmount = data().deepCopy(fields()[8].schema(), other.chargeAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.amountPaid)) {
        this.amountPaid = data().deepCopy(fields()[9].schema(), other.amountPaid);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public java.lang.Long getAccountId() {
      return accountId;
    }


    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setAccountId(java.lang.Long value) {
      validate(fields()[1], value);
      this.accountId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasedDate' field.
      * @return The value.
      */
    public java.lang.String getPurchasedDate() {
      return purchasedDate;
    }


    /**
      * Sets the value of the 'purchasedDate' field.
      * @param value The value of 'purchasedDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setPurchasedDate(java.lang.String value) {
      validate(fields()[2], value);
      this.purchasedDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasedDate' field has been set.
      * @return True if the 'purchasedDate' field has been set, false otherwise.
      */
    public boolean hasPurchasedDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'purchasedDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearPurchasedDate() {
      purchasedDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfShares' field.
      * @return The value.
      */
    public java.lang.Long getNumberOfShares() {
      return numberOfShares;
    }


    /**
      * Sets the value of the 'numberOfShares' field.
      * @param value The value of 'numberOfShares'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setNumberOfShares(java.lang.Long value) {
      validate(fields()[3], value);
      this.numberOfShares = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfShares' field has been set.
      * @return True if the 'numberOfShares' field has been set, false otherwise.
      */
    public boolean hasNumberOfShares() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'numberOfShares' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearNumberOfShares() {
      numberOfShares = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasedPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getPurchasedPrice() {
      return purchasedPrice;
    }


    /**
      * Sets the value of the 'purchasedPrice' field.
      * @param value The value of 'purchasedPrice'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setPurchasedPrice(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.purchasedPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasedPrice' field has been set.
      * @return True if the 'purchasedPrice' field has been set, false otherwise.
      */
    public boolean hasPurchasedPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'purchasedPrice' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearPurchasedPrice() {
      purchasedPrice = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setStatus(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
      validate(fields()[5], value);
      this.statusBuilder = null;
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'status' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder getStatusBuilder() {
      if (statusBuilder == null) {
        if (hasStatus()) {
          setStatusBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(status));
        } else {
          setStatusBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder());
        }
      }
      return statusBuilder;
    }

    /**
     * Sets the Builder instance for the 'status' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setStatusBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder value) {
      clearStatus();
      statusBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'status' field has an active Builder instance
     * @return True if the 'status' field has an active Builder instance
     */
    public boolean hasStatusBuilder() {
      return statusBuilder != null;
    }

    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearStatus() {
      status = null;
      statusBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setType(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
      validate(fields()[6], value);
      this.typeBuilder = null;
      this.type = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'type' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder getTypeBuilder() {
      if (typeBuilder == null) {
        if (hasType()) {
          setTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(type));
        } else {
          setTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder());
        }
      }
      return typeBuilder;
    }

    /**
     * Sets the Builder instance for the 'type' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder value) {
      clearType();
      typeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'type' field has an active Builder instance
     * @return True if the 'type' field has an active Builder instance
     */
    public boolean hasTypeBuilder() {
      return typeBuilder != null;
    }

    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearType() {
      type = null;
      typeBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.amount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getChargeAmount() {
      return chargeAmount;
    }


    /**
      * Sets the value of the 'chargeAmount' field.
      * @param value The value of 'chargeAmount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setChargeAmount(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.chargeAmount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeAmount' field has been set.
      * @return True if the 'chargeAmount' field has been set, false otherwise.
      */
    public boolean hasChargeAmount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'chargeAmount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearChargeAmount() {
      chargeAmount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountPaid' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmountPaid() {
      return amountPaid;
    }


    /**
      * Sets the value of the 'amountPaid' field.
      * @param value The value of 'amountPaid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder setAmountPaid(java.math.BigDecimal value) {
      validate(fields()[9], value);
      this.amountPaid = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'amountPaid' field has been set.
      * @return True if the 'amountPaid' field has been set, false otherwise.
      */
    public boolean hasAmountPaid() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'amountPaid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.share.v1.ShareAccountTransactionDataV1.Builder clearAmountPaid() {
      amountPaid = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShareAccountTransactionDataV1 build() {
      try {
        ShareAccountTransactionDataV1 record = new ShareAccountTransactionDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.accountId = fieldSetFlags()[1] ? this.accountId : (java.lang.Long) defaultValue(fields()[1]);
        record.purchasedDate = fieldSetFlags()[2] ? this.purchasedDate : (java.lang.String) defaultValue(fields()[2]);
        record.numberOfShares = fieldSetFlags()[3] ? this.numberOfShares : (java.lang.Long) defaultValue(fields()[3]);
        record.purchasedPrice = fieldSetFlags()[4] ? this.purchasedPrice : (java.math.BigDecimal) defaultValue(fields()[4]);
        if (statusBuilder != null) {
          try {
            record.status = this.statusBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("status"));
            throw e;
          }
        } else {
          record.status = fieldSetFlags()[5] ? this.status : (org.apache.fineract.avro.generic.v1.EnumOptionDataV1) defaultValue(fields()[5]);
        }
        if (typeBuilder != null) {
          try {
            record.type = this.typeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("type"));
            throw e;
          }
        } else {
          record.type = fieldSetFlags()[6] ? this.type : (org.apache.fineract.avro.generic.v1.EnumOptionDataV1) defaultValue(fields()[6]);
        }
        record.amount = fieldSetFlags()[7] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[7]);
        record.chargeAmount = fieldSetFlags()[8] ? this.chargeAmount : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.amountPaid = fieldSetFlags()[9] ? this.amountPaid : (java.math.BigDecimal) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShareAccountTransactionDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShareAccountTransactionDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShareAccountTransactionDataV1>
    READER$ = (org.apache.avro.io.DatumReader<ShareAccountTransactionDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










