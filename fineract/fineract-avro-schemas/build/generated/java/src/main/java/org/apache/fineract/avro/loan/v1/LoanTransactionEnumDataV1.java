/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanTransactionEnumDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 8273140638308174307L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanTransactionEnumDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"disbursement\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"repaymentAtDisbursement\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"repayment\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"merchantIssuedRefund\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"payoutRefund\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"goodwillCredit\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"chargeRefund\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"contra\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"waiveInterest\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"waiveCharges\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"accrual\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"writeOff\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"recoveryRepayment\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"initiateTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"approveTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"withdrawTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"rejectTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"chargePayment\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"refund\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"refundForActiveLoans\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"creditBalanceRefund\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"chargeback\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LoanTransactionEnumDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanTransactionEnumDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanTransactionEnumDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanTransactionEnumDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanTransactionEnumDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanTransactionEnumDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanTransactionEnumDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanTransactionEnumDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanTransactionEnumDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer id;
  private java.lang.String code;
  private java.lang.String value;
  private java.lang.Boolean disbursement;
  private java.lang.Boolean repaymentAtDisbursement;
  private java.lang.Boolean repayment;
  private java.lang.Boolean merchantIssuedRefund;
  private java.lang.Boolean payoutRefund;
  private java.lang.Boolean goodwillCredit;
  private java.lang.Boolean chargeRefund;
  private java.lang.Boolean contra;
  private java.lang.Boolean waiveInterest;
  private java.lang.Boolean waiveCharges;
  private java.lang.Boolean accrual;
  private java.lang.Boolean writeOff;
  private java.lang.Boolean recoveryRepayment;
  private java.lang.Boolean initiateTransfer;
  private java.lang.Boolean approveTransfer;
  private java.lang.Boolean withdrawTransfer;
  private java.lang.Boolean rejectTransfer;
  private java.lang.Boolean chargePayment;
  private java.lang.Boolean refund;
  private java.lang.Boolean refundForActiveLoans;
  private java.lang.Boolean creditBalanceRefund;
  private java.lang.Boolean chargeback;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanTransactionEnumDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param code The new value for code
   * @param value The new value for value
   * @param disbursement The new value for disbursement
   * @param repaymentAtDisbursement The new value for repaymentAtDisbursement
   * @param repayment The new value for repayment
   * @param merchantIssuedRefund The new value for merchantIssuedRefund
   * @param payoutRefund The new value for payoutRefund
   * @param goodwillCredit The new value for goodwillCredit
   * @param chargeRefund The new value for chargeRefund
   * @param contra The new value for contra
   * @param waiveInterest The new value for waiveInterest
   * @param waiveCharges The new value for waiveCharges
   * @param accrual The new value for accrual
   * @param writeOff The new value for writeOff
   * @param recoveryRepayment The new value for recoveryRepayment
   * @param initiateTransfer The new value for initiateTransfer
   * @param approveTransfer The new value for approveTransfer
   * @param withdrawTransfer The new value for withdrawTransfer
   * @param rejectTransfer The new value for rejectTransfer
   * @param chargePayment The new value for chargePayment
   * @param refund The new value for refund
   * @param refundForActiveLoans The new value for refundForActiveLoans
   * @param creditBalanceRefund The new value for creditBalanceRefund
   * @param chargeback The new value for chargeback
   */
  public LoanTransactionEnumDataV1(java.lang.Integer id, java.lang.String code, java.lang.String value, java.lang.Boolean disbursement, java.lang.Boolean repaymentAtDisbursement, java.lang.Boolean repayment, java.lang.Boolean merchantIssuedRefund, java.lang.Boolean payoutRefund, java.lang.Boolean goodwillCredit, java.lang.Boolean chargeRefund, java.lang.Boolean contra, java.lang.Boolean waiveInterest, java.lang.Boolean waiveCharges, java.lang.Boolean accrual, java.lang.Boolean writeOff, java.lang.Boolean recoveryRepayment, java.lang.Boolean initiateTransfer, java.lang.Boolean approveTransfer, java.lang.Boolean withdrawTransfer, java.lang.Boolean rejectTransfer, java.lang.Boolean chargePayment, java.lang.Boolean refund, java.lang.Boolean refundForActiveLoans, java.lang.Boolean creditBalanceRefund, java.lang.Boolean chargeback) {
    this.id = id;
    this.code = code;
    this.value = value;
    this.disbursement = disbursement;
    this.repaymentAtDisbursement = repaymentAtDisbursement;
    this.repayment = repayment;
    this.merchantIssuedRefund = merchantIssuedRefund;
    this.payoutRefund = payoutRefund;
    this.goodwillCredit = goodwillCredit;
    this.chargeRefund = chargeRefund;
    this.contra = contra;
    this.waiveInterest = waiveInterest;
    this.waiveCharges = waiveCharges;
    this.accrual = accrual;
    this.writeOff = writeOff;
    this.recoveryRepayment = recoveryRepayment;
    this.initiateTransfer = initiateTransfer;
    this.approveTransfer = approveTransfer;
    this.withdrawTransfer = withdrawTransfer;
    this.rejectTransfer = rejectTransfer;
    this.chargePayment = chargePayment;
    this.refund = refund;
    this.refundForActiveLoans = refundForActiveLoans;
    this.creditBalanceRefund = creditBalanceRefund;
    this.chargeback = chargeback;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return code;
    case 2: return value;
    case 3: return disbursement;
    case 4: return repaymentAtDisbursement;
    case 5: return repayment;
    case 6: return merchantIssuedRefund;
    case 7: return payoutRefund;
    case 8: return goodwillCredit;
    case 9: return chargeRefund;
    case 10: return contra;
    case 11: return waiveInterest;
    case 12: return waiveCharges;
    case 13: return accrual;
    case 14: return writeOff;
    case 15: return recoveryRepayment;
    case 16: return initiateTransfer;
    case 17: return approveTransfer;
    case 18: return withdrawTransfer;
    case 19: return rejectTransfer;
    case 20: return chargePayment;
    case 21: return refund;
    case 22: return refundForActiveLoans;
    case 23: return creditBalanceRefund;
    case 24: return chargeback;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: code = value$ != null ? value$.toString() : null; break;
    case 2: value = value$ != null ? value$.toString() : null; break;
    case 3: disbursement = (java.lang.Boolean)value$; break;
    case 4: repaymentAtDisbursement = (java.lang.Boolean)value$; break;
    case 5: repayment = (java.lang.Boolean)value$; break;
    case 6: merchantIssuedRefund = (java.lang.Boolean)value$; break;
    case 7: payoutRefund = (java.lang.Boolean)value$; break;
    case 8: goodwillCredit = (java.lang.Boolean)value$; break;
    case 9: chargeRefund = (java.lang.Boolean)value$; break;
    case 10: contra = (java.lang.Boolean)value$; break;
    case 11: waiveInterest = (java.lang.Boolean)value$; break;
    case 12: waiveCharges = (java.lang.Boolean)value$; break;
    case 13: accrual = (java.lang.Boolean)value$; break;
    case 14: writeOff = (java.lang.Boolean)value$; break;
    case 15: recoveryRepayment = (java.lang.Boolean)value$; break;
    case 16: initiateTransfer = (java.lang.Boolean)value$; break;
    case 17: approveTransfer = (java.lang.Boolean)value$; break;
    case 18: withdrawTransfer = (java.lang.Boolean)value$; break;
    case 19: rejectTransfer = (java.lang.Boolean)value$; break;
    case 20: chargePayment = (java.lang.Boolean)value$; break;
    case 21: refund = (java.lang.Boolean)value$; break;
    case 22: refundForActiveLoans = (java.lang.Boolean)value$; break;
    case 23: creditBalanceRefund = (java.lang.Boolean)value$; break;
    case 24: chargeback = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'disbursement' field.
   * @return The value of the 'disbursement' field.
   */
  public java.lang.Boolean getDisbursement() {
    return disbursement;
  }


  /**
   * Sets the value of the 'disbursement' field.
   * @param value the value to set.
   */
  public void setDisbursement(java.lang.Boolean value) {
    this.disbursement = value;
  }

  /**
   * Gets the value of the 'repaymentAtDisbursement' field.
   * @return The value of the 'repaymentAtDisbursement' field.
   */
  public java.lang.Boolean getRepaymentAtDisbursement() {
    return repaymentAtDisbursement;
  }


  /**
   * Sets the value of the 'repaymentAtDisbursement' field.
   * @param value the value to set.
   */
  public void setRepaymentAtDisbursement(java.lang.Boolean value) {
    this.repaymentAtDisbursement = value;
  }

  /**
   * Gets the value of the 'repayment' field.
   * @return The value of the 'repayment' field.
   */
  public java.lang.Boolean getRepayment() {
    return repayment;
  }


  /**
   * Sets the value of the 'repayment' field.
   * @param value the value to set.
   */
  public void setRepayment(java.lang.Boolean value) {
    this.repayment = value;
  }

  /**
   * Gets the value of the 'merchantIssuedRefund' field.
   * @return The value of the 'merchantIssuedRefund' field.
   */
  public java.lang.Boolean getMerchantIssuedRefund() {
    return merchantIssuedRefund;
  }


  /**
   * Sets the value of the 'merchantIssuedRefund' field.
   * @param value the value to set.
   */
  public void setMerchantIssuedRefund(java.lang.Boolean value) {
    this.merchantIssuedRefund = value;
  }

  /**
   * Gets the value of the 'payoutRefund' field.
   * @return The value of the 'payoutRefund' field.
   */
  public java.lang.Boolean getPayoutRefund() {
    return payoutRefund;
  }


  /**
   * Sets the value of the 'payoutRefund' field.
   * @param value the value to set.
   */
  public void setPayoutRefund(java.lang.Boolean value) {
    this.payoutRefund = value;
  }

  /**
   * Gets the value of the 'goodwillCredit' field.
   * @return The value of the 'goodwillCredit' field.
   */
  public java.lang.Boolean getGoodwillCredit() {
    return goodwillCredit;
  }


  /**
   * Sets the value of the 'goodwillCredit' field.
   * @param value the value to set.
   */
  public void setGoodwillCredit(java.lang.Boolean value) {
    this.goodwillCredit = value;
  }

  /**
   * Gets the value of the 'chargeRefund' field.
   * @return The value of the 'chargeRefund' field.
   */
  public java.lang.Boolean getChargeRefund() {
    return chargeRefund;
  }


  /**
   * Sets the value of the 'chargeRefund' field.
   * @param value the value to set.
   */
  public void setChargeRefund(java.lang.Boolean value) {
    this.chargeRefund = value;
  }

  /**
   * Gets the value of the 'contra' field.
   * @return The value of the 'contra' field.
   */
  public java.lang.Boolean getContra() {
    return contra;
  }


  /**
   * Sets the value of the 'contra' field.
   * @param value the value to set.
   */
  public void setContra(java.lang.Boolean value) {
    this.contra = value;
  }

  /**
   * Gets the value of the 'waiveInterest' field.
   * @return The value of the 'waiveInterest' field.
   */
  public java.lang.Boolean getWaiveInterest() {
    return waiveInterest;
  }


  /**
   * Sets the value of the 'waiveInterest' field.
   * @param value the value to set.
   */
  public void setWaiveInterest(java.lang.Boolean value) {
    this.waiveInterest = value;
  }

  /**
   * Gets the value of the 'waiveCharges' field.
   * @return The value of the 'waiveCharges' field.
   */
  public java.lang.Boolean getWaiveCharges() {
    return waiveCharges;
  }


  /**
   * Sets the value of the 'waiveCharges' field.
   * @param value the value to set.
   */
  public void setWaiveCharges(java.lang.Boolean value) {
    this.waiveCharges = value;
  }

  /**
   * Gets the value of the 'accrual' field.
   * @return The value of the 'accrual' field.
   */
  public java.lang.Boolean getAccrual() {
    return accrual;
  }


  /**
   * Sets the value of the 'accrual' field.
   * @param value the value to set.
   */
  public void setAccrual(java.lang.Boolean value) {
    this.accrual = value;
  }

  /**
   * Gets the value of the 'writeOff' field.
   * @return The value of the 'writeOff' field.
   */
  public java.lang.Boolean getWriteOff() {
    return writeOff;
  }


  /**
   * Sets the value of the 'writeOff' field.
   * @param value the value to set.
   */
  public void setWriteOff(java.lang.Boolean value) {
    this.writeOff = value;
  }

  /**
   * Gets the value of the 'recoveryRepayment' field.
   * @return The value of the 'recoveryRepayment' field.
   */
  public java.lang.Boolean getRecoveryRepayment() {
    return recoveryRepayment;
  }


  /**
   * Sets the value of the 'recoveryRepayment' field.
   * @param value the value to set.
   */
  public void setRecoveryRepayment(java.lang.Boolean value) {
    this.recoveryRepayment = value;
  }

  /**
   * Gets the value of the 'initiateTransfer' field.
   * @return The value of the 'initiateTransfer' field.
   */
  public java.lang.Boolean getInitiateTransfer() {
    return initiateTransfer;
  }


  /**
   * Sets the value of the 'initiateTransfer' field.
   * @param value the value to set.
   */
  public void setInitiateTransfer(java.lang.Boolean value) {
    this.initiateTransfer = value;
  }

  /**
   * Gets the value of the 'approveTransfer' field.
   * @return The value of the 'approveTransfer' field.
   */
  public java.lang.Boolean getApproveTransfer() {
    return approveTransfer;
  }


  /**
   * Sets the value of the 'approveTransfer' field.
   * @param value the value to set.
   */
  public void setApproveTransfer(java.lang.Boolean value) {
    this.approveTransfer = value;
  }

  /**
   * Gets the value of the 'withdrawTransfer' field.
   * @return The value of the 'withdrawTransfer' field.
   */
  public java.lang.Boolean getWithdrawTransfer() {
    return withdrawTransfer;
  }


  /**
   * Sets the value of the 'withdrawTransfer' field.
   * @param value the value to set.
   */
  public void setWithdrawTransfer(java.lang.Boolean value) {
    this.withdrawTransfer = value;
  }

  /**
   * Gets the value of the 'rejectTransfer' field.
   * @return The value of the 'rejectTransfer' field.
   */
  public java.lang.Boolean getRejectTransfer() {
    return rejectTransfer;
  }


  /**
   * Sets the value of the 'rejectTransfer' field.
   * @param value the value to set.
   */
  public void setRejectTransfer(java.lang.Boolean value) {
    this.rejectTransfer = value;
  }

  /**
   * Gets the value of the 'chargePayment' field.
   * @return The value of the 'chargePayment' field.
   */
  public java.lang.Boolean getChargePayment() {
    return chargePayment;
  }


  /**
   * Sets the value of the 'chargePayment' field.
   * @param value the value to set.
   */
  public void setChargePayment(java.lang.Boolean value) {
    this.chargePayment = value;
  }

  /**
   * Gets the value of the 'refund' field.
   * @return The value of the 'refund' field.
   */
  public java.lang.Boolean getRefund() {
    return refund;
  }


  /**
   * Sets the value of the 'refund' field.
   * @param value the value to set.
   */
  public void setRefund(java.lang.Boolean value) {
    this.refund = value;
  }

  /**
   * Gets the value of the 'refundForActiveLoans' field.
   * @return The value of the 'refundForActiveLoans' field.
   */
  public java.lang.Boolean getRefundForActiveLoans() {
    return refundForActiveLoans;
  }


  /**
   * Sets the value of the 'refundForActiveLoans' field.
   * @param value the value to set.
   */
  public void setRefundForActiveLoans(java.lang.Boolean value) {
    this.refundForActiveLoans = value;
  }

  /**
   * Gets the value of the 'creditBalanceRefund' field.
   * @return The value of the 'creditBalanceRefund' field.
   */
  public java.lang.Boolean getCreditBalanceRefund() {
    return creditBalanceRefund;
  }


  /**
   * Sets the value of the 'creditBalanceRefund' field.
   * @param value the value to set.
   */
  public void setCreditBalanceRefund(java.lang.Boolean value) {
    this.creditBalanceRefund = value;
  }

  /**
   * Gets the value of the 'chargeback' field.
   * @return The value of the 'chargeback' field.
   */
  public java.lang.Boolean getChargeback() {
    return chargeback;
  }


  /**
   * Sets the value of the 'chargeback' field.
   * @param value the value to set.
   */
  public void setChargeback(java.lang.Boolean value) {
    this.chargeback = value;
  }

  /**
   * Creates a new LoanTransactionEnumDataV1 RecordBuilder.
   * @return A new LoanTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder();
  }

  /**
   * Creates a new LoanTransactionEnumDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanTransactionEnumDataV1 RecordBuilder by copying an existing LoanTransactionEnumDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanTransactionEnumDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanTransactionEnumDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanTransactionEnumDataV1> {

    private java.lang.Integer id;
    private java.lang.String code;
    private java.lang.String value;
    private java.lang.Boolean disbursement;
    private java.lang.Boolean repaymentAtDisbursement;
    private java.lang.Boolean repayment;
    private java.lang.Boolean merchantIssuedRefund;
    private java.lang.Boolean payoutRefund;
    private java.lang.Boolean goodwillCredit;
    private java.lang.Boolean chargeRefund;
    private java.lang.Boolean contra;
    private java.lang.Boolean waiveInterest;
    private java.lang.Boolean waiveCharges;
    private java.lang.Boolean accrual;
    private java.lang.Boolean writeOff;
    private java.lang.Boolean recoveryRepayment;
    private java.lang.Boolean initiateTransfer;
    private java.lang.Boolean approveTransfer;
    private java.lang.Boolean withdrawTransfer;
    private java.lang.Boolean rejectTransfer;
    private java.lang.Boolean chargePayment;
    private java.lang.Boolean refund;
    private java.lang.Boolean refundForActiveLoans;
    private java.lang.Boolean creditBalanceRefund;
    private java.lang.Boolean chargeback;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.disbursement)) {
        this.disbursement = data().deepCopy(fields()[3].schema(), other.disbursement);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.repaymentAtDisbursement)) {
        this.repaymentAtDisbursement = data().deepCopy(fields()[4].schema(), other.repaymentAtDisbursement);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.repayment)) {
        this.repayment = data().deepCopy(fields()[5].schema(), other.repayment);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.merchantIssuedRefund)) {
        this.merchantIssuedRefund = data().deepCopy(fields()[6].schema(), other.merchantIssuedRefund);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.payoutRefund)) {
        this.payoutRefund = data().deepCopy(fields()[7].schema(), other.payoutRefund);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.goodwillCredit)) {
        this.goodwillCredit = data().deepCopy(fields()[8].schema(), other.goodwillCredit);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.chargeRefund)) {
        this.chargeRefund = data().deepCopy(fields()[9].schema(), other.chargeRefund);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.contra)) {
        this.contra = data().deepCopy(fields()[10].schema(), other.contra);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.waiveInterest)) {
        this.waiveInterest = data().deepCopy(fields()[11].schema(), other.waiveInterest);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.waiveCharges)) {
        this.waiveCharges = data().deepCopy(fields()[12].schema(), other.waiveCharges);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.accrual)) {
        this.accrual = data().deepCopy(fields()[13].schema(), other.accrual);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.writeOff)) {
        this.writeOff = data().deepCopy(fields()[14].schema(), other.writeOff);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.recoveryRepayment)) {
        this.recoveryRepayment = data().deepCopy(fields()[15].schema(), other.recoveryRepayment);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.initiateTransfer)) {
        this.initiateTransfer = data().deepCopy(fields()[16].schema(), other.initiateTransfer);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.approveTransfer)) {
        this.approveTransfer = data().deepCopy(fields()[17].schema(), other.approveTransfer);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.withdrawTransfer)) {
        this.withdrawTransfer = data().deepCopy(fields()[18].schema(), other.withdrawTransfer);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.rejectTransfer)) {
        this.rejectTransfer = data().deepCopy(fields()[19].schema(), other.rejectTransfer);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.chargePayment)) {
        this.chargePayment = data().deepCopy(fields()[20].schema(), other.chargePayment);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.refund)) {
        this.refund = data().deepCopy(fields()[21].schema(), other.refund);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.refundForActiveLoans)) {
        this.refundForActiveLoans = data().deepCopy(fields()[22].schema(), other.refundForActiveLoans);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.creditBalanceRefund)) {
        this.creditBalanceRefund = data().deepCopy(fields()[23].schema(), other.creditBalanceRefund);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.chargeback)) {
        this.chargeback = data().deepCopy(fields()[24].schema(), other.chargeback);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanTransactionEnumDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.disbursement)) {
        this.disbursement = data().deepCopy(fields()[3].schema(), other.disbursement);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.repaymentAtDisbursement)) {
        this.repaymentAtDisbursement = data().deepCopy(fields()[4].schema(), other.repaymentAtDisbursement);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.repayment)) {
        this.repayment = data().deepCopy(fields()[5].schema(), other.repayment);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.merchantIssuedRefund)) {
        this.merchantIssuedRefund = data().deepCopy(fields()[6].schema(), other.merchantIssuedRefund);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.payoutRefund)) {
        this.payoutRefund = data().deepCopy(fields()[7].schema(), other.payoutRefund);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.goodwillCredit)) {
        this.goodwillCredit = data().deepCopy(fields()[8].schema(), other.goodwillCredit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.chargeRefund)) {
        this.chargeRefund = data().deepCopy(fields()[9].schema(), other.chargeRefund);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.contra)) {
        this.contra = data().deepCopy(fields()[10].schema(), other.contra);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.waiveInterest)) {
        this.waiveInterest = data().deepCopy(fields()[11].schema(), other.waiveInterest);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.waiveCharges)) {
        this.waiveCharges = data().deepCopy(fields()[12].schema(), other.waiveCharges);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.accrual)) {
        this.accrual = data().deepCopy(fields()[13].schema(), other.accrual);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.writeOff)) {
        this.writeOff = data().deepCopy(fields()[14].schema(), other.writeOff);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.recoveryRepayment)) {
        this.recoveryRepayment = data().deepCopy(fields()[15].schema(), other.recoveryRepayment);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.initiateTransfer)) {
        this.initiateTransfer = data().deepCopy(fields()[16].schema(), other.initiateTransfer);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.approveTransfer)) {
        this.approveTransfer = data().deepCopy(fields()[17].schema(), other.approveTransfer);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.withdrawTransfer)) {
        this.withdrawTransfer = data().deepCopy(fields()[18].schema(), other.withdrawTransfer);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.rejectTransfer)) {
        this.rejectTransfer = data().deepCopy(fields()[19].schema(), other.rejectTransfer);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.chargePayment)) {
        this.chargePayment = data().deepCopy(fields()[20].schema(), other.chargePayment);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.refund)) {
        this.refund = data().deepCopy(fields()[21].schema(), other.refund);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.refundForActiveLoans)) {
        this.refundForActiveLoans = data().deepCopy(fields()[22].schema(), other.refundForActiveLoans);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.creditBalanceRefund)) {
        this.creditBalanceRefund = data().deepCopy(fields()[23].schema(), other.creditBalanceRefund);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.chargeback)) {
        this.chargeback = data().deepCopy(fields()[24].schema(), other.chargeback);
        fieldSetFlags()[24] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setCode(java.lang.String value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'disbursement' field.
      * @return The value.
      */
    public java.lang.Boolean getDisbursement() {
      return disbursement;
    }


    /**
      * Sets the value of the 'disbursement' field.
      * @param value The value of 'disbursement'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setDisbursement(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.disbursement = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'disbursement' field has been set.
      * @return True if the 'disbursement' field has been set, false otherwise.
      */
    public boolean hasDisbursement() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'disbursement' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearDisbursement() {
      disbursement = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'repaymentAtDisbursement' field.
      * @return The value.
      */
    public java.lang.Boolean getRepaymentAtDisbursement() {
      return repaymentAtDisbursement;
    }


    /**
      * Sets the value of the 'repaymentAtDisbursement' field.
      * @param value The value of 'repaymentAtDisbursement'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRepaymentAtDisbursement(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.repaymentAtDisbursement = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'repaymentAtDisbursement' field has been set.
      * @return True if the 'repaymentAtDisbursement' field has been set, false otherwise.
      */
    public boolean hasRepaymentAtDisbursement() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'repaymentAtDisbursement' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRepaymentAtDisbursement() {
      repaymentAtDisbursement = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'repayment' field.
      * @return The value.
      */
    public java.lang.Boolean getRepayment() {
      return repayment;
    }


    /**
      * Sets the value of the 'repayment' field.
      * @param value The value of 'repayment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRepayment(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.repayment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'repayment' field has been set.
      * @return True if the 'repayment' field has been set, false otherwise.
      */
    public boolean hasRepayment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'repayment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRepayment() {
      repayment = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchantIssuedRefund' field.
      * @return The value.
      */
    public java.lang.Boolean getMerchantIssuedRefund() {
      return merchantIssuedRefund;
    }


    /**
      * Sets the value of the 'merchantIssuedRefund' field.
      * @param value The value of 'merchantIssuedRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setMerchantIssuedRefund(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.merchantIssuedRefund = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'merchantIssuedRefund' field has been set.
      * @return True if the 'merchantIssuedRefund' field has been set, false otherwise.
      */
    public boolean hasMerchantIssuedRefund() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'merchantIssuedRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearMerchantIssuedRefund() {
      merchantIssuedRefund = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'payoutRefund' field.
      * @return The value.
      */
    public java.lang.Boolean getPayoutRefund() {
      return payoutRefund;
    }


    /**
      * Sets the value of the 'payoutRefund' field.
      * @param value The value of 'payoutRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setPayoutRefund(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.payoutRefund = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'payoutRefund' field has been set.
      * @return True if the 'payoutRefund' field has been set, false otherwise.
      */
    public boolean hasPayoutRefund() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'payoutRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearPayoutRefund() {
      payoutRefund = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'goodwillCredit' field.
      * @return The value.
      */
    public java.lang.Boolean getGoodwillCredit() {
      return goodwillCredit;
    }


    /**
      * Sets the value of the 'goodwillCredit' field.
      * @param value The value of 'goodwillCredit'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setGoodwillCredit(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.goodwillCredit = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'goodwillCredit' field has been set.
      * @return True if the 'goodwillCredit' field has been set, false otherwise.
      */
    public boolean hasGoodwillCredit() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'goodwillCredit' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearGoodwillCredit() {
      goodwillCredit = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeRefund' field.
      * @return The value.
      */
    public java.lang.Boolean getChargeRefund() {
      return chargeRefund;
    }


    /**
      * Sets the value of the 'chargeRefund' field.
      * @param value The value of 'chargeRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setChargeRefund(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.chargeRefund = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeRefund' field has been set.
      * @return True if the 'chargeRefund' field has been set, false otherwise.
      */
    public boolean hasChargeRefund() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'chargeRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearChargeRefund() {
      chargeRefund = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'contra' field.
      * @return The value.
      */
    public java.lang.Boolean getContra() {
      return contra;
    }


    /**
      * Sets the value of the 'contra' field.
      * @param value The value of 'contra'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setContra(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.contra = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'contra' field has been set.
      * @return True if the 'contra' field has been set, false otherwise.
      */
    public boolean hasContra() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'contra' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearContra() {
      contra = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiveInterest' field.
      * @return The value.
      */
    public java.lang.Boolean getWaiveInterest() {
      return waiveInterest;
    }


    /**
      * Sets the value of the 'waiveInterest' field.
      * @param value The value of 'waiveInterest'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setWaiveInterest(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.waiveInterest = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'waiveInterest' field has been set.
      * @return True if the 'waiveInterest' field has been set, false otherwise.
      */
    public boolean hasWaiveInterest() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'waiveInterest' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearWaiveInterest() {
      waiveInterest = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiveCharges' field.
      * @return The value.
      */
    public java.lang.Boolean getWaiveCharges() {
      return waiveCharges;
    }


    /**
      * Sets the value of the 'waiveCharges' field.
      * @param value The value of 'waiveCharges'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setWaiveCharges(java.lang.Boolean value) {
      validate(fields()[12], value);
      this.waiveCharges = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'waiveCharges' field has been set.
      * @return True if the 'waiveCharges' field has been set, false otherwise.
      */
    public boolean hasWaiveCharges() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'waiveCharges' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearWaiveCharges() {
      waiveCharges = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'accrual' field.
      * @return The value.
      */
    public java.lang.Boolean getAccrual() {
      return accrual;
    }


    /**
      * Sets the value of the 'accrual' field.
      * @param value The value of 'accrual'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setAccrual(java.lang.Boolean value) {
      validate(fields()[13], value);
      this.accrual = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'accrual' field has been set.
      * @return True if the 'accrual' field has been set, false otherwise.
      */
    public boolean hasAccrual() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'accrual' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearAccrual() {
      accrual = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'writeOff' field.
      * @return The value.
      */
    public java.lang.Boolean getWriteOff() {
      return writeOff;
    }


    /**
      * Sets the value of the 'writeOff' field.
      * @param value The value of 'writeOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setWriteOff(java.lang.Boolean value) {
      validate(fields()[14], value);
      this.writeOff = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'writeOff' field has been set.
      * @return True if the 'writeOff' field has been set, false otherwise.
      */
    public boolean hasWriteOff() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'writeOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearWriteOff() {
      writeOff = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'recoveryRepayment' field.
      * @return The value.
      */
    public java.lang.Boolean getRecoveryRepayment() {
      return recoveryRepayment;
    }


    /**
      * Sets the value of the 'recoveryRepayment' field.
      * @param value The value of 'recoveryRepayment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRecoveryRepayment(java.lang.Boolean value) {
      validate(fields()[15], value);
      this.recoveryRepayment = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'recoveryRepayment' field has been set.
      * @return True if the 'recoveryRepayment' field has been set, false otherwise.
      */
    public boolean hasRecoveryRepayment() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'recoveryRepayment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRecoveryRepayment() {
      recoveryRepayment = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiateTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getInitiateTransfer() {
      return initiateTransfer;
    }


    /**
      * Sets the value of the 'initiateTransfer' field.
      * @param value The value of 'initiateTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setInitiateTransfer(java.lang.Boolean value) {
      validate(fields()[16], value);
      this.initiateTransfer = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'initiateTransfer' field has been set.
      * @return True if the 'initiateTransfer' field has been set, false otherwise.
      */
    public boolean hasInitiateTransfer() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'initiateTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearInitiateTransfer() {
      initiateTransfer = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'approveTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getApproveTransfer() {
      return approveTransfer;
    }


    /**
      * Sets the value of the 'approveTransfer' field.
      * @param value The value of 'approveTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setApproveTransfer(java.lang.Boolean value) {
      validate(fields()[17], value);
      this.approveTransfer = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'approveTransfer' field has been set.
      * @return True if the 'approveTransfer' field has been set, false otherwise.
      */
    public boolean hasApproveTransfer() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'approveTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearApproveTransfer() {
      approveTransfer = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'withdrawTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getWithdrawTransfer() {
      return withdrawTransfer;
    }


    /**
      * Sets the value of the 'withdrawTransfer' field.
      * @param value The value of 'withdrawTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setWithdrawTransfer(java.lang.Boolean value) {
      validate(fields()[18], value);
      this.withdrawTransfer = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'withdrawTransfer' field has been set.
      * @return True if the 'withdrawTransfer' field has been set, false otherwise.
      */
    public boolean hasWithdrawTransfer() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'withdrawTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearWithdrawTransfer() {
      withdrawTransfer = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'rejectTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getRejectTransfer() {
      return rejectTransfer;
    }


    /**
      * Sets the value of the 'rejectTransfer' field.
      * @param value The value of 'rejectTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRejectTransfer(java.lang.Boolean value) {
      validate(fields()[19], value);
      this.rejectTransfer = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'rejectTransfer' field has been set.
      * @return True if the 'rejectTransfer' field has been set, false otherwise.
      */
    public boolean hasRejectTransfer() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'rejectTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRejectTransfer() {
      rejectTransfer = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargePayment' field.
      * @return The value.
      */
    public java.lang.Boolean getChargePayment() {
      return chargePayment;
    }


    /**
      * Sets the value of the 'chargePayment' field.
      * @param value The value of 'chargePayment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setChargePayment(java.lang.Boolean value) {
      validate(fields()[20], value);
      this.chargePayment = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'chargePayment' field has been set.
      * @return True if the 'chargePayment' field has been set, false otherwise.
      */
    public boolean hasChargePayment() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'chargePayment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearChargePayment() {
      chargePayment = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'refund' field.
      * @return The value.
      */
    public java.lang.Boolean getRefund() {
      return refund;
    }


    /**
      * Sets the value of the 'refund' field.
      * @param value The value of 'refund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRefund(java.lang.Boolean value) {
      validate(fields()[21], value);
      this.refund = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'refund' field has been set.
      * @return True if the 'refund' field has been set, false otherwise.
      */
    public boolean hasRefund() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'refund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRefund() {
      refund = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'refundForActiveLoans' field.
      * @return The value.
      */
    public java.lang.Boolean getRefundForActiveLoans() {
      return refundForActiveLoans;
    }


    /**
      * Sets the value of the 'refundForActiveLoans' field.
      * @param value The value of 'refundForActiveLoans'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setRefundForActiveLoans(java.lang.Boolean value) {
      validate(fields()[22], value);
      this.refundForActiveLoans = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'refundForActiveLoans' field has been set.
      * @return True if the 'refundForActiveLoans' field has been set, false otherwise.
      */
    public boolean hasRefundForActiveLoans() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'refundForActiveLoans' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearRefundForActiveLoans() {
      refundForActiveLoans = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditBalanceRefund' field.
      * @return The value.
      */
    public java.lang.Boolean getCreditBalanceRefund() {
      return creditBalanceRefund;
    }


    /**
      * Sets the value of the 'creditBalanceRefund' field.
      * @param value The value of 'creditBalanceRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setCreditBalanceRefund(java.lang.Boolean value) {
      validate(fields()[23], value);
      this.creditBalanceRefund = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'creditBalanceRefund' field has been set.
      * @return True if the 'creditBalanceRefund' field has been set, false otherwise.
      */
    public boolean hasCreditBalanceRefund() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'creditBalanceRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearCreditBalanceRefund() {
      creditBalanceRefund = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeback' field.
      * @return The value.
      */
    public java.lang.Boolean getChargeback() {
      return chargeback;
    }


    /**
      * Sets the value of the 'chargeback' field.
      * @param value The value of 'chargeback'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder setChargeback(java.lang.Boolean value) {
      validate(fields()[24], value);
      this.chargeback = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeback' field has been set.
      * @return True if the 'chargeback' field has been set, false otherwise.
      */
    public boolean hasChargeback() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'chargeback' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionEnumDataV1.Builder clearChargeback() {
      chargeback = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanTransactionEnumDataV1 build() {
      try {
        LoanTransactionEnumDataV1 record = new LoanTransactionEnumDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.disbursement = fieldSetFlags()[3] ? this.disbursement : (java.lang.Boolean) defaultValue(fields()[3]);
        record.repaymentAtDisbursement = fieldSetFlags()[4] ? this.repaymentAtDisbursement : (java.lang.Boolean) defaultValue(fields()[4]);
        record.repayment = fieldSetFlags()[5] ? this.repayment : (java.lang.Boolean) defaultValue(fields()[5]);
        record.merchantIssuedRefund = fieldSetFlags()[6] ? this.merchantIssuedRefund : (java.lang.Boolean) defaultValue(fields()[6]);
        record.payoutRefund = fieldSetFlags()[7] ? this.payoutRefund : (java.lang.Boolean) defaultValue(fields()[7]);
        record.goodwillCredit = fieldSetFlags()[8] ? this.goodwillCredit : (java.lang.Boolean) defaultValue(fields()[8]);
        record.chargeRefund = fieldSetFlags()[9] ? this.chargeRefund : (java.lang.Boolean) defaultValue(fields()[9]);
        record.contra = fieldSetFlags()[10] ? this.contra : (java.lang.Boolean) defaultValue(fields()[10]);
        record.waiveInterest = fieldSetFlags()[11] ? this.waiveInterest : (java.lang.Boolean) defaultValue(fields()[11]);
        record.waiveCharges = fieldSetFlags()[12] ? this.waiveCharges : (java.lang.Boolean) defaultValue(fields()[12]);
        record.accrual = fieldSetFlags()[13] ? this.accrual : (java.lang.Boolean) defaultValue(fields()[13]);
        record.writeOff = fieldSetFlags()[14] ? this.writeOff : (java.lang.Boolean) defaultValue(fields()[14]);
        record.recoveryRepayment = fieldSetFlags()[15] ? this.recoveryRepayment : (java.lang.Boolean) defaultValue(fields()[15]);
        record.initiateTransfer = fieldSetFlags()[16] ? this.initiateTransfer : (java.lang.Boolean) defaultValue(fields()[16]);
        record.approveTransfer = fieldSetFlags()[17] ? this.approveTransfer : (java.lang.Boolean) defaultValue(fields()[17]);
        record.withdrawTransfer = fieldSetFlags()[18] ? this.withdrawTransfer : (java.lang.Boolean) defaultValue(fields()[18]);
        record.rejectTransfer = fieldSetFlags()[19] ? this.rejectTransfer : (java.lang.Boolean) defaultValue(fields()[19]);
        record.chargePayment = fieldSetFlags()[20] ? this.chargePayment : (java.lang.Boolean) defaultValue(fields()[20]);
        record.refund = fieldSetFlags()[21] ? this.refund : (java.lang.Boolean) defaultValue(fields()[21]);
        record.refundForActiveLoans = fieldSetFlags()[22] ? this.refundForActiveLoans : (java.lang.Boolean) defaultValue(fields()[22]);
        record.creditBalanceRefund = fieldSetFlags()[23] ? this.creditBalanceRefund : (java.lang.Boolean) defaultValue(fields()[23]);
        record.chargeback = fieldSetFlags()[24] ? this.chargeback : (java.lang.Boolean) defaultValue(fields()[24]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanTransactionEnumDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanTransactionEnumDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanTransactionEnumDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanTransactionEnumDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.id);
    }

    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.value);
    }

    if (this.disbursement == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.disbursement);
    }

    if (this.repaymentAtDisbursement == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.repaymentAtDisbursement);
    }

    if (this.repayment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.repayment);
    }

    if (this.merchantIssuedRefund == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.merchantIssuedRefund);
    }

    if (this.payoutRefund == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.payoutRefund);
    }

    if (this.goodwillCredit == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.goodwillCredit);
    }

    if (this.chargeRefund == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.chargeRefund);
    }

    if (this.contra == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.contra);
    }

    if (this.waiveInterest == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.waiveInterest);
    }

    if (this.waiveCharges == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.waiveCharges);
    }

    if (this.accrual == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.accrual);
    }

    if (this.writeOff == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.writeOff);
    }

    if (this.recoveryRepayment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.recoveryRepayment);
    }

    if (this.initiateTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.initiateTransfer);
    }

    if (this.approveTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.approveTransfer);
    }

    if (this.withdrawTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.withdrawTransfer);
    }

    if (this.rejectTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.rejectTransfer);
    }

    if (this.chargePayment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.chargePayment);
    }

    if (this.refund == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.refund);
    }

    if (this.refundForActiveLoans == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.refundForActiveLoans);
    }

    if (this.creditBalanceRefund == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.creditBalanceRefund);
    }

    if (this.chargeback == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.chargeback);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.value = null;
      } else {
        this.value = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.disbursement = null;
      } else {
        this.disbursement = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.repaymentAtDisbursement = null;
      } else {
        this.repaymentAtDisbursement = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.repayment = null;
      } else {
        this.repayment = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.merchantIssuedRefund = null;
      } else {
        this.merchantIssuedRefund = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payoutRefund = null;
      } else {
        this.payoutRefund = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.goodwillCredit = null;
      } else {
        this.goodwillCredit = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.chargeRefund = null;
      } else {
        this.chargeRefund = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.contra = null;
      } else {
        this.contra = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.waiveInterest = null;
      } else {
        this.waiveInterest = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.waiveCharges = null;
      } else {
        this.waiveCharges = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accrual = null;
      } else {
        this.accrual = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.writeOff = null;
      } else {
        this.writeOff = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.recoveryRepayment = null;
      } else {
        this.recoveryRepayment = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.initiateTransfer = null;
      } else {
        this.initiateTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.approveTransfer = null;
      } else {
        this.approveTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.withdrawTransfer = null;
      } else {
        this.withdrawTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rejectTransfer = null;
      } else {
        this.rejectTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.chargePayment = null;
      } else {
        this.chargePayment = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.refund = null;
      } else {
        this.refund = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.refundForActiveLoans = null;
      } else {
        this.refundForActiveLoans = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.creditBalanceRefund = null;
      } else {
        this.creditBalanceRefund = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.chargeback = null;
      } else {
        this.chargeback = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 25; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.value = null;
          } else {
            this.value = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.disbursement = null;
          } else {
            this.disbursement = in.readBoolean();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.repaymentAtDisbursement = null;
          } else {
            this.repaymentAtDisbursement = in.readBoolean();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.repayment = null;
          } else {
            this.repayment = in.readBoolean();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.merchantIssuedRefund = null;
          } else {
            this.merchantIssuedRefund = in.readBoolean();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payoutRefund = null;
          } else {
            this.payoutRefund = in.readBoolean();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.goodwillCredit = null;
          } else {
            this.goodwillCredit = in.readBoolean();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.chargeRefund = null;
          } else {
            this.chargeRefund = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.contra = null;
          } else {
            this.contra = in.readBoolean();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.waiveInterest = null;
          } else {
            this.waiveInterest = in.readBoolean();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.waiveCharges = null;
          } else {
            this.waiveCharges = in.readBoolean();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accrual = null;
          } else {
            this.accrual = in.readBoolean();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.writeOff = null;
          } else {
            this.writeOff = in.readBoolean();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.recoveryRepayment = null;
          } else {
            this.recoveryRepayment = in.readBoolean();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.initiateTransfer = null;
          } else {
            this.initiateTransfer = in.readBoolean();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.approveTransfer = null;
          } else {
            this.approveTransfer = in.readBoolean();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.withdrawTransfer = null;
          } else {
            this.withdrawTransfer = in.readBoolean();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rejectTransfer = null;
          } else {
            this.rejectTransfer = in.readBoolean();
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.chargePayment = null;
          } else {
            this.chargePayment = in.readBoolean();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.refund = null;
          } else {
            this.refund = in.readBoolean();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.refundForActiveLoans = null;
          } else {
            this.refundForActiveLoans = in.readBoolean();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.creditBalanceRefund = null;
          } else {
            this.creditBalanceRefund = in.readBoolean();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.chargeback = null;
          } else {
            this.chargeback = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










