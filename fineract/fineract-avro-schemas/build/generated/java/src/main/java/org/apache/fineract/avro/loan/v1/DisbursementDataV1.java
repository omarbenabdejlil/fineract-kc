/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DisbursementDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 2495415618181779157L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DisbursementDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"expectedDisbursementDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"actualDisbursementDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"principal\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"netDisbursalAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"loanChargeId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"chargeAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"waivedChargeAmount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<DisbursementDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DisbursementDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DisbursementDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DisbursementDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DisbursementDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DisbursementDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DisbursementDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DisbursementDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DisbursementDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer id;
  private java.lang.String expectedDisbursementDate;
  private java.lang.String actualDisbursementDate;
  private java.math.BigDecimal principal;
  private java.math.BigDecimal netDisbursalAmount;
  private java.lang.String loanChargeId;
  private java.math.BigDecimal chargeAmount;
  private java.math.BigDecimal waivedChargeAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DisbursementDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param expectedDisbursementDate The new value for expectedDisbursementDate
   * @param actualDisbursementDate The new value for actualDisbursementDate
   * @param principal The new value for principal
   * @param netDisbursalAmount The new value for netDisbursalAmount
   * @param loanChargeId The new value for loanChargeId
   * @param chargeAmount The new value for chargeAmount
   * @param waivedChargeAmount The new value for waivedChargeAmount
   */
  public DisbursementDataV1(java.lang.Integer id, java.lang.String expectedDisbursementDate, java.lang.String actualDisbursementDate, java.math.BigDecimal principal, java.math.BigDecimal netDisbursalAmount, java.lang.String loanChargeId, java.math.BigDecimal chargeAmount, java.math.BigDecimal waivedChargeAmount) {
    this.id = id;
    this.expectedDisbursementDate = expectedDisbursementDate;
    this.actualDisbursementDate = actualDisbursementDate;
    this.principal = principal;
    this.netDisbursalAmount = netDisbursalAmount;
    this.loanChargeId = loanChargeId;
    this.chargeAmount = chargeAmount;
    this.waivedChargeAmount = waivedChargeAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return expectedDisbursementDate;
    case 2: return actualDisbursementDate;
    case 3: return principal;
    case 4: return netDisbursalAmount;
    case 5: return loanChargeId;
    case 6: return chargeAmount;
    case 7: return waivedChargeAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: expectedDisbursementDate = value$ != null ? value$.toString() : null; break;
    case 2: actualDisbursementDate = value$ != null ? value$.toString() : null; break;
    case 3: principal = (java.math.BigDecimal)value$; break;
    case 4: netDisbursalAmount = (java.math.BigDecimal)value$; break;
    case 5: loanChargeId = value$ != null ? value$.toString() : null; break;
    case 6: chargeAmount = (java.math.BigDecimal)value$; break;
    case 7: waivedChargeAmount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'expectedDisbursementDate' field.
   * @return The value of the 'expectedDisbursementDate' field.
   */
  public java.lang.String getExpectedDisbursementDate() {
    return expectedDisbursementDate;
  }


  /**
   * Sets the value of the 'expectedDisbursementDate' field.
   * @param value the value to set.
   */
  public void setExpectedDisbursementDate(java.lang.String value) {
    this.expectedDisbursementDate = value;
  }

  /**
   * Gets the value of the 'actualDisbursementDate' field.
   * @return The value of the 'actualDisbursementDate' field.
   */
  public java.lang.String getActualDisbursementDate() {
    return actualDisbursementDate;
  }


  /**
   * Sets the value of the 'actualDisbursementDate' field.
   * @param value the value to set.
   */
  public void setActualDisbursementDate(java.lang.String value) {
    this.actualDisbursementDate = value;
  }

  /**
   * Gets the value of the 'principal' field.
   * @return The value of the 'principal' field.
   */
  public java.math.BigDecimal getPrincipal() {
    return principal;
  }


  /**
   * Sets the value of the 'principal' field.
   * @param value the value to set.
   */
  public void setPrincipal(java.math.BigDecimal value) {
    this.principal = value;
  }

  /**
   * Gets the value of the 'netDisbursalAmount' field.
   * @return The value of the 'netDisbursalAmount' field.
   */
  public java.math.BigDecimal getNetDisbursalAmount() {
    return netDisbursalAmount;
  }


  /**
   * Sets the value of the 'netDisbursalAmount' field.
   * @param value the value to set.
   */
  public void setNetDisbursalAmount(java.math.BigDecimal value) {
    this.netDisbursalAmount = value;
  }

  /**
   * Gets the value of the 'loanChargeId' field.
   * @return The value of the 'loanChargeId' field.
   */
  public java.lang.String getLoanChargeId() {
    return loanChargeId;
  }


  /**
   * Sets the value of the 'loanChargeId' field.
   * @param value the value to set.
   */
  public void setLoanChargeId(java.lang.String value) {
    this.loanChargeId = value;
  }

  /**
   * Gets the value of the 'chargeAmount' field.
   * @return The value of the 'chargeAmount' field.
   */
  public java.math.BigDecimal getChargeAmount() {
    return chargeAmount;
  }


  /**
   * Sets the value of the 'chargeAmount' field.
   * @param value the value to set.
   */
  public void setChargeAmount(java.math.BigDecimal value) {
    this.chargeAmount = value;
  }

  /**
   * Gets the value of the 'waivedChargeAmount' field.
   * @return The value of the 'waivedChargeAmount' field.
   */
  public java.math.BigDecimal getWaivedChargeAmount() {
    return waivedChargeAmount;
  }


  /**
   * Sets the value of the 'waivedChargeAmount' field.
   * @param value the value to set.
   */
  public void setWaivedChargeAmount(java.math.BigDecimal value) {
    this.waivedChargeAmount = value;
  }

  /**
   * Creates a new DisbursementDataV1 RecordBuilder.
   * @return A new DisbursementDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder();
  }

  /**
   * Creates a new DisbursementDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DisbursementDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder(other);
    }
  }

  /**
   * Creates a new DisbursementDataV1 RecordBuilder by copying an existing DisbursementDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new DisbursementDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.DisbursementDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for DisbursementDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DisbursementDataV1>
    implements org.apache.avro.data.RecordBuilder<DisbursementDataV1> {

    private java.lang.Integer id;
    private java.lang.String expectedDisbursementDate;
    private java.lang.String actualDisbursementDate;
    private java.math.BigDecimal principal;
    private java.math.BigDecimal netDisbursalAmount;
    private java.lang.String loanChargeId;
    private java.math.BigDecimal chargeAmount;
    private java.math.BigDecimal waivedChargeAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.expectedDisbursementDate)) {
        this.expectedDisbursementDate = data().deepCopy(fields()[1].schema(), other.expectedDisbursementDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.actualDisbursementDate)) {
        this.actualDisbursementDate = data().deepCopy(fields()[2].schema(), other.actualDisbursementDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.principal)) {
        this.principal = data().deepCopy(fields()[3].schema(), other.principal);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.netDisbursalAmount)) {
        this.netDisbursalAmount = data().deepCopy(fields()[4].schema(), other.netDisbursalAmount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.loanChargeId)) {
        this.loanChargeId = data().deepCopy(fields()[5].schema(), other.loanChargeId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.chargeAmount)) {
        this.chargeAmount = data().deepCopy(fields()[6].schema(), other.chargeAmount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.waivedChargeAmount)) {
        this.waivedChargeAmount = data().deepCopy(fields()[7].schema(), other.waivedChargeAmount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing DisbursementDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.DisbursementDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expectedDisbursementDate)) {
        this.expectedDisbursementDate = data().deepCopy(fields()[1].schema(), other.expectedDisbursementDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.actualDisbursementDate)) {
        this.actualDisbursementDate = data().deepCopy(fields()[2].schema(), other.actualDisbursementDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.principal)) {
        this.principal = data().deepCopy(fields()[3].schema(), other.principal);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.netDisbursalAmount)) {
        this.netDisbursalAmount = data().deepCopy(fields()[4].schema(), other.netDisbursalAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.loanChargeId)) {
        this.loanChargeId = data().deepCopy(fields()[5].schema(), other.loanChargeId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.chargeAmount)) {
        this.chargeAmount = data().deepCopy(fields()[6].schema(), other.chargeAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.waivedChargeAmount)) {
        this.waivedChargeAmount = data().deepCopy(fields()[7].schema(), other.waivedChargeAmount);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'expectedDisbursementDate' field.
      * @return The value.
      */
    public java.lang.String getExpectedDisbursementDate() {
      return expectedDisbursementDate;
    }


    /**
      * Sets the value of the 'expectedDisbursementDate' field.
      * @param value The value of 'expectedDisbursementDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setExpectedDisbursementDate(java.lang.String value) {
      validate(fields()[1], value);
      this.expectedDisbursementDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'expectedDisbursementDate' field has been set.
      * @return True if the 'expectedDisbursementDate' field has been set, false otherwise.
      */
    public boolean hasExpectedDisbursementDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'expectedDisbursementDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearExpectedDisbursementDate() {
      expectedDisbursementDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualDisbursementDate' field.
      * @return The value.
      */
    public java.lang.String getActualDisbursementDate() {
      return actualDisbursementDate;
    }


    /**
      * Sets the value of the 'actualDisbursementDate' field.
      * @param value The value of 'actualDisbursementDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setActualDisbursementDate(java.lang.String value) {
      validate(fields()[2], value);
      this.actualDisbursementDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'actualDisbursementDate' field has been set.
      * @return True if the 'actualDisbursementDate' field has been set, false otherwise.
      */
    public boolean hasActualDisbursementDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'actualDisbursementDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearActualDisbursementDate() {
      actualDisbursementDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'principal' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipal() {
      return principal;
    }


    /**
      * Sets the value of the 'principal' field.
      * @param value The value of 'principal'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setPrincipal(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.principal = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'principal' field has been set.
      * @return True if the 'principal' field has been set, false otherwise.
      */
    public boolean hasPrincipal() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'principal' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearPrincipal() {
      principal = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'netDisbursalAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getNetDisbursalAmount() {
      return netDisbursalAmount;
    }


    /**
      * Sets the value of the 'netDisbursalAmount' field.
      * @param value The value of 'netDisbursalAmount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setNetDisbursalAmount(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.netDisbursalAmount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'netDisbursalAmount' field has been set.
      * @return True if the 'netDisbursalAmount' field has been set, false otherwise.
      */
    public boolean hasNetDisbursalAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'netDisbursalAmount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearNetDisbursalAmount() {
      netDisbursalAmount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'loanChargeId' field.
      * @return The value.
      */
    public java.lang.String getLoanChargeId() {
      return loanChargeId;
    }


    /**
      * Sets the value of the 'loanChargeId' field.
      * @param value The value of 'loanChargeId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setLoanChargeId(java.lang.String value) {
      validate(fields()[5], value);
      this.loanChargeId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'loanChargeId' field has been set.
      * @return True if the 'loanChargeId' field has been set, false otherwise.
      */
    public boolean hasLoanChargeId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'loanChargeId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearLoanChargeId() {
      loanChargeId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getChargeAmount() {
      return chargeAmount;
    }


    /**
      * Sets the value of the 'chargeAmount' field.
      * @param value The value of 'chargeAmount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setChargeAmount(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.chargeAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeAmount' field has been set.
      * @return True if the 'chargeAmount' field has been set, false otherwise.
      */
    public boolean hasChargeAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'chargeAmount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearChargeAmount() {
      chargeAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'waivedChargeAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getWaivedChargeAmount() {
      return waivedChargeAmount;
    }


    /**
      * Sets the value of the 'waivedChargeAmount' field.
      * @param value The value of 'waivedChargeAmount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder setWaivedChargeAmount(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.waivedChargeAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'waivedChargeAmount' field has been set.
      * @return True if the 'waivedChargeAmount' field has been set, false otherwise.
      */
    public boolean hasWaivedChargeAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'waivedChargeAmount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.DisbursementDataV1.Builder clearWaivedChargeAmount() {
      waivedChargeAmount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DisbursementDataV1 build() {
      try {
        DisbursementDataV1 record = new DisbursementDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.expectedDisbursementDate = fieldSetFlags()[1] ? this.expectedDisbursementDate : (java.lang.String) defaultValue(fields()[1]);
        record.actualDisbursementDate = fieldSetFlags()[2] ? this.actualDisbursementDate : (java.lang.String) defaultValue(fields()[2]);
        record.principal = fieldSetFlags()[3] ? this.principal : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.netDisbursalAmount = fieldSetFlags()[4] ? this.netDisbursalAmount : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.loanChargeId = fieldSetFlags()[5] ? this.loanChargeId : (java.lang.String) defaultValue(fields()[5]);
        record.chargeAmount = fieldSetFlags()[6] ? this.chargeAmount : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.waivedChargeAmount = fieldSetFlags()[7] ? this.waivedChargeAmount : (java.math.BigDecimal) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DisbursementDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<DisbursementDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DisbursementDataV1>
    READER$ = (org.apache.avro.io.DatumReader<DisbursementDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










