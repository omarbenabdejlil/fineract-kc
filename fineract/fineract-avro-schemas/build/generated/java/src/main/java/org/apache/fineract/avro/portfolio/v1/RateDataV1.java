/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.portfolio.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RateDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -3549571386069507432L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RateDataV1\",\"namespace\":\"org.apache.fineract.avro.portfolio.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"percentage\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"productApply\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EnumOptionDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"active\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<RateDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RateDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RateDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RateDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RateDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RateDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RateDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RateDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RateDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private java.lang.String name;
  private java.math.BigDecimal percentage;
  private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 productApply;
  private java.lang.Boolean active;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RateDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param percentage The new value for percentage
   * @param productApply The new value for productApply
   * @param active The new value for active
   */
  public RateDataV1(java.lang.Long id, java.lang.String name, java.math.BigDecimal percentage, org.apache.fineract.avro.generic.v1.EnumOptionDataV1 productApply, java.lang.Boolean active) {
    this.id = id;
    this.name = name;
    this.percentage = percentage;
    this.productApply = productApply;
    this.active = active;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return percentage;
    case 3: return productApply;
    case 4: return active;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: percentage = (java.math.BigDecimal)value$; break;
    case 3: productApply = (org.apache.fineract.avro.generic.v1.EnumOptionDataV1)value$; break;
    case 4: active = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'percentage' field.
   * @return The value of the 'percentage' field.
   */
  public java.math.BigDecimal getPercentage() {
    return percentage;
  }


  /**
   * Sets the value of the 'percentage' field.
   * @param value the value to set.
   */
  public void setPercentage(java.math.BigDecimal value) {
    this.percentage = value;
  }

  /**
   * Gets the value of the 'productApply' field.
   * @return The value of the 'productApply' field.
   */
  public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getProductApply() {
    return productApply;
  }


  /**
   * Sets the value of the 'productApply' field.
   * @param value the value to set.
   */
  public void setProductApply(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
    this.productApply = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public java.lang.Boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Creates a new RateDataV1 RecordBuilder.
   * @return A new RateDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder();
  }

  /**
   * Creates a new RateDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RateDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder newBuilder(org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder(other);
    }
  }

  /**
   * Creates a new RateDataV1 RecordBuilder by copying an existing RateDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new RateDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder newBuilder(org.apache.fineract.avro.portfolio.v1.RateDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for RateDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RateDataV1>
    implements org.apache.avro.data.RecordBuilder<RateDataV1> {

    private java.lang.Long id;
    private java.lang.String name;
    private java.math.BigDecimal percentage;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 productApply;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder productApplyBuilder;
    private java.lang.Boolean active;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.percentage)) {
        this.percentage = data().deepCopy(fields()[2].schema(), other.percentage);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.productApply)) {
        this.productApply = data().deepCopy(fields()[3].schema(), other.productApply);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasProductApplyBuilder()) {
        this.productApplyBuilder = org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(other.getProductApplyBuilder());
      }
      if (isValidValue(fields()[4], other.active)) {
        this.active = data().deepCopy(fields()[4].schema(), other.active);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing RateDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.portfolio.v1.RateDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.percentage)) {
        this.percentage = data().deepCopy(fields()[2].schema(), other.percentage);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productApply)) {
        this.productApply = data().deepCopy(fields()[3].schema(), other.productApply);
        fieldSetFlags()[3] = true;
      }
      this.productApplyBuilder = null;
      if (isValidValue(fields()[4], other.active)) {
        this.active = data().deepCopy(fields()[4].schema(), other.active);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'percentage' field.
      * @return The value.
      */
    public java.math.BigDecimal getPercentage() {
      return percentage;
    }


    /**
      * Sets the value of the 'percentage' field.
      * @param value The value of 'percentage'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setPercentage(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.percentage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'percentage' field has been set.
      * @return True if the 'percentage' field has been set, false otherwise.
      */
    public boolean hasPercentage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'percentage' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder clearPercentage() {
      percentage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productApply' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getProductApply() {
      return productApply;
    }


    /**
      * Sets the value of the 'productApply' field.
      * @param value The value of 'productApply'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setProductApply(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
      validate(fields()[3], value);
      this.productApplyBuilder = null;
      this.productApply = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productApply' field has been set.
      * @return True if the 'productApply' field has been set, false otherwise.
      */
    public boolean hasProductApply() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'productApply' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder getProductApplyBuilder() {
      if (productApplyBuilder == null) {
        if (hasProductApply()) {
          setProductApplyBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(productApply));
        } else {
          setProductApplyBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder());
        }
      }
      return productApplyBuilder;
    }

    /**
     * Sets the Builder instance for the 'productApply' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setProductApplyBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder value) {
      clearProductApply();
      productApplyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'productApply' field has an active Builder instance
     * @return True if the 'productApply' field has an active Builder instance
     */
    public boolean hasProductApplyBuilder() {
      return productApplyBuilder != null;
    }

    /**
      * Clears the value of the 'productApply' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder clearProductApply() {
      productApply = null;
      productApplyBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder setActive(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.active = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.RateDataV1.Builder clearActive() {
      active = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RateDataV1 build() {
      try {
        RateDataV1 record = new RateDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.percentage = fieldSetFlags()[2] ? this.percentage : (java.math.BigDecimal) defaultValue(fields()[2]);
        if (productApplyBuilder != null) {
          try {
            record.productApply = this.productApplyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("productApply"));
            throw e;
          }
        } else {
          record.productApply = fieldSetFlags()[3] ? this.productApply : (org.apache.fineract.avro.generic.v1.EnumOptionDataV1) defaultValue(fields()[3]);
        }
        record.active = fieldSetFlags()[4] ? this.active : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RateDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<RateDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RateDataV1>
    READER$ = (org.apache.avro.io.DatumReader<RateDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










