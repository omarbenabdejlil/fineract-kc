/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.savings.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SavingsAccountTransactionEnumDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 2443813983630119790L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SavingsAccountTransactionEnumDataV1\",\"namespace\":\"org.apache.fineract.avro.savings.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deposit\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"dividendPayout\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"withdrawal\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"interestPosting\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"feeDeduction\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"initiateTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"approveTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"withdrawTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"rejectTransfer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"overdraftInterest\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"writtenoff\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"overdraftFee\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"withholdTax\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"escheat\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"amountHold\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"amountRelease\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SavingsAccountTransactionEnumDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SavingsAccountTransactionEnumDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SavingsAccountTransactionEnumDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SavingsAccountTransactionEnumDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SavingsAccountTransactionEnumDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SavingsAccountTransactionEnumDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SavingsAccountTransactionEnumDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SavingsAccountTransactionEnumDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SavingsAccountTransactionEnumDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private java.lang.String code;
  private java.lang.String value;
  private java.lang.Boolean deposit;
  private java.lang.Boolean dividendPayout;
  private java.lang.Boolean withdrawal;
  private java.lang.Boolean interestPosting;
  private java.lang.Boolean feeDeduction;
  private java.lang.Boolean initiateTransfer;
  private java.lang.Boolean approveTransfer;
  private java.lang.Boolean withdrawTransfer;
  private java.lang.Boolean rejectTransfer;
  private java.lang.Boolean overdraftInterest;
  private java.lang.Boolean writtenoff;
  private java.lang.Boolean overdraftFee;
  private java.lang.Boolean withholdTax;
  private java.lang.Boolean escheat;
  private java.lang.Boolean amountHold;
  private java.lang.Boolean amountRelease;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SavingsAccountTransactionEnumDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param code The new value for code
   * @param value The new value for value
   * @param deposit The new value for deposit
   * @param dividendPayout The new value for dividendPayout
   * @param withdrawal The new value for withdrawal
   * @param interestPosting The new value for interestPosting
   * @param feeDeduction The new value for feeDeduction
   * @param initiateTransfer The new value for initiateTransfer
   * @param approveTransfer The new value for approveTransfer
   * @param withdrawTransfer The new value for withdrawTransfer
   * @param rejectTransfer The new value for rejectTransfer
   * @param overdraftInterest The new value for overdraftInterest
   * @param writtenoff The new value for writtenoff
   * @param overdraftFee The new value for overdraftFee
   * @param withholdTax The new value for withholdTax
   * @param escheat The new value for escheat
   * @param amountHold The new value for amountHold
   * @param amountRelease The new value for amountRelease
   */
  public SavingsAccountTransactionEnumDataV1(java.lang.Long id, java.lang.String code, java.lang.String value, java.lang.Boolean deposit, java.lang.Boolean dividendPayout, java.lang.Boolean withdrawal, java.lang.Boolean interestPosting, java.lang.Boolean feeDeduction, java.lang.Boolean initiateTransfer, java.lang.Boolean approveTransfer, java.lang.Boolean withdrawTransfer, java.lang.Boolean rejectTransfer, java.lang.Boolean overdraftInterest, java.lang.Boolean writtenoff, java.lang.Boolean overdraftFee, java.lang.Boolean withholdTax, java.lang.Boolean escheat, java.lang.Boolean amountHold, java.lang.Boolean amountRelease) {
    this.id = id;
    this.code = code;
    this.value = value;
    this.deposit = deposit;
    this.dividendPayout = dividendPayout;
    this.withdrawal = withdrawal;
    this.interestPosting = interestPosting;
    this.feeDeduction = feeDeduction;
    this.initiateTransfer = initiateTransfer;
    this.approveTransfer = approveTransfer;
    this.withdrawTransfer = withdrawTransfer;
    this.rejectTransfer = rejectTransfer;
    this.overdraftInterest = overdraftInterest;
    this.writtenoff = writtenoff;
    this.overdraftFee = overdraftFee;
    this.withholdTax = withholdTax;
    this.escheat = escheat;
    this.amountHold = amountHold;
    this.amountRelease = amountRelease;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return code;
    case 2: return value;
    case 3: return deposit;
    case 4: return dividendPayout;
    case 5: return withdrawal;
    case 6: return interestPosting;
    case 7: return feeDeduction;
    case 8: return initiateTransfer;
    case 9: return approveTransfer;
    case 10: return withdrawTransfer;
    case 11: return rejectTransfer;
    case 12: return overdraftInterest;
    case 13: return writtenoff;
    case 14: return overdraftFee;
    case 15: return withholdTax;
    case 16: return escheat;
    case 17: return amountHold;
    case 18: return amountRelease;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: code = value$ != null ? value$.toString() : null; break;
    case 2: value = value$ != null ? value$.toString() : null; break;
    case 3: deposit = (java.lang.Boolean)value$; break;
    case 4: dividendPayout = (java.lang.Boolean)value$; break;
    case 5: withdrawal = (java.lang.Boolean)value$; break;
    case 6: interestPosting = (java.lang.Boolean)value$; break;
    case 7: feeDeduction = (java.lang.Boolean)value$; break;
    case 8: initiateTransfer = (java.lang.Boolean)value$; break;
    case 9: approveTransfer = (java.lang.Boolean)value$; break;
    case 10: withdrawTransfer = (java.lang.Boolean)value$; break;
    case 11: rejectTransfer = (java.lang.Boolean)value$; break;
    case 12: overdraftInterest = (java.lang.Boolean)value$; break;
    case 13: writtenoff = (java.lang.Boolean)value$; break;
    case 14: overdraftFee = (java.lang.Boolean)value$; break;
    case 15: withholdTax = (java.lang.Boolean)value$; break;
    case 16: escheat = (java.lang.Boolean)value$; break;
    case 17: amountHold = (java.lang.Boolean)value$; break;
    case 18: amountRelease = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'deposit' field.
   * @return The value of the 'deposit' field.
   */
  public java.lang.Boolean getDeposit() {
    return deposit;
  }


  /**
   * Sets the value of the 'deposit' field.
   * @param value the value to set.
   */
  public void setDeposit(java.lang.Boolean value) {
    this.deposit = value;
  }

  /**
   * Gets the value of the 'dividendPayout' field.
   * @return The value of the 'dividendPayout' field.
   */
  public java.lang.Boolean getDividendPayout() {
    return dividendPayout;
  }


  /**
   * Sets the value of the 'dividendPayout' field.
   * @param value the value to set.
   */
  public void setDividendPayout(java.lang.Boolean value) {
    this.dividendPayout = value;
  }

  /**
   * Gets the value of the 'withdrawal' field.
   * @return The value of the 'withdrawal' field.
   */
  public java.lang.Boolean getWithdrawal() {
    return withdrawal;
  }


  /**
   * Sets the value of the 'withdrawal' field.
   * @param value the value to set.
   */
  public void setWithdrawal(java.lang.Boolean value) {
    this.withdrawal = value;
  }

  /**
   * Gets the value of the 'interestPosting' field.
   * @return The value of the 'interestPosting' field.
   */
  public java.lang.Boolean getInterestPosting() {
    return interestPosting;
  }


  /**
   * Sets the value of the 'interestPosting' field.
   * @param value the value to set.
   */
  public void setInterestPosting(java.lang.Boolean value) {
    this.interestPosting = value;
  }

  /**
   * Gets the value of the 'feeDeduction' field.
   * @return The value of the 'feeDeduction' field.
   */
  public java.lang.Boolean getFeeDeduction() {
    return feeDeduction;
  }


  /**
   * Sets the value of the 'feeDeduction' field.
   * @param value the value to set.
   */
  public void setFeeDeduction(java.lang.Boolean value) {
    this.feeDeduction = value;
  }

  /**
   * Gets the value of the 'initiateTransfer' field.
   * @return The value of the 'initiateTransfer' field.
   */
  public java.lang.Boolean getInitiateTransfer() {
    return initiateTransfer;
  }


  /**
   * Sets the value of the 'initiateTransfer' field.
   * @param value the value to set.
   */
  public void setInitiateTransfer(java.lang.Boolean value) {
    this.initiateTransfer = value;
  }

  /**
   * Gets the value of the 'approveTransfer' field.
   * @return The value of the 'approveTransfer' field.
   */
  public java.lang.Boolean getApproveTransfer() {
    return approveTransfer;
  }


  /**
   * Sets the value of the 'approveTransfer' field.
   * @param value the value to set.
   */
  public void setApproveTransfer(java.lang.Boolean value) {
    this.approveTransfer = value;
  }

  /**
   * Gets the value of the 'withdrawTransfer' field.
   * @return The value of the 'withdrawTransfer' field.
   */
  public java.lang.Boolean getWithdrawTransfer() {
    return withdrawTransfer;
  }


  /**
   * Sets the value of the 'withdrawTransfer' field.
   * @param value the value to set.
   */
  public void setWithdrawTransfer(java.lang.Boolean value) {
    this.withdrawTransfer = value;
  }

  /**
   * Gets the value of the 'rejectTransfer' field.
   * @return The value of the 'rejectTransfer' field.
   */
  public java.lang.Boolean getRejectTransfer() {
    return rejectTransfer;
  }


  /**
   * Sets the value of the 'rejectTransfer' field.
   * @param value the value to set.
   */
  public void setRejectTransfer(java.lang.Boolean value) {
    this.rejectTransfer = value;
  }

  /**
   * Gets the value of the 'overdraftInterest' field.
   * @return The value of the 'overdraftInterest' field.
   */
  public java.lang.Boolean getOverdraftInterest() {
    return overdraftInterest;
  }


  /**
   * Sets the value of the 'overdraftInterest' field.
   * @param value the value to set.
   */
  public void setOverdraftInterest(java.lang.Boolean value) {
    this.overdraftInterest = value;
  }

  /**
   * Gets the value of the 'writtenoff' field.
   * @return The value of the 'writtenoff' field.
   */
  public java.lang.Boolean getWrittenoff() {
    return writtenoff;
  }


  /**
   * Sets the value of the 'writtenoff' field.
   * @param value the value to set.
   */
  public void setWrittenoff(java.lang.Boolean value) {
    this.writtenoff = value;
  }

  /**
   * Gets the value of the 'overdraftFee' field.
   * @return The value of the 'overdraftFee' field.
   */
  public java.lang.Boolean getOverdraftFee() {
    return overdraftFee;
  }


  /**
   * Sets the value of the 'overdraftFee' field.
   * @param value the value to set.
   */
  public void setOverdraftFee(java.lang.Boolean value) {
    this.overdraftFee = value;
  }

  /**
   * Gets the value of the 'withholdTax' field.
   * @return The value of the 'withholdTax' field.
   */
  public java.lang.Boolean getWithholdTax() {
    return withholdTax;
  }


  /**
   * Sets the value of the 'withholdTax' field.
   * @param value the value to set.
   */
  public void setWithholdTax(java.lang.Boolean value) {
    this.withholdTax = value;
  }

  /**
   * Gets the value of the 'escheat' field.
   * @return The value of the 'escheat' field.
   */
  public java.lang.Boolean getEscheat() {
    return escheat;
  }


  /**
   * Sets the value of the 'escheat' field.
   * @param value the value to set.
   */
  public void setEscheat(java.lang.Boolean value) {
    this.escheat = value;
  }

  /**
   * Gets the value of the 'amountHold' field.
   * @return The value of the 'amountHold' field.
   */
  public java.lang.Boolean getAmountHold() {
    return amountHold;
  }


  /**
   * Sets the value of the 'amountHold' field.
   * @param value the value to set.
   */
  public void setAmountHold(java.lang.Boolean value) {
    this.amountHold = value;
  }

  /**
   * Gets the value of the 'amountRelease' field.
   * @return The value of the 'amountRelease' field.
   */
  public java.lang.Boolean getAmountRelease() {
    return amountRelease;
  }


  /**
   * Sets the value of the 'amountRelease' field.
   * @param value the value to set.
   */
  public void setAmountRelease(java.lang.Boolean value) {
    this.amountRelease = value;
  }

  /**
   * Creates a new SavingsAccountTransactionEnumDataV1 RecordBuilder.
   * @return A new SavingsAccountTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder();
  }

  /**
   * Creates a new SavingsAccountTransactionEnumDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SavingsAccountTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder newBuilder(org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder(other);
    }
  }

  /**
   * Creates a new SavingsAccountTransactionEnumDataV1 RecordBuilder by copying an existing SavingsAccountTransactionEnumDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new SavingsAccountTransactionEnumDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder newBuilder(org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for SavingsAccountTransactionEnumDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SavingsAccountTransactionEnumDataV1>
    implements org.apache.avro.data.RecordBuilder<SavingsAccountTransactionEnumDataV1> {

    private java.lang.Long id;
    private java.lang.String code;
    private java.lang.String value;
    private java.lang.Boolean deposit;
    private java.lang.Boolean dividendPayout;
    private java.lang.Boolean withdrawal;
    private java.lang.Boolean interestPosting;
    private java.lang.Boolean feeDeduction;
    private java.lang.Boolean initiateTransfer;
    private java.lang.Boolean approveTransfer;
    private java.lang.Boolean withdrawTransfer;
    private java.lang.Boolean rejectTransfer;
    private java.lang.Boolean overdraftInterest;
    private java.lang.Boolean writtenoff;
    private java.lang.Boolean overdraftFee;
    private java.lang.Boolean withholdTax;
    private java.lang.Boolean escheat;
    private java.lang.Boolean amountHold;
    private java.lang.Boolean amountRelease;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.deposit)) {
        this.deposit = data().deepCopy(fields()[3].schema(), other.deposit);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dividendPayout)) {
        this.dividendPayout = data().deepCopy(fields()[4].schema(), other.dividendPayout);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.withdrawal)) {
        this.withdrawal = data().deepCopy(fields()[5].schema(), other.withdrawal);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.interestPosting)) {
        this.interestPosting = data().deepCopy(fields()[6].schema(), other.interestPosting);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.feeDeduction)) {
        this.feeDeduction = data().deepCopy(fields()[7].schema(), other.feeDeduction);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.initiateTransfer)) {
        this.initiateTransfer = data().deepCopy(fields()[8].schema(), other.initiateTransfer);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.approveTransfer)) {
        this.approveTransfer = data().deepCopy(fields()[9].schema(), other.approveTransfer);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.withdrawTransfer)) {
        this.withdrawTransfer = data().deepCopy(fields()[10].schema(), other.withdrawTransfer);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.rejectTransfer)) {
        this.rejectTransfer = data().deepCopy(fields()[11].schema(), other.rejectTransfer);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.overdraftInterest)) {
        this.overdraftInterest = data().deepCopy(fields()[12].schema(), other.overdraftInterest);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.writtenoff)) {
        this.writtenoff = data().deepCopy(fields()[13].schema(), other.writtenoff);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.overdraftFee)) {
        this.overdraftFee = data().deepCopy(fields()[14].schema(), other.overdraftFee);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.withholdTax)) {
        this.withholdTax = data().deepCopy(fields()[15].schema(), other.withholdTax);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.escheat)) {
        this.escheat = data().deepCopy(fields()[16].schema(), other.escheat);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.amountHold)) {
        this.amountHold = data().deepCopy(fields()[17].schema(), other.amountHold);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.amountRelease)) {
        this.amountRelease = data().deepCopy(fields()[18].schema(), other.amountRelease);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing SavingsAccountTransactionEnumDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deposit)) {
        this.deposit = data().deepCopy(fields()[3].schema(), other.deposit);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dividendPayout)) {
        this.dividendPayout = data().deepCopy(fields()[4].schema(), other.dividendPayout);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.withdrawal)) {
        this.withdrawal = data().deepCopy(fields()[5].schema(), other.withdrawal);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.interestPosting)) {
        this.interestPosting = data().deepCopy(fields()[6].schema(), other.interestPosting);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.feeDeduction)) {
        this.feeDeduction = data().deepCopy(fields()[7].schema(), other.feeDeduction);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.initiateTransfer)) {
        this.initiateTransfer = data().deepCopy(fields()[8].schema(), other.initiateTransfer);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.approveTransfer)) {
        this.approveTransfer = data().deepCopy(fields()[9].schema(), other.approveTransfer);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.withdrawTransfer)) {
        this.withdrawTransfer = data().deepCopy(fields()[10].schema(), other.withdrawTransfer);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rejectTransfer)) {
        this.rejectTransfer = data().deepCopy(fields()[11].schema(), other.rejectTransfer);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.overdraftInterest)) {
        this.overdraftInterest = data().deepCopy(fields()[12].schema(), other.overdraftInterest);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.writtenoff)) {
        this.writtenoff = data().deepCopy(fields()[13].schema(), other.writtenoff);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.overdraftFee)) {
        this.overdraftFee = data().deepCopy(fields()[14].schema(), other.overdraftFee);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.withholdTax)) {
        this.withholdTax = data().deepCopy(fields()[15].schema(), other.withholdTax);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.escheat)) {
        this.escheat = data().deepCopy(fields()[16].schema(), other.escheat);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.amountHold)) {
        this.amountHold = data().deepCopy(fields()[17].schema(), other.amountHold);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.amountRelease)) {
        this.amountRelease = data().deepCopy(fields()[18].schema(), other.amountRelease);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setCode(java.lang.String value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setValue(java.lang.String value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearValue() {
      value = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'deposit' field.
      * @return The value.
      */
    public java.lang.Boolean getDeposit() {
      return deposit;
    }


    /**
      * Sets the value of the 'deposit' field.
      * @param value The value of 'deposit'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setDeposit(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.deposit = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'deposit' field has been set.
      * @return True if the 'deposit' field has been set, false otherwise.
      */
    public boolean hasDeposit() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'deposit' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearDeposit() {
      deposit = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dividendPayout' field.
      * @return The value.
      */
    public java.lang.Boolean getDividendPayout() {
      return dividendPayout;
    }


    /**
      * Sets the value of the 'dividendPayout' field.
      * @param value The value of 'dividendPayout'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setDividendPayout(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.dividendPayout = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dividendPayout' field has been set.
      * @return True if the 'dividendPayout' field has been set, false otherwise.
      */
    public boolean hasDividendPayout() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dividendPayout' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearDividendPayout() {
      dividendPayout = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'withdrawal' field.
      * @return The value.
      */
    public java.lang.Boolean getWithdrawal() {
      return withdrawal;
    }


    /**
      * Sets the value of the 'withdrawal' field.
      * @param value The value of 'withdrawal'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setWithdrawal(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.withdrawal = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'withdrawal' field has been set.
      * @return True if the 'withdrawal' field has been set, false otherwise.
      */
    public boolean hasWithdrawal() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'withdrawal' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearWithdrawal() {
      withdrawal = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestPosting' field.
      * @return The value.
      */
    public java.lang.Boolean getInterestPosting() {
      return interestPosting;
    }


    /**
      * Sets the value of the 'interestPosting' field.
      * @param value The value of 'interestPosting'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setInterestPosting(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.interestPosting = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'interestPosting' field has been set.
      * @return True if the 'interestPosting' field has been set, false otherwise.
      */
    public boolean hasInterestPosting() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'interestPosting' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearInterestPosting() {
      interestPosting = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeDeduction' field.
      * @return The value.
      */
    public java.lang.Boolean getFeeDeduction() {
      return feeDeduction;
    }


    /**
      * Sets the value of the 'feeDeduction' field.
      * @param value The value of 'feeDeduction'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setFeeDeduction(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.feeDeduction = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'feeDeduction' field has been set.
      * @return True if the 'feeDeduction' field has been set, false otherwise.
      */
    public boolean hasFeeDeduction() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'feeDeduction' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearFeeDeduction() {
      feeDeduction = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'initiateTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getInitiateTransfer() {
      return initiateTransfer;
    }


    /**
      * Sets the value of the 'initiateTransfer' field.
      * @param value The value of 'initiateTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setInitiateTransfer(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.initiateTransfer = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'initiateTransfer' field has been set.
      * @return True if the 'initiateTransfer' field has been set, false otherwise.
      */
    public boolean hasInitiateTransfer() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'initiateTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearInitiateTransfer() {
      initiateTransfer = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'approveTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getApproveTransfer() {
      return approveTransfer;
    }


    /**
      * Sets the value of the 'approveTransfer' field.
      * @param value The value of 'approveTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setApproveTransfer(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.approveTransfer = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'approveTransfer' field has been set.
      * @return True if the 'approveTransfer' field has been set, false otherwise.
      */
    public boolean hasApproveTransfer() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'approveTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearApproveTransfer() {
      approveTransfer = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'withdrawTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getWithdrawTransfer() {
      return withdrawTransfer;
    }


    /**
      * Sets the value of the 'withdrawTransfer' field.
      * @param value The value of 'withdrawTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setWithdrawTransfer(java.lang.Boolean value) {
      validate(fields()[10], value);
      this.withdrawTransfer = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'withdrawTransfer' field has been set.
      * @return True if the 'withdrawTransfer' field has been set, false otherwise.
      */
    public boolean hasWithdrawTransfer() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'withdrawTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearWithdrawTransfer() {
      withdrawTransfer = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'rejectTransfer' field.
      * @return The value.
      */
    public java.lang.Boolean getRejectTransfer() {
      return rejectTransfer;
    }


    /**
      * Sets the value of the 'rejectTransfer' field.
      * @param value The value of 'rejectTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setRejectTransfer(java.lang.Boolean value) {
      validate(fields()[11], value);
      this.rejectTransfer = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'rejectTransfer' field has been set.
      * @return True if the 'rejectTransfer' field has been set, false otherwise.
      */
    public boolean hasRejectTransfer() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'rejectTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearRejectTransfer() {
      rejectTransfer = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'overdraftInterest' field.
      * @return The value.
      */
    public java.lang.Boolean getOverdraftInterest() {
      return overdraftInterest;
    }


    /**
      * Sets the value of the 'overdraftInterest' field.
      * @param value The value of 'overdraftInterest'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setOverdraftInterest(java.lang.Boolean value) {
      validate(fields()[12], value);
      this.overdraftInterest = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'overdraftInterest' field has been set.
      * @return True if the 'overdraftInterest' field has been set, false otherwise.
      */
    public boolean hasOverdraftInterest() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'overdraftInterest' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearOverdraftInterest() {
      overdraftInterest = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'writtenoff' field.
      * @return The value.
      */
    public java.lang.Boolean getWrittenoff() {
      return writtenoff;
    }


    /**
      * Sets the value of the 'writtenoff' field.
      * @param value The value of 'writtenoff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setWrittenoff(java.lang.Boolean value) {
      validate(fields()[13], value);
      this.writtenoff = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'writtenoff' field has been set.
      * @return True if the 'writtenoff' field has been set, false otherwise.
      */
    public boolean hasWrittenoff() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'writtenoff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearWrittenoff() {
      writtenoff = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'overdraftFee' field.
      * @return The value.
      */
    public java.lang.Boolean getOverdraftFee() {
      return overdraftFee;
    }


    /**
      * Sets the value of the 'overdraftFee' field.
      * @param value The value of 'overdraftFee'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setOverdraftFee(java.lang.Boolean value) {
      validate(fields()[14], value);
      this.overdraftFee = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'overdraftFee' field has been set.
      * @return True if the 'overdraftFee' field has been set, false otherwise.
      */
    public boolean hasOverdraftFee() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'overdraftFee' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearOverdraftFee() {
      overdraftFee = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'withholdTax' field.
      * @return The value.
      */
    public java.lang.Boolean getWithholdTax() {
      return withholdTax;
    }


    /**
      * Sets the value of the 'withholdTax' field.
      * @param value The value of 'withholdTax'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setWithholdTax(java.lang.Boolean value) {
      validate(fields()[15], value);
      this.withholdTax = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'withholdTax' field has been set.
      * @return True if the 'withholdTax' field has been set, false otherwise.
      */
    public boolean hasWithholdTax() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'withholdTax' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearWithholdTax() {
      withholdTax = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'escheat' field.
      * @return The value.
      */
    public java.lang.Boolean getEscheat() {
      return escheat;
    }


    /**
      * Sets the value of the 'escheat' field.
      * @param value The value of 'escheat'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setEscheat(java.lang.Boolean value) {
      validate(fields()[16], value);
      this.escheat = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'escheat' field has been set.
      * @return True if the 'escheat' field has been set, false otherwise.
      */
    public boolean hasEscheat() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'escheat' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearEscheat() {
      escheat = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountHold' field.
      * @return The value.
      */
    public java.lang.Boolean getAmountHold() {
      return amountHold;
    }


    /**
      * Sets the value of the 'amountHold' field.
      * @param value The value of 'amountHold'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setAmountHold(java.lang.Boolean value) {
      validate(fields()[17], value);
      this.amountHold = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'amountHold' field has been set.
      * @return True if the 'amountHold' field has been set, false otherwise.
      */
    public boolean hasAmountHold() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'amountHold' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearAmountHold() {
      amountHold = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountRelease' field.
      * @return The value.
      */
    public java.lang.Boolean getAmountRelease() {
      return amountRelease;
    }


    /**
      * Sets the value of the 'amountRelease' field.
      * @param value The value of 'amountRelease'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder setAmountRelease(java.lang.Boolean value) {
      validate(fields()[18], value);
      this.amountRelease = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'amountRelease' field has been set.
      * @return True if the 'amountRelease' field has been set, false otherwise.
      */
    public boolean hasAmountRelease() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'amountRelease' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountTransactionEnumDataV1.Builder clearAmountRelease() {
      amountRelease = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SavingsAccountTransactionEnumDataV1 build() {
      try {
        SavingsAccountTransactionEnumDataV1 record = new SavingsAccountTransactionEnumDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.String) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.String) defaultValue(fields()[2]);
        record.deposit = fieldSetFlags()[3] ? this.deposit : (java.lang.Boolean) defaultValue(fields()[3]);
        record.dividendPayout = fieldSetFlags()[4] ? this.dividendPayout : (java.lang.Boolean) defaultValue(fields()[4]);
        record.withdrawal = fieldSetFlags()[5] ? this.withdrawal : (java.lang.Boolean) defaultValue(fields()[5]);
        record.interestPosting = fieldSetFlags()[6] ? this.interestPosting : (java.lang.Boolean) defaultValue(fields()[6]);
        record.feeDeduction = fieldSetFlags()[7] ? this.feeDeduction : (java.lang.Boolean) defaultValue(fields()[7]);
        record.initiateTransfer = fieldSetFlags()[8] ? this.initiateTransfer : (java.lang.Boolean) defaultValue(fields()[8]);
        record.approveTransfer = fieldSetFlags()[9] ? this.approveTransfer : (java.lang.Boolean) defaultValue(fields()[9]);
        record.withdrawTransfer = fieldSetFlags()[10] ? this.withdrawTransfer : (java.lang.Boolean) defaultValue(fields()[10]);
        record.rejectTransfer = fieldSetFlags()[11] ? this.rejectTransfer : (java.lang.Boolean) defaultValue(fields()[11]);
        record.overdraftInterest = fieldSetFlags()[12] ? this.overdraftInterest : (java.lang.Boolean) defaultValue(fields()[12]);
        record.writtenoff = fieldSetFlags()[13] ? this.writtenoff : (java.lang.Boolean) defaultValue(fields()[13]);
        record.overdraftFee = fieldSetFlags()[14] ? this.overdraftFee : (java.lang.Boolean) defaultValue(fields()[14]);
        record.withholdTax = fieldSetFlags()[15] ? this.withholdTax : (java.lang.Boolean) defaultValue(fields()[15]);
        record.escheat = fieldSetFlags()[16] ? this.escheat : (java.lang.Boolean) defaultValue(fields()[16]);
        record.amountHold = fieldSetFlags()[17] ? this.amountHold : (java.lang.Boolean) defaultValue(fields()[17]);
        record.amountRelease = fieldSetFlags()[18] ? this.amountRelease : (java.lang.Boolean) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SavingsAccountTransactionEnumDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<SavingsAccountTransactionEnumDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SavingsAccountTransactionEnumDataV1>
    READER$ = (org.apache.avro.io.DatumReader<SavingsAccountTransactionEnumDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id);
    }

    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.value);
    }

    if (this.deposit == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.deposit);
    }

    if (this.dividendPayout == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.dividendPayout);
    }

    if (this.withdrawal == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.withdrawal);
    }

    if (this.interestPosting == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.interestPosting);
    }

    if (this.feeDeduction == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.feeDeduction);
    }

    if (this.initiateTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.initiateTransfer);
    }

    if (this.approveTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.approveTransfer);
    }

    if (this.withdrawTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.withdrawTransfer);
    }

    if (this.rejectTransfer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.rejectTransfer);
    }

    if (this.overdraftInterest == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.overdraftInterest);
    }

    if (this.writtenoff == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.writtenoff);
    }

    if (this.overdraftFee == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.overdraftFee);
    }

    if (this.withholdTax == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.withholdTax);
    }

    if (this.escheat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.escheat);
    }

    if (this.amountHold == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.amountHold);
    }

    if (this.amountRelease == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.amountRelease);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.value = null;
      } else {
        this.value = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.deposit = null;
      } else {
        this.deposit = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dividendPayout = null;
      } else {
        this.dividendPayout = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.withdrawal = null;
      } else {
        this.withdrawal = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.interestPosting = null;
      } else {
        this.interestPosting = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.feeDeduction = null;
      } else {
        this.feeDeduction = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.initiateTransfer = null;
      } else {
        this.initiateTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.approveTransfer = null;
      } else {
        this.approveTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.withdrawTransfer = null;
      } else {
        this.withdrawTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rejectTransfer = null;
      } else {
        this.rejectTransfer = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.overdraftInterest = null;
      } else {
        this.overdraftInterest = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.writtenoff = null;
      } else {
        this.writtenoff = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.overdraftFee = null;
      } else {
        this.overdraftFee = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.withholdTax = null;
      } else {
        this.withholdTax = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.escheat = null;
      } else {
        this.escheat = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amountHold = null;
      } else {
        this.amountHold = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amountRelease = null;
      } else {
        this.amountRelease = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.value = null;
          } else {
            this.value = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deposit = null;
          } else {
            this.deposit = in.readBoolean();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dividendPayout = null;
          } else {
            this.dividendPayout = in.readBoolean();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.withdrawal = null;
          } else {
            this.withdrawal = in.readBoolean();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.interestPosting = null;
          } else {
            this.interestPosting = in.readBoolean();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.feeDeduction = null;
          } else {
            this.feeDeduction = in.readBoolean();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.initiateTransfer = null;
          } else {
            this.initiateTransfer = in.readBoolean();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.approveTransfer = null;
          } else {
            this.approveTransfer = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.withdrawTransfer = null;
          } else {
            this.withdrawTransfer = in.readBoolean();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rejectTransfer = null;
          } else {
            this.rejectTransfer = in.readBoolean();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.overdraftInterest = null;
          } else {
            this.overdraftInterest = in.readBoolean();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.writtenoff = null;
          } else {
            this.writtenoff = in.readBoolean();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.overdraftFee = null;
          } else {
            this.overdraftFee = in.readBoolean();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.withholdTax = null;
          } else {
            this.withholdTax = in.readBoolean();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.escheat = null;
          } else {
            this.escheat = in.readBoolean();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amountHold = null;
          } else {
            this.amountHold = in.readBoolean();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amountRelease = null;
          } else {
            this.amountRelease = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










