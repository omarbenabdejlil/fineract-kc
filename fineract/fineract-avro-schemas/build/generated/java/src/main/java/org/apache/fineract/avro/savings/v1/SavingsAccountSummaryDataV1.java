/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.savings.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SavingsAccountSummaryDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 3993557138371668255L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SavingsAccountSummaryDataV1\",\"namespace\":\"org.apache.fineract.avro.savings.v1\",\"fields\":[{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CurrencyDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalPlaces\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"inMultiplesOf\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"displaySymbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nameCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"displayLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"totalDeposits\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalWithdrawals\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalWithdrawalFees\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalAnnualFees\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalInterestEarned\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalInterestPosted\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"accountBalance\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalFeeCharge\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalPenaltyCharge\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalOverdraftInterestDerived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalWithholdTax\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestNotPosted\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"lastInterestCalculationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"availableBalance\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestPostedTillDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"prevInterestPostedTillDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<SavingsAccountSummaryDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SavingsAccountSummaryDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SavingsAccountSummaryDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SavingsAccountSummaryDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SavingsAccountSummaryDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SavingsAccountSummaryDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SavingsAccountSummaryDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SavingsAccountSummaryDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SavingsAccountSummaryDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
  private java.math.BigDecimal totalDeposits;
  private java.math.BigDecimal totalWithdrawals;
  private java.math.BigDecimal totalWithdrawalFees;
  private java.math.BigDecimal totalAnnualFees;
  private java.math.BigDecimal totalInterestEarned;
  private java.math.BigDecimal totalInterestPosted;
  private java.math.BigDecimal accountBalance;
  private java.math.BigDecimal totalFeeCharge;
  private java.math.BigDecimal totalPenaltyCharge;
  private java.math.BigDecimal totalOverdraftInterestDerived;
  private java.math.BigDecimal totalWithholdTax;
  private java.math.BigDecimal interestNotPosted;
  private java.lang.String lastInterestCalculationDate;
  private java.math.BigDecimal availableBalance;
  private java.lang.String interestPostedTillDate;
  private java.lang.String prevInterestPostedTillDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SavingsAccountSummaryDataV1() {}

  /**
   * All-args constructor.
   * @param currency The new value for currency
   * @param totalDeposits The new value for totalDeposits
   * @param totalWithdrawals The new value for totalWithdrawals
   * @param totalWithdrawalFees The new value for totalWithdrawalFees
   * @param totalAnnualFees The new value for totalAnnualFees
   * @param totalInterestEarned The new value for totalInterestEarned
   * @param totalInterestPosted The new value for totalInterestPosted
   * @param accountBalance The new value for accountBalance
   * @param totalFeeCharge The new value for totalFeeCharge
   * @param totalPenaltyCharge The new value for totalPenaltyCharge
   * @param totalOverdraftInterestDerived The new value for totalOverdraftInterestDerived
   * @param totalWithholdTax The new value for totalWithholdTax
   * @param interestNotPosted The new value for interestNotPosted
   * @param lastInterestCalculationDate The new value for lastInterestCalculationDate
   * @param availableBalance The new value for availableBalance
   * @param interestPostedTillDate The new value for interestPostedTillDate
   * @param prevInterestPostedTillDate The new value for prevInterestPostedTillDate
   */
  public SavingsAccountSummaryDataV1(org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency, java.math.BigDecimal totalDeposits, java.math.BigDecimal totalWithdrawals, java.math.BigDecimal totalWithdrawalFees, java.math.BigDecimal totalAnnualFees, java.math.BigDecimal totalInterestEarned, java.math.BigDecimal totalInterestPosted, java.math.BigDecimal accountBalance, java.math.BigDecimal totalFeeCharge, java.math.BigDecimal totalPenaltyCharge, java.math.BigDecimal totalOverdraftInterestDerived, java.math.BigDecimal totalWithholdTax, java.math.BigDecimal interestNotPosted, java.lang.String lastInterestCalculationDate, java.math.BigDecimal availableBalance, java.lang.String interestPostedTillDate, java.lang.String prevInterestPostedTillDate) {
    this.currency = currency;
    this.totalDeposits = totalDeposits;
    this.totalWithdrawals = totalWithdrawals;
    this.totalWithdrawalFees = totalWithdrawalFees;
    this.totalAnnualFees = totalAnnualFees;
    this.totalInterestEarned = totalInterestEarned;
    this.totalInterestPosted = totalInterestPosted;
    this.accountBalance = accountBalance;
    this.totalFeeCharge = totalFeeCharge;
    this.totalPenaltyCharge = totalPenaltyCharge;
    this.totalOverdraftInterestDerived = totalOverdraftInterestDerived;
    this.totalWithholdTax = totalWithholdTax;
    this.interestNotPosted = interestNotPosted;
    this.lastInterestCalculationDate = lastInterestCalculationDate;
    this.availableBalance = availableBalance;
    this.interestPostedTillDate = interestPostedTillDate;
    this.prevInterestPostedTillDate = prevInterestPostedTillDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currency;
    case 1: return totalDeposits;
    case 2: return totalWithdrawals;
    case 3: return totalWithdrawalFees;
    case 4: return totalAnnualFees;
    case 5: return totalInterestEarned;
    case 6: return totalInterestPosted;
    case 7: return accountBalance;
    case 8: return totalFeeCharge;
    case 9: return totalPenaltyCharge;
    case 10: return totalOverdraftInterestDerived;
    case 11: return totalWithholdTax;
    case 12: return interestNotPosted;
    case 13: return lastInterestCalculationDate;
    case 14: return availableBalance;
    case 15: return interestPostedTillDate;
    case 16: return prevInterestPostedTillDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currency = (org.apache.fineract.avro.generic.v1.CurrencyDataV1)value$; break;
    case 1: totalDeposits = (java.math.BigDecimal)value$; break;
    case 2: totalWithdrawals = (java.math.BigDecimal)value$; break;
    case 3: totalWithdrawalFees = (java.math.BigDecimal)value$; break;
    case 4: totalAnnualFees = (java.math.BigDecimal)value$; break;
    case 5: totalInterestEarned = (java.math.BigDecimal)value$; break;
    case 6: totalInterestPosted = (java.math.BigDecimal)value$; break;
    case 7: accountBalance = (java.math.BigDecimal)value$; break;
    case 8: totalFeeCharge = (java.math.BigDecimal)value$; break;
    case 9: totalPenaltyCharge = (java.math.BigDecimal)value$; break;
    case 10: totalOverdraftInterestDerived = (java.math.BigDecimal)value$; break;
    case 11: totalWithholdTax = (java.math.BigDecimal)value$; break;
    case 12: interestNotPosted = (java.math.BigDecimal)value$; break;
    case 13: lastInterestCalculationDate = value$ != null ? value$.toString() : null; break;
    case 14: availableBalance = (java.math.BigDecimal)value$; break;
    case 15: interestPostedTillDate = value$ != null ? value$.toString() : null; break;
    case 16: prevInterestPostedTillDate = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'totalDeposits' field.
   * @return The value of the 'totalDeposits' field.
   */
  public java.math.BigDecimal getTotalDeposits() {
    return totalDeposits;
  }


  /**
   * Sets the value of the 'totalDeposits' field.
   * @param value the value to set.
   */
  public void setTotalDeposits(java.math.BigDecimal value) {
    this.totalDeposits = value;
  }

  /**
   * Gets the value of the 'totalWithdrawals' field.
   * @return The value of the 'totalWithdrawals' field.
   */
  public java.math.BigDecimal getTotalWithdrawals() {
    return totalWithdrawals;
  }


  /**
   * Sets the value of the 'totalWithdrawals' field.
   * @param value the value to set.
   */
  public void setTotalWithdrawals(java.math.BigDecimal value) {
    this.totalWithdrawals = value;
  }

  /**
   * Gets the value of the 'totalWithdrawalFees' field.
   * @return The value of the 'totalWithdrawalFees' field.
   */
  public java.math.BigDecimal getTotalWithdrawalFees() {
    return totalWithdrawalFees;
  }


  /**
   * Sets the value of the 'totalWithdrawalFees' field.
   * @param value the value to set.
   */
  public void setTotalWithdrawalFees(java.math.BigDecimal value) {
    this.totalWithdrawalFees = value;
  }

  /**
   * Gets the value of the 'totalAnnualFees' field.
   * @return The value of the 'totalAnnualFees' field.
   */
  public java.math.BigDecimal getTotalAnnualFees() {
    return totalAnnualFees;
  }


  /**
   * Sets the value of the 'totalAnnualFees' field.
   * @param value the value to set.
   */
  public void setTotalAnnualFees(java.math.BigDecimal value) {
    this.totalAnnualFees = value;
  }

  /**
   * Gets the value of the 'totalInterestEarned' field.
   * @return The value of the 'totalInterestEarned' field.
   */
  public java.math.BigDecimal getTotalInterestEarned() {
    return totalInterestEarned;
  }


  /**
   * Sets the value of the 'totalInterestEarned' field.
   * @param value the value to set.
   */
  public void setTotalInterestEarned(java.math.BigDecimal value) {
    this.totalInterestEarned = value;
  }

  /**
   * Gets the value of the 'totalInterestPosted' field.
   * @return The value of the 'totalInterestPosted' field.
   */
  public java.math.BigDecimal getTotalInterestPosted() {
    return totalInterestPosted;
  }


  /**
   * Sets the value of the 'totalInterestPosted' field.
   * @param value the value to set.
   */
  public void setTotalInterestPosted(java.math.BigDecimal value) {
    this.totalInterestPosted = value;
  }

  /**
   * Gets the value of the 'accountBalance' field.
   * @return The value of the 'accountBalance' field.
   */
  public java.math.BigDecimal getAccountBalance() {
    return accountBalance;
  }


  /**
   * Sets the value of the 'accountBalance' field.
   * @param value the value to set.
   */
  public void setAccountBalance(java.math.BigDecimal value) {
    this.accountBalance = value;
  }

  /**
   * Gets the value of the 'totalFeeCharge' field.
   * @return The value of the 'totalFeeCharge' field.
   */
  public java.math.BigDecimal getTotalFeeCharge() {
    return totalFeeCharge;
  }


  /**
   * Sets the value of the 'totalFeeCharge' field.
   * @param value the value to set.
   */
  public void setTotalFeeCharge(java.math.BigDecimal value) {
    this.totalFeeCharge = value;
  }

  /**
   * Gets the value of the 'totalPenaltyCharge' field.
   * @return The value of the 'totalPenaltyCharge' field.
   */
  public java.math.BigDecimal getTotalPenaltyCharge() {
    return totalPenaltyCharge;
  }


  /**
   * Sets the value of the 'totalPenaltyCharge' field.
   * @param value the value to set.
   */
  public void setTotalPenaltyCharge(java.math.BigDecimal value) {
    this.totalPenaltyCharge = value;
  }

  /**
   * Gets the value of the 'totalOverdraftInterestDerived' field.
   * @return The value of the 'totalOverdraftInterestDerived' field.
   */
  public java.math.BigDecimal getTotalOverdraftInterestDerived() {
    return totalOverdraftInterestDerived;
  }


  /**
   * Sets the value of the 'totalOverdraftInterestDerived' field.
   * @param value the value to set.
   */
  public void setTotalOverdraftInterestDerived(java.math.BigDecimal value) {
    this.totalOverdraftInterestDerived = value;
  }

  /**
   * Gets the value of the 'totalWithholdTax' field.
   * @return The value of the 'totalWithholdTax' field.
   */
  public java.math.BigDecimal getTotalWithholdTax() {
    return totalWithholdTax;
  }


  /**
   * Sets the value of the 'totalWithholdTax' field.
   * @param value the value to set.
   */
  public void setTotalWithholdTax(java.math.BigDecimal value) {
    this.totalWithholdTax = value;
  }

  /**
   * Gets the value of the 'interestNotPosted' field.
   * @return The value of the 'interestNotPosted' field.
   */
  public java.math.BigDecimal getInterestNotPosted() {
    return interestNotPosted;
  }


  /**
   * Sets the value of the 'interestNotPosted' field.
   * @param value the value to set.
   */
  public void setInterestNotPosted(java.math.BigDecimal value) {
    this.interestNotPosted = value;
  }

  /**
   * Gets the value of the 'lastInterestCalculationDate' field.
   * @return The value of the 'lastInterestCalculationDate' field.
   */
  public java.lang.String getLastInterestCalculationDate() {
    return lastInterestCalculationDate;
  }


  /**
   * Sets the value of the 'lastInterestCalculationDate' field.
   * @param value the value to set.
   */
  public void setLastInterestCalculationDate(java.lang.String value) {
    this.lastInterestCalculationDate = value;
  }

  /**
   * Gets the value of the 'availableBalance' field.
   * @return The value of the 'availableBalance' field.
   */
  public java.math.BigDecimal getAvailableBalance() {
    return availableBalance;
  }


  /**
   * Sets the value of the 'availableBalance' field.
   * @param value the value to set.
   */
  public void setAvailableBalance(java.math.BigDecimal value) {
    this.availableBalance = value;
  }

  /**
   * Gets the value of the 'interestPostedTillDate' field.
   * @return The value of the 'interestPostedTillDate' field.
   */
  public java.lang.String getInterestPostedTillDate() {
    return interestPostedTillDate;
  }


  /**
   * Sets the value of the 'interestPostedTillDate' field.
   * @param value the value to set.
   */
  public void setInterestPostedTillDate(java.lang.String value) {
    this.interestPostedTillDate = value;
  }

  /**
   * Gets the value of the 'prevInterestPostedTillDate' field.
   * @return The value of the 'prevInterestPostedTillDate' field.
   */
  public java.lang.String getPrevInterestPostedTillDate() {
    return prevInterestPostedTillDate;
  }


  /**
   * Sets the value of the 'prevInterestPostedTillDate' field.
   * @param value the value to set.
   */
  public void setPrevInterestPostedTillDate(java.lang.String value) {
    this.prevInterestPostedTillDate = value;
  }

  /**
   * Creates a new SavingsAccountSummaryDataV1 RecordBuilder.
   * @return A new SavingsAccountSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder();
  }

  /**
   * Creates a new SavingsAccountSummaryDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SavingsAccountSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder newBuilder(org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder(other);
    }
  }

  /**
   * Creates a new SavingsAccountSummaryDataV1 RecordBuilder by copying an existing SavingsAccountSummaryDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new SavingsAccountSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder newBuilder(org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for SavingsAccountSummaryDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SavingsAccountSummaryDataV1>
    implements org.apache.avro.data.RecordBuilder<SavingsAccountSummaryDataV1> {

    private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder currencyBuilder;
    private java.math.BigDecimal totalDeposits;
    private java.math.BigDecimal totalWithdrawals;
    private java.math.BigDecimal totalWithdrawalFees;
    private java.math.BigDecimal totalAnnualFees;
    private java.math.BigDecimal totalInterestEarned;
    private java.math.BigDecimal totalInterestPosted;
    private java.math.BigDecimal accountBalance;
    private java.math.BigDecimal totalFeeCharge;
    private java.math.BigDecimal totalPenaltyCharge;
    private java.math.BigDecimal totalOverdraftInterestDerived;
    private java.math.BigDecimal totalWithholdTax;
    private java.math.BigDecimal interestNotPosted;
    private java.lang.String lastInterestCalculationDate;
    private java.math.BigDecimal availableBalance;
    private java.lang.String interestPostedTillDate;
    private java.lang.String prevInterestPostedTillDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currency)) {
        this.currency = data().deepCopy(fields()[0].schema(), other.currency);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCurrencyBuilder()) {
        this.currencyBuilder = org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(other.getCurrencyBuilder());
      }
      if (isValidValue(fields()[1], other.totalDeposits)) {
        this.totalDeposits = data().deepCopy(fields()[1].schema(), other.totalDeposits);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.totalWithdrawals)) {
        this.totalWithdrawals = data().deepCopy(fields()[2].schema(), other.totalWithdrawals);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalWithdrawalFees)) {
        this.totalWithdrawalFees = data().deepCopy(fields()[3].schema(), other.totalWithdrawalFees);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalAnnualFees)) {
        this.totalAnnualFees = data().deepCopy(fields()[4].schema(), other.totalAnnualFees);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.totalInterestEarned)) {
        this.totalInterestEarned = data().deepCopy(fields()[5].schema(), other.totalInterestEarned);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.totalInterestPosted)) {
        this.totalInterestPosted = data().deepCopy(fields()[6].schema(), other.totalInterestPosted);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.accountBalance)) {
        this.accountBalance = data().deepCopy(fields()[7].schema(), other.accountBalance);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.totalFeeCharge)) {
        this.totalFeeCharge = data().deepCopy(fields()[8].schema(), other.totalFeeCharge);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.totalPenaltyCharge)) {
        this.totalPenaltyCharge = data().deepCopy(fields()[9].schema(), other.totalPenaltyCharge);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.totalOverdraftInterestDerived)) {
        this.totalOverdraftInterestDerived = data().deepCopy(fields()[10].schema(), other.totalOverdraftInterestDerived);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.totalWithholdTax)) {
        this.totalWithholdTax = data().deepCopy(fields()[11].schema(), other.totalWithholdTax);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.interestNotPosted)) {
        this.interestNotPosted = data().deepCopy(fields()[12].schema(), other.interestNotPosted);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.lastInterestCalculationDate)) {
        this.lastInterestCalculationDate = data().deepCopy(fields()[13].schema(), other.lastInterestCalculationDate);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.availableBalance)) {
        this.availableBalance = data().deepCopy(fields()[14].schema(), other.availableBalance);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.interestPostedTillDate)) {
        this.interestPostedTillDate = data().deepCopy(fields()[15].schema(), other.interestPostedTillDate);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.prevInterestPostedTillDate)) {
        this.prevInterestPostedTillDate = data().deepCopy(fields()[16].schema(), other.prevInterestPostedTillDate);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
    }

    /**
     * Creates a Builder by copying an existing SavingsAccountSummaryDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.currency)) {
        this.currency = data().deepCopy(fields()[0].schema(), other.currency);
        fieldSetFlags()[0] = true;
      }
      this.currencyBuilder = null;
      if (isValidValue(fields()[1], other.totalDeposits)) {
        this.totalDeposits = data().deepCopy(fields()[1].schema(), other.totalDeposits);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalWithdrawals)) {
        this.totalWithdrawals = data().deepCopy(fields()[2].schema(), other.totalWithdrawals);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalWithdrawalFees)) {
        this.totalWithdrawalFees = data().deepCopy(fields()[3].schema(), other.totalWithdrawalFees);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalAnnualFees)) {
        this.totalAnnualFees = data().deepCopy(fields()[4].schema(), other.totalAnnualFees);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalInterestEarned)) {
        this.totalInterestEarned = data().deepCopy(fields()[5].schema(), other.totalInterestEarned);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalInterestPosted)) {
        this.totalInterestPosted = data().deepCopy(fields()[6].schema(), other.totalInterestPosted);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.accountBalance)) {
        this.accountBalance = data().deepCopy(fields()[7].schema(), other.accountBalance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalFeeCharge)) {
        this.totalFeeCharge = data().deepCopy(fields()[8].schema(), other.totalFeeCharge);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalPenaltyCharge)) {
        this.totalPenaltyCharge = data().deepCopy(fields()[9].schema(), other.totalPenaltyCharge);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalOverdraftInterestDerived)) {
        this.totalOverdraftInterestDerived = data().deepCopy(fields()[10].schema(), other.totalOverdraftInterestDerived);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.totalWithholdTax)) {
        this.totalWithholdTax = data().deepCopy(fields()[11].schema(), other.totalWithholdTax);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.interestNotPosted)) {
        this.interestNotPosted = data().deepCopy(fields()[12].schema(), other.interestNotPosted);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.lastInterestCalculationDate)) {
        this.lastInterestCalculationDate = data().deepCopy(fields()[13].schema(), other.lastInterestCalculationDate);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.availableBalance)) {
        this.availableBalance = data().deepCopy(fields()[14].schema(), other.availableBalance);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.interestPostedTillDate)) {
        this.interestPostedTillDate = data().deepCopy(fields()[15].schema(), other.interestPostedTillDate);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.prevInterestPostedTillDate)) {
        this.prevInterestPostedTillDate = data().deepCopy(fields()[16].schema(), other.prevInterestPostedTillDate);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
      validate(fields()[0], value);
      this.currencyBuilder = null;
      this.currency = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'currency' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder getCurrencyBuilder() {
      if (currencyBuilder == null) {
        if (hasCurrency()) {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(currency));
        } else {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder());
        }
      }
      return currencyBuilder;
    }

    /**
     * Sets the Builder instance for the 'currency' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder value) {
      clearCurrency();
      currencyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currency' field has an active Builder instance
     * @return True if the 'currency' field has an active Builder instance
     */
    public boolean hasCurrencyBuilder() {
      return currencyBuilder != null;
    }

    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearCurrency() {
      currency = null;
      currencyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDeposits' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalDeposits() {
      return totalDeposits;
    }


    /**
      * Sets the value of the 'totalDeposits' field.
      * @param value The value of 'totalDeposits'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalDeposits(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.totalDeposits = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDeposits' field has been set.
      * @return True if the 'totalDeposits' field has been set, false otherwise.
      */
    public boolean hasTotalDeposits() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalDeposits' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalDeposits() {
      totalDeposits = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWithdrawals' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalWithdrawals() {
      return totalWithdrawals;
    }


    /**
      * Sets the value of the 'totalWithdrawals' field.
      * @param value The value of 'totalWithdrawals'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalWithdrawals(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.totalWithdrawals = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWithdrawals' field has been set.
      * @return True if the 'totalWithdrawals' field has been set, false otherwise.
      */
    public boolean hasTotalWithdrawals() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalWithdrawals' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalWithdrawals() {
      totalWithdrawals = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWithdrawalFees' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalWithdrawalFees() {
      return totalWithdrawalFees;
    }


    /**
      * Sets the value of the 'totalWithdrawalFees' field.
      * @param value The value of 'totalWithdrawalFees'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalWithdrawalFees(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.totalWithdrawalFees = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWithdrawalFees' field has been set.
      * @return True if the 'totalWithdrawalFees' field has been set, false otherwise.
      */
    public boolean hasTotalWithdrawalFees() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalWithdrawalFees' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalWithdrawalFees() {
      totalWithdrawalFees = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAnnualFees' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalAnnualFees() {
      return totalAnnualFees;
    }


    /**
      * Sets the value of the 'totalAnnualFees' field.
      * @param value The value of 'totalAnnualFees'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalAnnualFees(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.totalAnnualFees = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAnnualFees' field has been set.
      * @return True if the 'totalAnnualFees' field has been set, false otherwise.
      */
    public boolean hasTotalAnnualFees() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalAnnualFees' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalAnnualFees() {
      totalAnnualFees = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalInterestEarned' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalInterestEarned() {
      return totalInterestEarned;
    }


    /**
      * Sets the value of the 'totalInterestEarned' field.
      * @param value The value of 'totalInterestEarned'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalInterestEarned(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.totalInterestEarned = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalInterestEarned' field has been set.
      * @return True if the 'totalInterestEarned' field has been set, false otherwise.
      */
    public boolean hasTotalInterestEarned() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalInterestEarned' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalInterestEarned() {
      totalInterestEarned = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalInterestPosted' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalInterestPosted() {
      return totalInterestPosted;
    }


    /**
      * Sets the value of the 'totalInterestPosted' field.
      * @param value The value of 'totalInterestPosted'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalInterestPosted(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.totalInterestPosted = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'totalInterestPosted' field has been set.
      * @return True if the 'totalInterestPosted' field has been set, false otherwise.
      */
    public boolean hasTotalInterestPosted() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'totalInterestPosted' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalInterestPosted() {
      totalInterestPosted = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountBalance' field.
      * @return The value.
      */
    public java.math.BigDecimal getAccountBalance() {
      return accountBalance;
    }


    /**
      * Sets the value of the 'accountBalance' field.
      * @param value The value of 'accountBalance'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setAccountBalance(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.accountBalance = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'accountBalance' field has been set.
      * @return True if the 'accountBalance' field has been set, false otherwise.
      */
    public boolean hasAccountBalance() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'accountBalance' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearAccountBalance() {
      accountBalance = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalFeeCharge' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalFeeCharge() {
      return totalFeeCharge;
    }


    /**
      * Sets the value of the 'totalFeeCharge' field.
      * @param value The value of 'totalFeeCharge'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalFeeCharge(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.totalFeeCharge = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalFeeCharge' field has been set.
      * @return True if the 'totalFeeCharge' field has been set, false otherwise.
      */
    public boolean hasTotalFeeCharge() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalFeeCharge' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalFeeCharge() {
      totalFeeCharge = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPenaltyCharge' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalPenaltyCharge() {
      return totalPenaltyCharge;
    }


    /**
      * Sets the value of the 'totalPenaltyCharge' field.
      * @param value The value of 'totalPenaltyCharge'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalPenaltyCharge(java.math.BigDecimal value) {
      validate(fields()[9], value);
      this.totalPenaltyCharge = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPenaltyCharge' field has been set.
      * @return True if the 'totalPenaltyCharge' field has been set, false otherwise.
      */
    public boolean hasTotalPenaltyCharge() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'totalPenaltyCharge' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalPenaltyCharge() {
      totalPenaltyCharge = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalOverdraftInterestDerived' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalOverdraftInterestDerived() {
      return totalOverdraftInterestDerived;
    }


    /**
      * Sets the value of the 'totalOverdraftInterestDerived' field.
      * @param value The value of 'totalOverdraftInterestDerived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalOverdraftInterestDerived(java.math.BigDecimal value) {
      validate(fields()[10], value);
      this.totalOverdraftInterestDerived = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'totalOverdraftInterestDerived' field has been set.
      * @return True if the 'totalOverdraftInterestDerived' field has been set, false otherwise.
      */
    public boolean hasTotalOverdraftInterestDerived() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'totalOverdraftInterestDerived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalOverdraftInterestDerived() {
      totalOverdraftInterestDerived = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWithholdTax' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalWithholdTax() {
      return totalWithholdTax;
    }


    /**
      * Sets the value of the 'totalWithholdTax' field.
      * @param value The value of 'totalWithholdTax'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setTotalWithholdTax(java.math.BigDecimal value) {
      validate(fields()[11], value);
      this.totalWithholdTax = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWithholdTax' field has been set.
      * @return True if the 'totalWithholdTax' field has been set, false otherwise.
      */
    public boolean hasTotalWithholdTax() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'totalWithholdTax' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearTotalWithholdTax() {
      totalWithholdTax = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestNotPosted' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestNotPosted() {
      return interestNotPosted;
    }


    /**
      * Sets the value of the 'interestNotPosted' field.
      * @param value The value of 'interestNotPosted'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setInterestNotPosted(java.math.BigDecimal value) {
      validate(fields()[12], value);
      this.interestNotPosted = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'interestNotPosted' field has been set.
      * @return True if the 'interestNotPosted' field has been set, false otherwise.
      */
    public boolean hasInterestNotPosted() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'interestNotPosted' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearInterestNotPosted() {
      interestNotPosted = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastInterestCalculationDate' field.
      * @return The value.
      */
    public java.lang.String getLastInterestCalculationDate() {
      return lastInterestCalculationDate;
    }


    /**
      * Sets the value of the 'lastInterestCalculationDate' field.
      * @param value The value of 'lastInterestCalculationDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setLastInterestCalculationDate(java.lang.String value) {
      validate(fields()[13], value);
      this.lastInterestCalculationDate = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'lastInterestCalculationDate' field has been set.
      * @return True if the 'lastInterestCalculationDate' field has been set, false otherwise.
      */
    public boolean hasLastInterestCalculationDate() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'lastInterestCalculationDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearLastInterestCalculationDate() {
      lastInterestCalculationDate = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableBalance' field.
      * @return The value.
      */
    public java.math.BigDecimal getAvailableBalance() {
      return availableBalance;
    }


    /**
      * Sets the value of the 'availableBalance' field.
      * @param value The value of 'availableBalance'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setAvailableBalance(java.math.BigDecimal value) {
      validate(fields()[14], value);
      this.availableBalance = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'availableBalance' field has been set.
      * @return True if the 'availableBalance' field has been set, false otherwise.
      */
    public boolean hasAvailableBalance() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'availableBalance' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearAvailableBalance() {
      availableBalance = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestPostedTillDate' field.
      * @return The value.
      */
    public java.lang.String getInterestPostedTillDate() {
      return interestPostedTillDate;
    }


    /**
      * Sets the value of the 'interestPostedTillDate' field.
      * @param value The value of 'interestPostedTillDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setInterestPostedTillDate(java.lang.String value) {
      validate(fields()[15], value);
      this.interestPostedTillDate = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'interestPostedTillDate' field has been set.
      * @return True if the 'interestPostedTillDate' field has been set, false otherwise.
      */
    public boolean hasInterestPostedTillDate() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'interestPostedTillDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearInterestPostedTillDate() {
      interestPostedTillDate = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'prevInterestPostedTillDate' field.
      * @return The value.
      */
    public java.lang.String getPrevInterestPostedTillDate() {
      return prevInterestPostedTillDate;
    }


    /**
      * Sets the value of the 'prevInterestPostedTillDate' field.
      * @param value The value of 'prevInterestPostedTillDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder setPrevInterestPostedTillDate(java.lang.String value) {
      validate(fields()[16], value);
      this.prevInterestPostedTillDate = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'prevInterestPostedTillDate' field has been set.
      * @return True if the 'prevInterestPostedTillDate' field has been set, false otherwise.
      */
    public boolean hasPrevInterestPostedTillDate() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'prevInterestPostedTillDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.savings.v1.SavingsAccountSummaryDataV1.Builder clearPrevInterestPostedTillDate() {
      prevInterestPostedTillDate = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SavingsAccountSummaryDataV1 build() {
      try {
        SavingsAccountSummaryDataV1 record = new SavingsAccountSummaryDataV1();
        if (currencyBuilder != null) {
          try {
            record.currency = this.currencyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currency"));
            throw e;
          }
        } else {
          record.currency = fieldSetFlags()[0] ? this.currency : (org.apache.fineract.avro.generic.v1.CurrencyDataV1) defaultValue(fields()[0]);
        }
        record.totalDeposits = fieldSetFlags()[1] ? this.totalDeposits : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.totalWithdrawals = fieldSetFlags()[2] ? this.totalWithdrawals : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.totalWithdrawalFees = fieldSetFlags()[3] ? this.totalWithdrawalFees : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.totalAnnualFees = fieldSetFlags()[4] ? this.totalAnnualFees : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.totalInterestEarned = fieldSetFlags()[5] ? this.totalInterestEarned : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.totalInterestPosted = fieldSetFlags()[6] ? this.totalInterestPosted : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.accountBalance = fieldSetFlags()[7] ? this.accountBalance : (java.math.BigDecimal) defaultValue(fields()[7]);
        record.totalFeeCharge = fieldSetFlags()[8] ? this.totalFeeCharge : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.totalPenaltyCharge = fieldSetFlags()[9] ? this.totalPenaltyCharge : (java.math.BigDecimal) defaultValue(fields()[9]);
        record.totalOverdraftInterestDerived = fieldSetFlags()[10] ? this.totalOverdraftInterestDerived : (java.math.BigDecimal) defaultValue(fields()[10]);
        record.totalWithholdTax = fieldSetFlags()[11] ? this.totalWithholdTax : (java.math.BigDecimal) defaultValue(fields()[11]);
        record.interestNotPosted = fieldSetFlags()[12] ? this.interestNotPosted : (java.math.BigDecimal) defaultValue(fields()[12]);
        record.lastInterestCalculationDate = fieldSetFlags()[13] ? this.lastInterestCalculationDate : (java.lang.String) defaultValue(fields()[13]);
        record.availableBalance = fieldSetFlags()[14] ? this.availableBalance : (java.math.BigDecimal) defaultValue(fields()[14]);
        record.interestPostedTillDate = fieldSetFlags()[15] ? this.interestPostedTillDate : (java.lang.String) defaultValue(fields()[15]);
        record.prevInterestPostedTillDate = fieldSetFlags()[16] ? this.prevInterestPostedTillDate : (java.lang.String) defaultValue(fields()[16]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SavingsAccountSummaryDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<SavingsAccountSummaryDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SavingsAccountSummaryDataV1>
    READER$ = (org.apache.avro.io.DatumReader<SavingsAccountSummaryDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










