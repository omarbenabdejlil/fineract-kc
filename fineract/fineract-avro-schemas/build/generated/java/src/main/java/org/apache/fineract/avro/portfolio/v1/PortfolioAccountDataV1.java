/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.portfolio.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PortfolioAccountDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 5892484114844287077L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PortfolioAccountDataV1\",\"namespace\":\"org.apache.fineract.avro.portfolio.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"accountNo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"groupId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"groupName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"clientId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"clientName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"productId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"productName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fieldOfficerId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"fieldOfficerName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CurrencyDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalPlaces\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"inMultiplesOf\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"displaySymbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nameCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"displayLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"amtForTransfer\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<PortfolioAccountDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PortfolioAccountDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PortfolioAccountDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PortfolioAccountDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PortfolioAccountDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PortfolioAccountDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PortfolioAccountDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PortfolioAccountDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PortfolioAccountDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private java.lang.String accountNo;
  private java.lang.String externalId;
  private java.lang.Long groupId;
  private java.lang.String groupName;
  private java.lang.Long clientId;
  private java.lang.String clientName;
  private java.lang.Long productId;
  private java.lang.String productName;
  private java.lang.Long fieldOfficerId;
  private java.lang.String fieldOfficerName;
  private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
  private java.math.BigDecimal amtForTransfer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PortfolioAccountDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param accountNo The new value for accountNo
   * @param externalId The new value for externalId
   * @param groupId The new value for groupId
   * @param groupName The new value for groupName
   * @param clientId The new value for clientId
   * @param clientName The new value for clientName
   * @param productId The new value for productId
   * @param productName The new value for productName
   * @param fieldOfficerId The new value for fieldOfficerId
   * @param fieldOfficerName The new value for fieldOfficerName
   * @param currency The new value for currency
   * @param amtForTransfer The new value for amtForTransfer
   */
  public PortfolioAccountDataV1(java.lang.Long id, java.lang.String accountNo, java.lang.String externalId, java.lang.Long groupId, java.lang.String groupName, java.lang.Long clientId, java.lang.String clientName, java.lang.Long productId, java.lang.String productName, java.lang.Long fieldOfficerId, java.lang.String fieldOfficerName, org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency, java.math.BigDecimal amtForTransfer) {
    this.id = id;
    this.accountNo = accountNo;
    this.externalId = externalId;
    this.groupId = groupId;
    this.groupName = groupName;
    this.clientId = clientId;
    this.clientName = clientName;
    this.productId = productId;
    this.productName = productName;
    this.fieldOfficerId = fieldOfficerId;
    this.fieldOfficerName = fieldOfficerName;
    this.currency = currency;
    this.amtForTransfer = amtForTransfer;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return accountNo;
    case 2: return externalId;
    case 3: return groupId;
    case 4: return groupName;
    case 5: return clientId;
    case 6: return clientName;
    case 7: return productId;
    case 8: return productName;
    case 9: return fieldOfficerId;
    case 10: return fieldOfficerName;
    case 11: return currency;
    case 12: return amtForTransfer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: accountNo = value$ != null ? value$.toString() : null; break;
    case 2: externalId = value$ != null ? value$.toString() : null; break;
    case 3: groupId = (java.lang.Long)value$; break;
    case 4: groupName = value$ != null ? value$.toString() : null; break;
    case 5: clientId = (java.lang.Long)value$; break;
    case 6: clientName = value$ != null ? value$.toString() : null; break;
    case 7: productId = (java.lang.Long)value$; break;
    case 8: productName = value$ != null ? value$.toString() : null; break;
    case 9: fieldOfficerId = (java.lang.Long)value$; break;
    case 10: fieldOfficerName = value$ != null ? value$.toString() : null; break;
    case 11: currency = (org.apache.fineract.avro.generic.v1.CurrencyDataV1)value$; break;
    case 12: amtForTransfer = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'accountNo' field.
   * @return The value of the 'accountNo' field.
   */
  public java.lang.String getAccountNo() {
    return accountNo;
  }


  /**
   * Sets the value of the 'accountNo' field.
   * @param value the value to set.
   */
  public void setAccountNo(java.lang.String value) {
    this.accountNo = value;
  }

  /**
   * Gets the value of the 'externalId' field.
   * @return The value of the 'externalId' field.
   */
  public java.lang.String getExternalId() {
    return externalId;
  }


  /**
   * Sets the value of the 'externalId' field.
   * @param value the value to set.
   */
  public void setExternalId(java.lang.String value) {
    this.externalId = value;
  }

  /**
   * Gets the value of the 'groupId' field.
   * @return The value of the 'groupId' field.
   */
  public java.lang.Long getGroupId() {
    return groupId;
  }


  /**
   * Sets the value of the 'groupId' field.
   * @param value the value to set.
   */
  public void setGroupId(java.lang.Long value) {
    this.groupId = value;
  }

  /**
   * Gets the value of the 'groupName' field.
   * @return The value of the 'groupName' field.
   */
  public java.lang.String getGroupName() {
    return groupName;
  }


  /**
   * Sets the value of the 'groupName' field.
   * @param value the value to set.
   */
  public void setGroupName(java.lang.String value) {
    this.groupName = value;
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return The value of the 'clientId' field.
   */
  public java.lang.Long getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.Long value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'clientName' field.
   * @return The value of the 'clientName' field.
   */
  public java.lang.String getClientName() {
    return clientName;
  }


  /**
   * Sets the value of the 'clientName' field.
   * @param value the value to set.
   */
  public void setClientName(java.lang.String value) {
    this.clientName = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.Long getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.Long value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.String getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.String value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'fieldOfficerId' field.
   * @return The value of the 'fieldOfficerId' field.
   */
  public java.lang.Long getFieldOfficerId() {
    return fieldOfficerId;
  }


  /**
   * Sets the value of the 'fieldOfficerId' field.
   * @param value the value to set.
   */
  public void setFieldOfficerId(java.lang.Long value) {
    this.fieldOfficerId = value;
  }

  /**
   * Gets the value of the 'fieldOfficerName' field.
   * @return The value of the 'fieldOfficerName' field.
   */
  public java.lang.String getFieldOfficerName() {
    return fieldOfficerName;
  }


  /**
   * Sets the value of the 'fieldOfficerName' field.
   * @param value the value to set.
   */
  public void setFieldOfficerName(java.lang.String value) {
    this.fieldOfficerName = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'amtForTransfer' field.
   * @return The value of the 'amtForTransfer' field.
   */
  public java.math.BigDecimal getAmtForTransfer() {
    return amtForTransfer;
  }


  /**
   * Sets the value of the 'amtForTransfer' field.
   * @param value the value to set.
   */
  public void setAmtForTransfer(java.math.BigDecimal value) {
    this.amtForTransfer = value;
  }

  /**
   * Creates a new PortfolioAccountDataV1 RecordBuilder.
   * @return A new PortfolioAccountDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder();
  }

  /**
   * Creates a new PortfolioAccountDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PortfolioAccountDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder newBuilder(org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder(other);
    }
  }

  /**
   * Creates a new PortfolioAccountDataV1 RecordBuilder by copying an existing PortfolioAccountDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new PortfolioAccountDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder newBuilder(org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for PortfolioAccountDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PortfolioAccountDataV1>
    implements org.apache.avro.data.RecordBuilder<PortfolioAccountDataV1> {

    private java.lang.Long id;
    private java.lang.String accountNo;
    private java.lang.String externalId;
    private java.lang.Long groupId;
    private java.lang.String groupName;
    private java.lang.Long clientId;
    private java.lang.String clientName;
    private java.lang.Long productId;
    private java.lang.String productName;
    private java.lang.Long fieldOfficerId;
    private java.lang.String fieldOfficerName;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder currencyBuilder;
    private java.math.BigDecimal amtForTransfer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountNo)) {
        this.accountNo = data().deepCopy(fields()[1].schema(), other.accountNo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.externalId)) {
        this.externalId = data().deepCopy(fields()[2].schema(), other.externalId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.groupId)) {
        this.groupId = data().deepCopy(fields()[3].schema(), other.groupId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.groupName)) {
        this.groupName = data().deepCopy(fields()[4].schema(), other.groupName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.clientId)) {
        this.clientId = data().deepCopy(fields()[5].schema(), other.clientId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.clientName)) {
        this.clientName = data().deepCopy(fields()[6].schema(), other.clientName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.productId)) {
        this.productId = data().deepCopy(fields()[7].schema(), other.productId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.productName)) {
        this.productName = data().deepCopy(fields()[8].schema(), other.productName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.fieldOfficerId)) {
        this.fieldOfficerId = data().deepCopy(fields()[9].schema(), other.fieldOfficerId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.fieldOfficerName)) {
        this.fieldOfficerName = data().deepCopy(fields()[10].schema(), other.fieldOfficerName);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.currency)) {
        this.currency = data().deepCopy(fields()[11].schema(), other.currency);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasCurrencyBuilder()) {
        this.currencyBuilder = org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(other.getCurrencyBuilder());
      }
      if (isValidValue(fields()[12], other.amtForTransfer)) {
        this.amtForTransfer = data().deepCopy(fields()[12].schema(), other.amtForTransfer);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing PortfolioAccountDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountNo)) {
        this.accountNo = data().deepCopy(fields()[1].schema(), other.accountNo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalId)) {
        this.externalId = data().deepCopy(fields()[2].schema(), other.externalId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.groupId)) {
        this.groupId = data().deepCopy(fields()[3].schema(), other.groupId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.groupName)) {
        this.groupName = data().deepCopy(fields()[4].schema(), other.groupName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.clientId)) {
        this.clientId = data().deepCopy(fields()[5].schema(), other.clientId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clientName)) {
        this.clientName = data().deepCopy(fields()[6].schema(), other.clientName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.productId)) {
        this.productId = data().deepCopy(fields()[7].schema(), other.productId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.productName)) {
        this.productName = data().deepCopy(fields()[8].schema(), other.productName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.fieldOfficerId)) {
        this.fieldOfficerId = data().deepCopy(fields()[9].schema(), other.fieldOfficerId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.fieldOfficerName)) {
        this.fieldOfficerName = data().deepCopy(fields()[10].schema(), other.fieldOfficerName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.currency)) {
        this.currency = data().deepCopy(fields()[11].schema(), other.currency);
        fieldSetFlags()[11] = true;
      }
      this.currencyBuilder = null;
      if (isValidValue(fields()[12], other.amtForTransfer)) {
        this.amtForTransfer = data().deepCopy(fields()[12].schema(), other.amtForTransfer);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNo' field.
      * @return The value.
      */
    public java.lang.String getAccountNo() {
      return accountNo;
    }


    /**
      * Sets the value of the 'accountNo' field.
      * @param value The value of 'accountNo'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setAccountNo(java.lang.String value) {
      validate(fields()[1], value);
      this.accountNo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNo' field has been set.
      * @return True if the 'accountNo' field has been set, false otherwise.
      */
    public boolean hasAccountNo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountNo' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearAccountNo() {
      accountNo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalId' field.
      * @return The value.
      */
    public java.lang.String getExternalId() {
      return externalId;
    }


    /**
      * Sets the value of the 'externalId' field.
      * @param value The value of 'externalId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setExternalId(java.lang.String value) {
      validate(fields()[2], value);
      this.externalId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'externalId' field has been set.
      * @return True if the 'externalId' field has been set, false otherwise.
      */
    public boolean hasExternalId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'externalId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearExternalId() {
      externalId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupId' field.
      * @return The value.
      */
    public java.lang.Long getGroupId() {
      return groupId;
    }


    /**
      * Sets the value of the 'groupId' field.
      * @param value The value of 'groupId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setGroupId(java.lang.Long value) {
      validate(fields()[3], value);
      this.groupId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'groupId' field has been set.
      * @return True if the 'groupId' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'groupId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearGroupId() {
      groupId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupName' field.
      * @return The value.
      */
    public java.lang.String getGroupName() {
      return groupName;
    }


    /**
      * Sets the value of the 'groupName' field.
      * @param value The value of 'groupName'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setGroupName(java.lang.String value) {
      validate(fields()[4], value);
      this.groupName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'groupName' field has been set.
      * @return True if the 'groupName' field has been set, false otherwise.
      */
    public boolean hasGroupName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'groupName' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearGroupName() {
      groupName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.Long getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setClientId(java.lang.Long value) {
      validate(fields()[5], value);
      this.clientId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientName' field.
      * @return The value.
      */
    public java.lang.String getClientName() {
      return clientName;
    }


    /**
      * Sets the value of the 'clientName' field.
      * @param value The value of 'clientName'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setClientName(java.lang.String value) {
      validate(fields()[6], value);
      this.clientName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'clientName' field has been set.
      * @return True if the 'clientName' field has been set, false otherwise.
      */
    public boolean hasClientName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'clientName' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearClientName() {
      clientName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.Long getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setProductId(java.lang.Long value) {
      validate(fields()[7], value);
      this.productId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.String getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setProductName(java.lang.String value) {
      validate(fields()[8], value);
      this.productName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldOfficerId' field.
      * @return The value.
      */
    public java.lang.Long getFieldOfficerId() {
      return fieldOfficerId;
    }


    /**
      * Sets the value of the 'fieldOfficerId' field.
      * @param value The value of 'fieldOfficerId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setFieldOfficerId(java.lang.Long value) {
      validate(fields()[9], value);
      this.fieldOfficerId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldOfficerId' field has been set.
      * @return True if the 'fieldOfficerId' field has been set, false otherwise.
      */
    public boolean hasFieldOfficerId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'fieldOfficerId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearFieldOfficerId() {
      fieldOfficerId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldOfficerName' field.
      * @return The value.
      */
    public java.lang.String getFieldOfficerName() {
      return fieldOfficerName;
    }


    /**
      * Sets the value of the 'fieldOfficerName' field.
      * @param value The value of 'fieldOfficerName'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setFieldOfficerName(java.lang.String value) {
      validate(fields()[10], value);
      this.fieldOfficerName = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldOfficerName' field has been set.
      * @return True if the 'fieldOfficerName' field has been set, false otherwise.
      */
    public boolean hasFieldOfficerName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'fieldOfficerName' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearFieldOfficerName() {
      fieldOfficerName = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
      validate(fields()[11], value);
      this.currencyBuilder = null;
      this.currency = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'currency' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder getCurrencyBuilder() {
      if (currencyBuilder == null) {
        if (hasCurrency()) {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(currency));
        } else {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder());
        }
      }
      return currencyBuilder;
    }

    /**
     * Sets the Builder instance for the 'currency' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder value) {
      clearCurrency();
      currencyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currency' field has an active Builder instance
     * @return True if the 'currency' field has an active Builder instance
     */
    public boolean hasCurrencyBuilder() {
      return currencyBuilder != null;
    }

    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearCurrency() {
      currency = null;
      currencyBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'amtForTransfer' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmtForTransfer() {
      return amtForTransfer;
    }


    /**
      * Sets the value of the 'amtForTransfer' field.
      * @param value The value of 'amtForTransfer'.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder setAmtForTransfer(java.math.BigDecimal value) {
      validate(fields()[12], value);
      this.amtForTransfer = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'amtForTransfer' field has been set.
      * @return True if the 'amtForTransfer' field has been set, false otherwise.
      */
    public boolean hasAmtForTransfer() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'amtForTransfer' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.portfolio.v1.PortfolioAccountDataV1.Builder clearAmtForTransfer() {
      amtForTransfer = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PortfolioAccountDataV1 build() {
      try {
        PortfolioAccountDataV1 record = new PortfolioAccountDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.accountNo = fieldSetFlags()[1] ? this.accountNo : (java.lang.String) defaultValue(fields()[1]);
        record.externalId = fieldSetFlags()[2] ? this.externalId : (java.lang.String) defaultValue(fields()[2]);
        record.groupId = fieldSetFlags()[3] ? this.groupId : (java.lang.Long) defaultValue(fields()[3]);
        record.groupName = fieldSetFlags()[4] ? this.groupName : (java.lang.String) defaultValue(fields()[4]);
        record.clientId = fieldSetFlags()[5] ? this.clientId : (java.lang.Long) defaultValue(fields()[5]);
        record.clientName = fieldSetFlags()[6] ? this.clientName : (java.lang.String) defaultValue(fields()[6]);
        record.productId = fieldSetFlags()[7] ? this.productId : (java.lang.Long) defaultValue(fields()[7]);
        record.productName = fieldSetFlags()[8] ? this.productName : (java.lang.String) defaultValue(fields()[8]);
        record.fieldOfficerId = fieldSetFlags()[9] ? this.fieldOfficerId : (java.lang.Long) defaultValue(fields()[9]);
        record.fieldOfficerName = fieldSetFlags()[10] ? this.fieldOfficerName : (java.lang.String) defaultValue(fields()[10]);
        if (currencyBuilder != null) {
          try {
            record.currency = this.currencyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currency"));
            throw e;
          }
        } else {
          record.currency = fieldSetFlags()[11] ? this.currency : (org.apache.fineract.avro.generic.v1.CurrencyDataV1) defaultValue(fields()[11]);
        }
        record.amtForTransfer = fieldSetFlags()[12] ? this.amtForTransfer : (java.math.BigDecimal) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PortfolioAccountDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<PortfolioAccountDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PortfolioAccountDataV1>
    READER$ = (org.apache.avro.io.DatumReader<PortfolioAccountDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










