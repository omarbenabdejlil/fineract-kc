/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanSummaryDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -215711703055067531L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanSummaryDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CurrencyDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalPlaces\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"inMultiplesOf\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"displaySymbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nameCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"displayLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"principalDisbursed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalAdjustments\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalPaid\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalWrittenOff\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"principalOverdue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestCharged\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestPaid\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestWaived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestWrittenOff\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"interestOverdue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesCharged\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesDueAtDisbursementCharged\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesPaid\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesWaived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesWrittenOff\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"feeChargesOverdue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesCharged\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesPaid\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesWaived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesWrittenOff\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"penaltyChargesOverdue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalExpectedRepayment\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalRepayment\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalExpectedCostOfLoan\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalCostOfLoan\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalWaived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalWrittenOff\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalOverdue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalRecovered\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"overdueSinceDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"writeoffReasonId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"writeoffReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"totalMerchantRefund\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalMerchantRefundReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalPayoutRefund\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalPayoutRefundReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalGoodwillCredit\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalGoodwillCreditReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalChargeAdjustment\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalChargeAdjustmentReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalChargeback\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalCreditBalanceRefund\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalCreditBalanceRefundReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalRepaymentTransaction\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"totalRepaymentTransactionReversed\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"chargeOffReasonId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"chargeOffReason\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanSummaryDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanSummaryDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanSummaryDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanSummaryDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanSummaryDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanSummaryDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanSummaryDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanSummaryDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanSummaryDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
  private java.math.BigDecimal principalDisbursed;
  private java.math.BigDecimal principalAdjustments;
  private java.math.BigDecimal principalPaid;
  private java.math.BigDecimal principalWrittenOff;
  private java.math.BigDecimal principalOutstanding;
  private java.math.BigDecimal principalOverdue;
  private java.math.BigDecimal interestCharged;
  private java.math.BigDecimal interestPaid;
  private java.math.BigDecimal interestWaived;
  private java.math.BigDecimal interestWrittenOff;
  private java.math.BigDecimal interestOutstanding;
  private java.math.BigDecimal interestOverdue;
  private java.math.BigDecimal feeChargesCharged;
  private java.math.BigDecimal feeChargesDueAtDisbursementCharged;
  private java.math.BigDecimal feeChargesPaid;
  private java.math.BigDecimal feeChargesWaived;
  private java.math.BigDecimal feeChargesWrittenOff;
  private java.math.BigDecimal feeChargesOutstanding;
  private java.math.BigDecimal feeChargesOverdue;
  private java.math.BigDecimal penaltyChargesCharged;
  private java.math.BigDecimal penaltyChargesPaid;
  private java.math.BigDecimal penaltyChargesWaived;
  private java.math.BigDecimal penaltyChargesWrittenOff;
  private java.math.BigDecimal penaltyChargesOutstanding;
  private java.math.BigDecimal penaltyChargesOverdue;
  private java.math.BigDecimal totalExpectedRepayment;
  private java.math.BigDecimal totalRepayment;
  private java.math.BigDecimal totalExpectedCostOfLoan;
  private java.math.BigDecimal totalCostOfLoan;
  private java.math.BigDecimal totalWaived;
  private java.math.BigDecimal totalWrittenOff;
  private java.math.BigDecimal totalOutstanding;
  private java.math.BigDecimal totalOverdue;
  private java.math.BigDecimal totalRecovered;
  private java.lang.String overdueSinceDate;
  private java.lang.Long writeoffReasonId;
  private java.lang.String writeoffReason;
  private java.math.BigDecimal totalMerchantRefund;
  private java.math.BigDecimal totalMerchantRefundReversed;
  private java.math.BigDecimal totalPayoutRefund;
  private java.math.BigDecimal totalPayoutRefundReversed;
  private java.math.BigDecimal totalGoodwillCredit;
  private java.math.BigDecimal totalGoodwillCreditReversed;
  private java.math.BigDecimal totalChargeAdjustment;
  private java.math.BigDecimal totalChargeAdjustmentReversed;
  private java.math.BigDecimal totalChargeback;
  private java.math.BigDecimal totalCreditBalanceRefund;
  private java.math.BigDecimal totalCreditBalanceRefundReversed;
  private java.math.BigDecimal totalRepaymentTransaction;
  private java.math.BigDecimal totalRepaymentTransactionReversed;
  private java.lang.Long chargeOffReasonId;
  private java.lang.String chargeOffReason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanSummaryDataV1() {}

  /**
   * All-args constructor.
   * @param currency The new value for currency
   * @param principalDisbursed The new value for principalDisbursed
   * @param principalAdjustments The new value for principalAdjustments
   * @param principalPaid The new value for principalPaid
   * @param principalWrittenOff The new value for principalWrittenOff
   * @param principalOutstanding The new value for principalOutstanding
   * @param principalOverdue The new value for principalOverdue
   * @param interestCharged The new value for interestCharged
   * @param interestPaid The new value for interestPaid
   * @param interestWaived The new value for interestWaived
   * @param interestWrittenOff The new value for interestWrittenOff
   * @param interestOutstanding The new value for interestOutstanding
   * @param interestOverdue The new value for interestOverdue
   * @param feeChargesCharged The new value for feeChargesCharged
   * @param feeChargesDueAtDisbursementCharged The new value for feeChargesDueAtDisbursementCharged
   * @param feeChargesPaid The new value for feeChargesPaid
   * @param feeChargesWaived The new value for feeChargesWaived
   * @param feeChargesWrittenOff The new value for feeChargesWrittenOff
   * @param feeChargesOutstanding The new value for feeChargesOutstanding
   * @param feeChargesOverdue The new value for feeChargesOverdue
   * @param penaltyChargesCharged The new value for penaltyChargesCharged
   * @param penaltyChargesPaid The new value for penaltyChargesPaid
   * @param penaltyChargesWaived The new value for penaltyChargesWaived
   * @param penaltyChargesWrittenOff The new value for penaltyChargesWrittenOff
   * @param penaltyChargesOutstanding The new value for penaltyChargesOutstanding
   * @param penaltyChargesOverdue The new value for penaltyChargesOverdue
   * @param totalExpectedRepayment The new value for totalExpectedRepayment
   * @param totalRepayment The new value for totalRepayment
   * @param totalExpectedCostOfLoan The new value for totalExpectedCostOfLoan
   * @param totalCostOfLoan The new value for totalCostOfLoan
   * @param totalWaived The new value for totalWaived
   * @param totalWrittenOff The new value for totalWrittenOff
   * @param totalOutstanding The new value for totalOutstanding
   * @param totalOverdue The new value for totalOverdue
   * @param totalRecovered The new value for totalRecovered
   * @param overdueSinceDate The new value for overdueSinceDate
   * @param writeoffReasonId The new value for writeoffReasonId
   * @param writeoffReason The new value for writeoffReason
   * @param totalMerchantRefund The new value for totalMerchantRefund
   * @param totalMerchantRefundReversed The new value for totalMerchantRefundReversed
   * @param totalPayoutRefund The new value for totalPayoutRefund
   * @param totalPayoutRefundReversed The new value for totalPayoutRefundReversed
   * @param totalGoodwillCredit The new value for totalGoodwillCredit
   * @param totalGoodwillCreditReversed The new value for totalGoodwillCreditReversed
   * @param totalChargeAdjustment The new value for totalChargeAdjustment
   * @param totalChargeAdjustmentReversed The new value for totalChargeAdjustmentReversed
   * @param totalChargeback The new value for totalChargeback
   * @param totalCreditBalanceRefund The new value for totalCreditBalanceRefund
   * @param totalCreditBalanceRefundReversed The new value for totalCreditBalanceRefundReversed
   * @param totalRepaymentTransaction The new value for totalRepaymentTransaction
   * @param totalRepaymentTransactionReversed The new value for totalRepaymentTransactionReversed
   * @param chargeOffReasonId The new value for chargeOffReasonId
   * @param chargeOffReason The new value for chargeOffReason
   */
  public LoanSummaryDataV1(org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency, java.math.BigDecimal principalDisbursed, java.math.BigDecimal principalAdjustments, java.math.BigDecimal principalPaid, java.math.BigDecimal principalWrittenOff, java.math.BigDecimal principalOutstanding, java.math.BigDecimal principalOverdue, java.math.BigDecimal interestCharged, java.math.BigDecimal interestPaid, java.math.BigDecimal interestWaived, java.math.BigDecimal interestWrittenOff, java.math.BigDecimal interestOutstanding, java.math.BigDecimal interestOverdue, java.math.BigDecimal feeChargesCharged, java.math.BigDecimal feeChargesDueAtDisbursementCharged, java.math.BigDecimal feeChargesPaid, java.math.BigDecimal feeChargesWaived, java.math.BigDecimal feeChargesWrittenOff, java.math.BigDecimal feeChargesOutstanding, java.math.BigDecimal feeChargesOverdue, java.math.BigDecimal penaltyChargesCharged, java.math.BigDecimal penaltyChargesPaid, java.math.BigDecimal penaltyChargesWaived, java.math.BigDecimal penaltyChargesWrittenOff, java.math.BigDecimal penaltyChargesOutstanding, java.math.BigDecimal penaltyChargesOverdue, java.math.BigDecimal totalExpectedRepayment, java.math.BigDecimal totalRepayment, java.math.BigDecimal totalExpectedCostOfLoan, java.math.BigDecimal totalCostOfLoan, java.math.BigDecimal totalWaived, java.math.BigDecimal totalWrittenOff, java.math.BigDecimal totalOutstanding, java.math.BigDecimal totalOverdue, java.math.BigDecimal totalRecovered, java.lang.String overdueSinceDate, java.lang.Long writeoffReasonId, java.lang.String writeoffReason, java.math.BigDecimal totalMerchantRefund, java.math.BigDecimal totalMerchantRefundReversed, java.math.BigDecimal totalPayoutRefund, java.math.BigDecimal totalPayoutRefundReversed, java.math.BigDecimal totalGoodwillCredit, java.math.BigDecimal totalGoodwillCreditReversed, java.math.BigDecimal totalChargeAdjustment, java.math.BigDecimal totalChargeAdjustmentReversed, java.math.BigDecimal totalChargeback, java.math.BigDecimal totalCreditBalanceRefund, java.math.BigDecimal totalCreditBalanceRefundReversed, java.math.BigDecimal totalRepaymentTransaction, java.math.BigDecimal totalRepaymentTransactionReversed, java.lang.Long chargeOffReasonId, java.lang.String chargeOffReason) {
    this.currency = currency;
    this.principalDisbursed = principalDisbursed;
    this.principalAdjustments = principalAdjustments;
    this.principalPaid = principalPaid;
    this.principalWrittenOff = principalWrittenOff;
    this.principalOutstanding = principalOutstanding;
    this.principalOverdue = principalOverdue;
    this.interestCharged = interestCharged;
    this.interestPaid = interestPaid;
    this.interestWaived = interestWaived;
    this.interestWrittenOff = interestWrittenOff;
    this.interestOutstanding = interestOutstanding;
    this.interestOverdue = interestOverdue;
    this.feeChargesCharged = feeChargesCharged;
    this.feeChargesDueAtDisbursementCharged = feeChargesDueAtDisbursementCharged;
    this.feeChargesPaid = feeChargesPaid;
    this.feeChargesWaived = feeChargesWaived;
    this.feeChargesWrittenOff = feeChargesWrittenOff;
    this.feeChargesOutstanding = feeChargesOutstanding;
    this.feeChargesOverdue = feeChargesOverdue;
    this.penaltyChargesCharged = penaltyChargesCharged;
    this.penaltyChargesPaid = penaltyChargesPaid;
    this.penaltyChargesWaived = penaltyChargesWaived;
    this.penaltyChargesWrittenOff = penaltyChargesWrittenOff;
    this.penaltyChargesOutstanding = penaltyChargesOutstanding;
    this.penaltyChargesOverdue = penaltyChargesOverdue;
    this.totalExpectedRepayment = totalExpectedRepayment;
    this.totalRepayment = totalRepayment;
    this.totalExpectedCostOfLoan = totalExpectedCostOfLoan;
    this.totalCostOfLoan = totalCostOfLoan;
    this.totalWaived = totalWaived;
    this.totalWrittenOff = totalWrittenOff;
    this.totalOutstanding = totalOutstanding;
    this.totalOverdue = totalOverdue;
    this.totalRecovered = totalRecovered;
    this.overdueSinceDate = overdueSinceDate;
    this.writeoffReasonId = writeoffReasonId;
    this.writeoffReason = writeoffReason;
    this.totalMerchantRefund = totalMerchantRefund;
    this.totalMerchantRefundReversed = totalMerchantRefundReversed;
    this.totalPayoutRefund = totalPayoutRefund;
    this.totalPayoutRefundReversed = totalPayoutRefundReversed;
    this.totalGoodwillCredit = totalGoodwillCredit;
    this.totalGoodwillCreditReversed = totalGoodwillCreditReversed;
    this.totalChargeAdjustment = totalChargeAdjustment;
    this.totalChargeAdjustmentReversed = totalChargeAdjustmentReversed;
    this.totalChargeback = totalChargeback;
    this.totalCreditBalanceRefund = totalCreditBalanceRefund;
    this.totalCreditBalanceRefundReversed = totalCreditBalanceRefundReversed;
    this.totalRepaymentTransaction = totalRepaymentTransaction;
    this.totalRepaymentTransactionReversed = totalRepaymentTransactionReversed;
    this.chargeOffReasonId = chargeOffReasonId;
    this.chargeOffReason = chargeOffReason;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currency;
    case 1: return principalDisbursed;
    case 2: return principalAdjustments;
    case 3: return principalPaid;
    case 4: return principalWrittenOff;
    case 5: return principalOutstanding;
    case 6: return principalOverdue;
    case 7: return interestCharged;
    case 8: return interestPaid;
    case 9: return interestWaived;
    case 10: return interestWrittenOff;
    case 11: return interestOutstanding;
    case 12: return interestOverdue;
    case 13: return feeChargesCharged;
    case 14: return feeChargesDueAtDisbursementCharged;
    case 15: return feeChargesPaid;
    case 16: return feeChargesWaived;
    case 17: return feeChargesWrittenOff;
    case 18: return feeChargesOutstanding;
    case 19: return feeChargesOverdue;
    case 20: return penaltyChargesCharged;
    case 21: return penaltyChargesPaid;
    case 22: return penaltyChargesWaived;
    case 23: return penaltyChargesWrittenOff;
    case 24: return penaltyChargesOutstanding;
    case 25: return penaltyChargesOverdue;
    case 26: return totalExpectedRepayment;
    case 27: return totalRepayment;
    case 28: return totalExpectedCostOfLoan;
    case 29: return totalCostOfLoan;
    case 30: return totalWaived;
    case 31: return totalWrittenOff;
    case 32: return totalOutstanding;
    case 33: return totalOverdue;
    case 34: return totalRecovered;
    case 35: return overdueSinceDate;
    case 36: return writeoffReasonId;
    case 37: return writeoffReason;
    case 38: return totalMerchantRefund;
    case 39: return totalMerchantRefundReversed;
    case 40: return totalPayoutRefund;
    case 41: return totalPayoutRefundReversed;
    case 42: return totalGoodwillCredit;
    case 43: return totalGoodwillCreditReversed;
    case 44: return totalChargeAdjustment;
    case 45: return totalChargeAdjustmentReversed;
    case 46: return totalChargeback;
    case 47: return totalCreditBalanceRefund;
    case 48: return totalCreditBalanceRefundReversed;
    case 49: return totalRepaymentTransaction;
    case 50: return totalRepaymentTransactionReversed;
    case 51: return chargeOffReasonId;
    case 52: return chargeOffReason;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currency = (org.apache.fineract.avro.generic.v1.CurrencyDataV1)value$; break;
    case 1: principalDisbursed = (java.math.BigDecimal)value$; break;
    case 2: principalAdjustments = (java.math.BigDecimal)value$; break;
    case 3: principalPaid = (java.math.BigDecimal)value$; break;
    case 4: principalWrittenOff = (java.math.BigDecimal)value$; break;
    case 5: principalOutstanding = (java.math.BigDecimal)value$; break;
    case 6: principalOverdue = (java.math.BigDecimal)value$; break;
    case 7: interestCharged = (java.math.BigDecimal)value$; break;
    case 8: interestPaid = (java.math.BigDecimal)value$; break;
    case 9: interestWaived = (java.math.BigDecimal)value$; break;
    case 10: interestWrittenOff = (java.math.BigDecimal)value$; break;
    case 11: interestOutstanding = (java.math.BigDecimal)value$; break;
    case 12: interestOverdue = (java.math.BigDecimal)value$; break;
    case 13: feeChargesCharged = (java.math.BigDecimal)value$; break;
    case 14: feeChargesDueAtDisbursementCharged = (java.math.BigDecimal)value$; break;
    case 15: feeChargesPaid = (java.math.BigDecimal)value$; break;
    case 16: feeChargesWaived = (java.math.BigDecimal)value$; break;
    case 17: feeChargesWrittenOff = (java.math.BigDecimal)value$; break;
    case 18: feeChargesOutstanding = (java.math.BigDecimal)value$; break;
    case 19: feeChargesOverdue = (java.math.BigDecimal)value$; break;
    case 20: penaltyChargesCharged = (java.math.BigDecimal)value$; break;
    case 21: penaltyChargesPaid = (java.math.BigDecimal)value$; break;
    case 22: penaltyChargesWaived = (java.math.BigDecimal)value$; break;
    case 23: penaltyChargesWrittenOff = (java.math.BigDecimal)value$; break;
    case 24: penaltyChargesOutstanding = (java.math.BigDecimal)value$; break;
    case 25: penaltyChargesOverdue = (java.math.BigDecimal)value$; break;
    case 26: totalExpectedRepayment = (java.math.BigDecimal)value$; break;
    case 27: totalRepayment = (java.math.BigDecimal)value$; break;
    case 28: totalExpectedCostOfLoan = (java.math.BigDecimal)value$; break;
    case 29: totalCostOfLoan = (java.math.BigDecimal)value$; break;
    case 30: totalWaived = (java.math.BigDecimal)value$; break;
    case 31: totalWrittenOff = (java.math.BigDecimal)value$; break;
    case 32: totalOutstanding = (java.math.BigDecimal)value$; break;
    case 33: totalOverdue = (java.math.BigDecimal)value$; break;
    case 34: totalRecovered = (java.math.BigDecimal)value$; break;
    case 35: overdueSinceDate = value$ != null ? value$.toString() : null; break;
    case 36: writeoffReasonId = (java.lang.Long)value$; break;
    case 37: writeoffReason = value$ != null ? value$.toString() : null; break;
    case 38: totalMerchantRefund = (java.math.BigDecimal)value$; break;
    case 39: totalMerchantRefundReversed = (java.math.BigDecimal)value$; break;
    case 40: totalPayoutRefund = (java.math.BigDecimal)value$; break;
    case 41: totalPayoutRefundReversed = (java.math.BigDecimal)value$; break;
    case 42: totalGoodwillCredit = (java.math.BigDecimal)value$; break;
    case 43: totalGoodwillCreditReversed = (java.math.BigDecimal)value$; break;
    case 44: totalChargeAdjustment = (java.math.BigDecimal)value$; break;
    case 45: totalChargeAdjustmentReversed = (java.math.BigDecimal)value$; break;
    case 46: totalChargeback = (java.math.BigDecimal)value$; break;
    case 47: totalCreditBalanceRefund = (java.math.BigDecimal)value$; break;
    case 48: totalCreditBalanceRefundReversed = (java.math.BigDecimal)value$; break;
    case 49: totalRepaymentTransaction = (java.math.BigDecimal)value$; break;
    case 50: totalRepaymentTransactionReversed = (java.math.BigDecimal)value$; break;
    case 51: chargeOffReasonId = (java.lang.Long)value$; break;
    case 52: chargeOffReason = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'principalDisbursed' field.
   * @return The value of the 'principalDisbursed' field.
   */
  public java.math.BigDecimal getPrincipalDisbursed() {
    return principalDisbursed;
  }


  /**
   * Sets the value of the 'principalDisbursed' field.
   * @param value the value to set.
   */
  public void setPrincipalDisbursed(java.math.BigDecimal value) {
    this.principalDisbursed = value;
  }

  /**
   * Gets the value of the 'principalAdjustments' field.
   * @return The value of the 'principalAdjustments' field.
   */
  public java.math.BigDecimal getPrincipalAdjustments() {
    return principalAdjustments;
  }


  /**
   * Sets the value of the 'principalAdjustments' field.
   * @param value the value to set.
   */
  public void setPrincipalAdjustments(java.math.BigDecimal value) {
    this.principalAdjustments = value;
  }

  /**
   * Gets the value of the 'principalPaid' field.
   * @return The value of the 'principalPaid' field.
   */
  public java.math.BigDecimal getPrincipalPaid() {
    return principalPaid;
  }


  /**
   * Sets the value of the 'principalPaid' field.
   * @param value the value to set.
   */
  public void setPrincipalPaid(java.math.BigDecimal value) {
    this.principalPaid = value;
  }

  /**
   * Gets the value of the 'principalWrittenOff' field.
   * @return The value of the 'principalWrittenOff' field.
   */
  public java.math.BigDecimal getPrincipalWrittenOff() {
    return principalWrittenOff;
  }


  /**
   * Sets the value of the 'principalWrittenOff' field.
   * @param value the value to set.
   */
  public void setPrincipalWrittenOff(java.math.BigDecimal value) {
    this.principalWrittenOff = value;
  }

  /**
   * Gets the value of the 'principalOutstanding' field.
   * @return The value of the 'principalOutstanding' field.
   */
  public java.math.BigDecimal getPrincipalOutstanding() {
    return principalOutstanding;
  }


  /**
   * Sets the value of the 'principalOutstanding' field.
   * @param value the value to set.
   */
  public void setPrincipalOutstanding(java.math.BigDecimal value) {
    this.principalOutstanding = value;
  }

  /**
   * Gets the value of the 'principalOverdue' field.
   * @return The value of the 'principalOverdue' field.
   */
  public java.math.BigDecimal getPrincipalOverdue() {
    return principalOverdue;
  }


  /**
   * Sets the value of the 'principalOverdue' field.
   * @param value the value to set.
   */
  public void setPrincipalOverdue(java.math.BigDecimal value) {
    this.principalOverdue = value;
  }

  /**
   * Gets the value of the 'interestCharged' field.
   * @return The value of the 'interestCharged' field.
   */
  public java.math.BigDecimal getInterestCharged() {
    return interestCharged;
  }


  /**
   * Sets the value of the 'interestCharged' field.
   * @param value the value to set.
   */
  public void setInterestCharged(java.math.BigDecimal value) {
    this.interestCharged = value;
  }

  /**
   * Gets the value of the 'interestPaid' field.
   * @return The value of the 'interestPaid' field.
   */
  public java.math.BigDecimal getInterestPaid() {
    return interestPaid;
  }


  /**
   * Sets the value of the 'interestPaid' field.
   * @param value the value to set.
   */
  public void setInterestPaid(java.math.BigDecimal value) {
    this.interestPaid = value;
  }

  /**
   * Gets the value of the 'interestWaived' field.
   * @return The value of the 'interestWaived' field.
   */
  public java.math.BigDecimal getInterestWaived() {
    return interestWaived;
  }


  /**
   * Sets the value of the 'interestWaived' field.
   * @param value the value to set.
   */
  public void setInterestWaived(java.math.BigDecimal value) {
    this.interestWaived = value;
  }

  /**
   * Gets the value of the 'interestWrittenOff' field.
   * @return The value of the 'interestWrittenOff' field.
   */
  public java.math.BigDecimal getInterestWrittenOff() {
    return interestWrittenOff;
  }


  /**
   * Sets the value of the 'interestWrittenOff' field.
   * @param value the value to set.
   */
  public void setInterestWrittenOff(java.math.BigDecimal value) {
    this.interestWrittenOff = value;
  }

  /**
   * Gets the value of the 'interestOutstanding' field.
   * @return The value of the 'interestOutstanding' field.
   */
  public java.math.BigDecimal getInterestOutstanding() {
    return interestOutstanding;
  }


  /**
   * Sets the value of the 'interestOutstanding' field.
   * @param value the value to set.
   */
  public void setInterestOutstanding(java.math.BigDecimal value) {
    this.interestOutstanding = value;
  }

  /**
   * Gets the value of the 'interestOverdue' field.
   * @return The value of the 'interestOverdue' field.
   */
  public java.math.BigDecimal getInterestOverdue() {
    return interestOverdue;
  }


  /**
   * Sets the value of the 'interestOverdue' field.
   * @param value the value to set.
   */
  public void setInterestOverdue(java.math.BigDecimal value) {
    this.interestOverdue = value;
  }

  /**
   * Gets the value of the 'feeChargesCharged' field.
   * @return The value of the 'feeChargesCharged' field.
   */
  public java.math.BigDecimal getFeeChargesCharged() {
    return feeChargesCharged;
  }


  /**
   * Sets the value of the 'feeChargesCharged' field.
   * @param value the value to set.
   */
  public void setFeeChargesCharged(java.math.BigDecimal value) {
    this.feeChargesCharged = value;
  }

  /**
   * Gets the value of the 'feeChargesDueAtDisbursementCharged' field.
   * @return The value of the 'feeChargesDueAtDisbursementCharged' field.
   */
  public java.math.BigDecimal getFeeChargesDueAtDisbursementCharged() {
    return feeChargesDueAtDisbursementCharged;
  }


  /**
   * Sets the value of the 'feeChargesDueAtDisbursementCharged' field.
   * @param value the value to set.
   */
  public void setFeeChargesDueAtDisbursementCharged(java.math.BigDecimal value) {
    this.feeChargesDueAtDisbursementCharged = value;
  }

  /**
   * Gets the value of the 'feeChargesPaid' field.
   * @return The value of the 'feeChargesPaid' field.
   */
  public java.math.BigDecimal getFeeChargesPaid() {
    return feeChargesPaid;
  }


  /**
   * Sets the value of the 'feeChargesPaid' field.
   * @param value the value to set.
   */
  public void setFeeChargesPaid(java.math.BigDecimal value) {
    this.feeChargesPaid = value;
  }

  /**
   * Gets the value of the 'feeChargesWaived' field.
   * @return The value of the 'feeChargesWaived' field.
   */
  public java.math.BigDecimal getFeeChargesWaived() {
    return feeChargesWaived;
  }


  /**
   * Sets the value of the 'feeChargesWaived' field.
   * @param value the value to set.
   */
  public void setFeeChargesWaived(java.math.BigDecimal value) {
    this.feeChargesWaived = value;
  }

  /**
   * Gets the value of the 'feeChargesWrittenOff' field.
   * @return The value of the 'feeChargesWrittenOff' field.
   */
  public java.math.BigDecimal getFeeChargesWrittenOff() {
    return feeChargesWrittenOff;
  }


  /**
   * Sets the value of the 'feeChargesWrittenOff' field.
   * @param value the value to set.
   */
  public void setFeeChargesWrittenOff(java.math.BigDecimal value) {
    this.feeChargesWrittenOff = value;
  }

  /**
   * Gets the value of the 'feeChargesOutstanding' field.
   * @return The value of the 'feeChargesOutstanding' field.
   */
  public java.math.BigDecimal getFeeChargesOutstanding() {
    return feeChargesOutstanding;
  }


  /**
   * Sets the value of the 'feeChargesOutstanding' field.
   * @param value the value to set.
   */
  public void setFeeChargesOutstanding(java.math.BigDecimal value) {
    this.feeChargesOutstanding = value;
  }

  /**
   * Gets the value of the 'feeChargesOverdue' field.
   * @return The value of the 'feeChargesOverdue' field.
   */
  public java.math.BigDecimal getFeeChargesOverdue() {
    return feeChargesOverdue;
  }


  /**
   * Sets the value of the 'feeChargesOverdue' field.
   * @param value the value to set.
   */
  public void setFeeChargesOverdue(java.math.BigDecimal value) {
    this.feeChargesOverdue = value;
  }

  /**
   * Gets the value of the 'penaltyChargesCharged' field.
   * @return The value of the 'penaltyChargesCharged' field.
   */
  public java.math.BigDecimal getPenaltyChargesCharged() {
    return penaltyChargesCharged;
  }


  /**
   * Sets the value of the 'penaltyChargesCharged' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesCharged(java.math.BigDecimal value) {
    this.penaltyChargesCharged = value;
  }

  /**
   * Gets the value of the 'penaltyChargesPaid' field.
   * @return The value of the 'penaltyChargesPaid' field.
   */
  public java.math.BigDecimal getPenaltyChargesPaid() {
    return penaltyChargesPaid;
  }


  /**
   * Sets the value of the 'penaltyChargesPaid' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesPaid(java.math.BigDecimal value) {
    this.penaltyChargesPaid = value;
  }

  /**
   * Gets the value of the 'penaltyChargesWaived' field.
   * @return The value of the 'penaltyChargesWaived' field.
   */
  public java.math.BigDecimal getPenaltyChargesWaived() {
    return penaltyChargesWaived;
  }


  /**
   * Sets the value of the 'penaltyChargesWaived' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesWaived(java.math.BigDecimal value) {
    this.penaltyChargesWaived = value;
  }

  /**
   * Gets the value of the 'penaltyChargesWrittenOff' field.
   * @return The value of the 'penaltyChargesWrittenOff' field.
   */
  public java.math.BigDecimal getPenaltyChargesWrittenOff() {
    return penaltyChargesWrittenOff;
  }


  /**
   * Sets the value of the 'penaltyChargesWrittenOff' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesWrittenOff(java.math.BigDecimal value) {
    this.penaltyChargesWrittenOff = value;
  }

  /**
   * Gets the value of the 'penaltyChargesOutstanding' field.
   * @return The value of the 'penaltyChargesOutstanding' field.
   */
  public java.math.BigDecimal getPenaltyChargesOutstanding() {
    return penaltyChargesOutstanding;
  }


  /**
   * Sets the value of the 'penaltyChargesOutstanding' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesOutstanding(java.math.BigDecimal value) {
    this.penaltyChargesOutstanding = value;
  }

  /**
   * Gets the value of the 'penaltyChargesOverdue' field.
   * @return The value of the 'penaltyChargesOverdue' field.
   */
  public java.math.BigDecimal getPenaltyChargesOverdue() {
    return penaltyChargesOverdue;
  }


  /**
   * Sets the value of the 'penaltyChargesOverdue' field.
   * @param value the value to set.
   */
  public void setPenaltyChargesOverdue(java.math.BigDecimal value) {
    this.penaltyChargesOverdue = value;
  }

  /**
   * Gets the value of the 'totalExpectedRepayment' field.
   * @return The value of the 'totalExpectedRepayment' field.
   */
  public java.math.BigDecimal getTotalExpectedRepayment() {
    return totalExpectedRepayment;
  }


  /**
   * Sets the value of the 'totalExpectedRepayment' field.
   * @param value the value to set.
   */
  public void setTotalExpectedRepayment(java.math.BigDecimal value) {
    this.totalExpectedRepayment = value;
  }

  /**
   * Gets the value of the 'totalRepayment' field.
   * @return The value of the 'totalRepayment' field.
   */
  public java.math.BigDecimal getTotalRepayment() {
    return totalRepayment;
  }


  /**
   * Sets the value of the 'totalRepayment' field.
   * @param value the value to set.
   */
  public void setTotalRepayment(java.math.BigDecimal value) {
    this.totalRepayment = value;
  }

  /**
   * Gets the value of the 'totalExpectedCostOfLoan' field.
   * @return The value of the 'totalExpectedCostOfLoan' field.
   */
  public java.math.BigDecimal getTotalExpectedCostOfLoan() {
    return totalExpectedCostOfLoan;
  }


  /**
   * Sets the value of the 'totalExpectedCostOfLoan' field.
   * @param value the value to set.
   */
  public void setTotalExpectedCostOfLoan(java.math.BigDecimal value) {
    this.totalExpectedCostOfLoan = value;
  }

  /**
   * Gets the value of the 'totalCostOfLoan' field.
   * @return The value of the 'totalCostOfLoan' field.
   */
  public java.math.BigDecimal getTotalCostOfLoan() {
    return totalCostOfLoan;
  }


  /**
   * Sets the value of the 'totalCostOfLoan' field.
   * @param value the value to set.
   */
  public void setTotalCostOfLoan(java.math.BigDecimal value) {
    this.totalCostOfLoan = value;
  }

  /**
   * Gets the value of the 'totalWaived' field.
   * @return The value of the 'totalWaived' field.
   */
  public java.math.BigDecimal getTotalWaived() {
    return totalWaived;
  }


  /**
   * Sets the value of the 'totalWaived' field.
   * @param value the value to set.
   */
  public void setTotalWaived(java.math.BigDecimal value) {
    this.totalWaived = value;
  }

  /**
   * Gets the value of the 'totalWrittenOff' field.
   * @return The value of the 'totalWrittenOff' field.
   */
  public java.math.BigDecimal getTotalWrittenOff() {
    return totalWrittenOff;
  }


  /**
   * Sets the value of the 'totalWrittenOff' field.
   * @param value the value to set.
   */
  public void setTotalWrittenOff(java.math.BigDecimal value) {
    this.totalWrittenOff = value;
  }

  /**
   * Gets the value of the 'totalOutstanding' field.
   * @return The value of the 'totalOutstanding' field.
   */
  public java.math.BigDecimal getTotalOutstanding() {
    return totalOutstanding;
  }


  /**
   * Sets the value of the 'totalOutstanding' field.
   * @param value the value to set.
   */
  public void setTotalOutstanding(java.math.BigDecimal value) {
    this.totalOutstanding = value;
  }

  /**
   * Gets the value of the 'totalOverdue' field.
   * @return The value of the 'totalOverdue' field.
   */
  public java.math.BigDecimal getTotalOverdue() {
    return totalOverdue;
  }


  /**
   * Sets the value of the 'totalOverdue' field.
   * @param value the value to set.
   */
  public void setTotalOverdue(java.math.BigDecimal value) {
    this.totalOverdue = value;
  }

  /**
   * Gets the value of the 'totalRecovered' field.
   * @return The value of the 'totalRecovered' field.
   */
  public java.math.BigDecimal getTotalRecovered() {
    return totalRecovered;
  }


  /**
   * Sets the value of the 'totalRecovered' field.
   * @param value the value to set.
   */
  public void setTotalRecovered(java.math.BigDecimal value) {
    this.totalRecovered = value;
  }

  /**
   * Gets the value of the 'overdueSinceDate' field.
   * @return The value of the 'overdueSinceDate' field.
   */
  public java.lang.String getOverdueSinceDate() {
    return overdueSinceDate;
  }


  /**
   * Sets the value of the 'overdueSinceDate' field.
   * @param value the value to set.
   */
  public void setOverdueSinceDate(java.lang.String value) {
    this.overdueSinceDate = value;
  }

  /**
   * Gets the value of the 'writeoffReasonId' field.
   * @return The value of the 'writeoffReasonId' field.
   */
  public java.lang.Long getWriteoffReasonId() {
    return writeoffReasonId;
  }


  /**
   * Sets the value of the 'writeoffReasonId' field.
   * @param value the value to set.
   */
  public void setWriteoffReasonId(java.lang.Long value) {
    this.writeoffReasonId = value;
  }

  /**
   * Gets the value of the 'writeoffReason' field.
   * @return The value of the 'writeoffReason' field.
   */
  public java.lang.String getWriteoffReason() {
    return writeoffReason;
  }


  /**
   * Sets the value of the 'writeoffReason' field.
   * @param value the value to set.
   */
  public void setWriteoffReason(java.lang.String value) {
    this.writeoffReason = value;
  }

  /**
   * Gets the value of the 'totalMerchantRefund' field.
   * @return The value of the 'totalMerchantRefund' field.
   */
  public java.math.BigDecimal getTotalMerchantRefund() {
    return totalMerchantRefund;
  }


  /**
   * Sets the value of the 'totalMerchantRefund' field.
   * @param value the value to set.
   */
  public void setTotalMerchantRefund(java.math.BigDecimal value) {
    this.totalMerchantRefund = value;
  }

  /**
   * Gets the value of the 'totalMerchantRefundReversed' field.
   * @return The value of the 'totalMerchantRefundReversed' field.
   */
  public java.math.BigDecimal getTotalMerchantRefundReversed() {
    return totalMerchantRefundReversed;
  }


  /**
   * Sets the value of the 'totalMerchantRefundReversed' field.
   * @param value the value to set.
   */
  public void setTotalMerchantRefundReversed(java.math.BigDecimal value) {
    this.totalMerchantRefundReversed = value;
  }

  /**
   * Gets the value of the 'totalPayoutRefund' field.
   * @return The value of the 'totalPayoutRefund' field.
   */
  public java.math.BigDecimal getTotalPayoutRefund() {
    return totalPayoutRefund;
  }


  /**
   * Sets the value of the 'totalPayoutRefund' field.
   * @param value the value to set.
   */
  public void setTotalPayoutRefund(java.math.BigDecimal value) {
    this.totalPayoutRefund = value;
  }

  /**
   * Gets the value of the 'totalPayoutRefundReversed' field.
   * @return The value of the 'totalPayoutRefundReversed' field.
   */
  public java.math.BigDecimal getTotalPayoutRefundReversed() {
    return totalPayoutRefundReversed;
  }


  /**
   * Sets the value of the 'totalPayoutRefundReversed' field.
   * @param value the value to set.
   */
  public void setTotalPayoutRefundReversed(java.math.BigDecimal value) {
    this.totalPayoutRefundReversed = value;
  }

  /**
   * Gets the value of the 'totalGoodwillCredit' field.
   * @return The value of the 'totalGoodwillCredit' field.
   */
  public java.math.BigDecimal getTotalGoodwillCredit() {
    return totalGoodwillCredit;
  }


  /**
   * Sets the value of the 'totalGoodwillCredit' field.
   * @param value the value to set.
   */
  public void setTotalGoodwillCredit(java.math.BigDecimal value) {
    this.totalGoodwillCredit = value;
  }

  /**
   * Gets the value of the 'totalGoodwillCreditReversed' field.
   * @return The value of the 'totalGoodwillCreditReversed' field.
   */
  public java.math.BigDecimal getTotalGoodwillCreditReversed() {
    return totalGoodwillCreditReversed;
  }


  /**
   * Sets the value of the 'totalGoodwillCreditReversed' field.
   * @param value the value to set.
   */
  public void setTotalGoodwillCreditReversed(java.math.BigDecimal value) {
    this.totalGoodwillCreditReversed = value;
  }

  /**
   * Gets the value of the 'totalChargeAdjustment' field.
   * @return The value of the 'totalChargeAdjustment' field.
   */
  public java.math.BigDecimal getTotalChargeAdjustment() {
    return totalChargeAdjustment;
  }


  /**
   * Sets the value of the 'totalChargeAdjustment' field.
   * @param value the value to set.
   */
  public void setTotalChargeAdjustment(java.math.BigDecimal value) {
    this.totalChargeAdjustment = value;
  }

  /**
   * Gets the value of the 'totalChargeAdjustmentReversed' field.
   * @return The value of the 'totalChargeAdjustmentReversed' field.
   */
  public java.math.BigDecimal getTotalChargeAdjustmentReversed() {
    return totalChargeAdjustmentReversed;
  }


  /**
   * Sets the value of the 'totalChargeAdjustmentReversed' field.
   * @param value the value to set.
   */
  public void setTotalChargeAdjustmentReversed(java.math.BigDecimal value) {
    this.totalChargeAdjustmentReversed = value;
  }

  /**
   * Gets the value of the 'totalChargeback' field.
   * @return The value of the 'totalChargeback' field.
   */
  public java.math.BigDecimal getTotalChargeback() {
    return totalChargeback;
  }


  /**
   * Sets the value of the 'totalChargeback' field.
   * @param value the value to set.
   */
  public void setTotalChargeback(java.math.BigDecimal value) {
    this.totalChargeback = value;
  }

  /**
   * Gets the value of the 'totalCreditBalanceRefund' field.
   * @return The value of the 'totalCreditBalanceRefund' field.
   */
  public java.math.BigDecimal getTotalCreditBalanceRefund() {
    return totalCreditBalanceRefund;
  }


  /**
   * Sets the value of the 'totalCreditBalanceRefund' field.
   * @param value the value to set.
   */
  public void setTotalCreditBalanceRefund(java.math.BigDecimal value) {
    this.totalCreditBalanceRefund = value;
  }

  /**
   * Gets the value of the 'totalCreditBalanceRefundReversed' field.
   * @return The value of the 'totalCreditBalanceRefundReversed' field.
   */
  public java.math.BigDecimal getTotalCreditBalanceRefundReversed() {
    return totalCreditBalanceRefundReversed;
  }


  /**
   * Sets the value of the 'totalCreditBalanceRefundReversed' field.
   * @param value the value to set.
   */
  public void setTotalCreditBalanceRefundReversed(java.math.BigDecimal value) {
    this.totalCreditBalanceRefundReversed = value;
  }

  /**
   * Gets the value of the 'totalRepaymentTransaction' field.
   * @return The value of the 'totalRepaymentTransaction' field.
   */
  public java.math.BigDecimal getTotalRepaymentTransaction() {
    return totalRepaymentTransaction;
  }


  /**
   * Sets the value of the 'totalRepaymentTransaction' field.
   * @param value the value to set.
   */
  public void setTotalRepaymentTransaction(java.math.BigDecimal value) {
    this.totalRepaymentTransaction = value;
  }

  /**
   * Gets the value of the 'totalRepaymentTransactionReversed' field.
   * @return The value of the 'totalRepaymentTransactionReversed' field.
   */
  public java.math.BigDecimal getTotalRepaymentTransactionReversed() {
    return totalRepaymentTransactionReversed;
  }


  /**
   * Sets the value of the 'totalRepaymentTransactionReversed' field.
   * @param value the value to set.
   */
  public void setTotalRepaymentTransactionReversed(java.math.BigDecimal value) {
    this.totalRepaymentTransactionReversed = value;
  }

  /**
   * Gets the value of the 'chargeOffReasonId' field.
   * @return The value of the 'chargeOffReasonId' field.
   */
  public java.lang.Long getChargeOffReasonId() {
    return chargeOffReasonId;
  }


  /**
   * Sets the value of the 'chargeOffReasonId' field.
   * @param value the value to set.
   */
  public void setChargeOffReasonId(java.lang.Long value) {
    this.chargeOffReasonId = value;
  }

  /**
   * Gets the value of the 'chargeOffReason' field.
   * @return The value of the 'chargeOffReason' field.
   */
  public java.lang.String getChargeOffReason() {
    return chargeOffReason;
  }


  /**
   * Sets the value of the 'chargeOffReason' field.
   * @param value the value to set.
   */
  public void setChargeOffReason(java.lang.String value) {
    this.chargeOffReason = value;
  }

  /**
   * Creates a new LoanSummaryDataV1 RecordBuilder.
   * @return A new LoanSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder();
  }

  /**
   * Creates a new LoanSummaryDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanSummaryDataV1 RecordBuilder by copying an existing LoanSummaryDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanSummaryDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanSummaryDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanSummaryDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanSummaryDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanSummaryDataV1> {

    private org.apache.fineract.avro.generic.v1.CurrencyDataV1 currency;
    private org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder currencyBuilder;
    private java.math.BigDecimal principalDisbursed;
    private java.math.BigDecimal principalAdjustments;
    private java.math.BigDecimal principalPaid;
    private java.math.BigDecimal principalWrittenOff;
    private java.math.BigDecimal principalOutstanding;
    private java.math.BigDecimal principalOverdue;
    private java.math.BigDecimal interestCharged;
    private java.math.BigDecimal interestPaid;
    private java.math.BigDecimal interestWaived;
    private java.math.BigDecimal interestWrittenOff;
    private java.math.BigDecimal interestOutstanding;
    private java.math.BigDecimal interestOverdue;
    private java.math.BigDecimal feeChargesCharged;
    private java.math.BigDecimal feeChargesDueAtDisbursementCharged;
    private java.math.BigDecimal feeChargesPaid;
    private java.math.BigDecimal feeChargesWaived;
    private java.math.BigDecimal feeChargesWrittenOff;
    private java.math.BigDecimal feeChargesOutstanding;
    private java.math.BigDecimal feeChargesOverdue;
    private java.math.BigDecimal penaltyChargesCharged;
    private java.math.BigDecimal penaltyChargesPaid;
    private java.math.BigDecimal penaltyChargesWaived;
    private java.math.BigDecimal penaltyChargesWrittenOff;
    private java.math.BigDecimal penaltyChargesOutstanding;
    private java.math.BigDecimal penaltyChargesOverdue;
    private java.math.BigDecimal totalExpectedRepayment;
    private java.math.BigDecimal totalRepayment;
    private java.math.BigDecimal totalExpectedCostOfLoan;
    private java.math.BigDecimal totalCostOfLoan;
    private java.math.BigDecimal totalWaived;
    private java.math.BigDecimal totalWrittenOff;
    private java.math.BigDecimal totalOutstanding;
    private java.math.BigDecimal totalOverdue;
    private java.math.BigDecimal totalRecovered;
    private java.lang.String overdueSinceDate;
    private java.lang.Long writeoffReasonId;
    private java.lang.String writeoffReason;
    private java.math.BigDecimal totalMerchantRefund;
    private java.math.BigDecimal totalMerchantRefundReversed;
    private java.math.BigDecimal totalPayoutRefund;
    private java.math.BigDecimal totalPayoutRefundReversed;
    private java.math.BigDecimal totalGoodwillCredit;
    private java.math.BigDecimal totalGoodwillCreditReversed;
    private java.math.BigDecimal totalChargeAdjustment;
    private java.math.BigDecimal totalChargeAdjustmentReversed;
    private java.math.BigDecimal totalChargeback;
    private java.math.BigDecimal totalCreditBalanceRefund;
    private java.math.BigDecimal totalCreditBalanceRefundReversed;
    private java.math.BigDecimal totalRepaymentTransaction;
    private java.math.BigDecimal totalRepaymentTransactionReversed;
    private java.lang.Long chargeOffReasonId;
    private java.lang.String chargeOffReason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currency)) {
        this.currency = data().deepCopy(fields()[0].schema(), other.currency);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCurrencyBuilder()) {
        this.currencyBuilder = org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(other.getCurrencyBuilder());
      }
      if (isValidValue(fields()[1], other.principalDisbursed)) {
        this.principalDisbursed = data().deepCopy(fields()[1].schema(), other.principalDisbursed);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.principalAdjustments)) {
        this.principalAdjustments = data().deepCopy(fields()[2].schema(), other.principalAdjustments);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.principalPaid)) {
        this.principalPaid = data().deepCopy(fields()[3].schema(), other.principalPaid);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.principalWrittenOff)) {
        this.principalWrittenOff = data().deepCopy(fields()[4].schema(), other.principalWrittenOff);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.principalOutstanding)) {
        this.principalOutstanding = data().deepCopy(fields()[5].schema(), other.principalOutstanding);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.principalOverdue)) {
        this.principalOverdue = data().deepCopy(fields()[6].schema(), other.principalOverdue);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.interestCharged)) {
        this.interestCharged = data().deepCopy(fields()[7].schema(), other.interestCharged);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.interestPaid)) {
        this.interestPaid = data().deepCopy(fields()[8].schema(), other.interestPaid);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.interestWaived)) {
        this.interestWaived = data().deepCopy(fields()[9].schema(), other.interestWaived);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.interestWrittenOff)) {
        this.interestWrittenOff = data().deepCopy(fields()[10].schema(), other.interestWrittenOff);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.interestOutstanding)) {
        this.interestOutstanding = data().deepCopy(fields()[11].schema(), other.interestOutstanding);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.interestOverdue)) {
        this.interestOverdue = data().deepCopy(fields()[12].schema(), other.interestOverdue);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.feeChargesCharged)) {
        this.feeChargesCharged = data().deepCopy(fields()[13].schema(), other.feeChargesCharged);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.feeChargesDueAtDisbursementCharged)) {
        this.feeChargesDueAtDisbursementCharged = data().deepCopy(fields()[14].schema(), other.feeChargesDueAtDisbursementCharged);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.feeChargesPaid)) {
        this.feeChargesPaid = data().deepCopy(fields()[15].schema(), other.feeChargesPaid);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.feeChargesWaived)) {
        this.feeChargesWaived = data().deepCopy(fields()[16].schema(), other.feeChargesWaived);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.feeChargesWrittenOff)) {
        this.feeChargesWrittenOff = data().deepCopy(fields()[17].schema(), other.feeChargesWrittenOff);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.feeChargesOutstanding)) {
        this.feeChargesOutstanding = data().deepCopy(fields()[18].schema(), other.feeChargesOutstanding);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.feeChargesOverdue)) {
        this.feeChargesOverdue = data().deepCopy(fields()[19].schema(), other.feeChargesOverdue);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.penaltyChargesCharged)) {
        this.penaltyChargesCharged = data().deepCopy(fields()[20].schema(), other.penaltyChargesCharged);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.penaltyChargesPaid)) {
        this.penaltyChargesPaid = data().deepCopy(fields()[21].schema(), other.penaltyChargesPaid);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.penaltyChargesWaived)) {
        this.penaltyChargesWaived = data().deepCopy(fields()[22].schema(), other.penaltyChargesWaived);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.penaltyChargesWrittenOff)) {
        this.penaltyChargesWrittenOff = data().deepCopy(fields()[23].schema(), other.penaltyChargesWrittenOff);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.penaltyChargesOutstanding)) {
        this.penaltyChargesOutstanding = data().deepCopy(fields()[24].schema(), other.penaltyChargesOutstanding);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.penaltyChargesOverdue)) {
        this.penaltyChargesOverdue = data().deepCopy(fields()[25].schema(), other.penaltyChargesOverdue);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.totalExpectedRepayment)) {
        this.totalExpectedRepayment = data().deepCopy(fields()[26].schema(), other.totalExpectedRepayment);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.totalRepayment)) {
        this.totalRepayment = data().deepCopy(fields()[27].schema(), other.totalRepayment);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.totalExpectedCostOfLoan)) {
        this.totalExpectedCostOfLoan = data().deepCopy(fields()[28].schema(), other.totalExpectedCostOfLoan);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.totalCostOfLoan)) {
        this.totalCostOfLoan = data().deepCopy(fields()[29].schema(), other.totalCostOfLoan);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.totalWaived)) {
        this.totalWaived = data().deepCopy(fields()[30].schema(), other.totalWaived);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.totalWrittenOff)) {
        this.totalWrittenOff = data().deepCopy(fields()[31].schema(), other.totalWrittenOff);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.totalOutstanding)) {
        this.totalOutstanding = data().deepCopy(fields()[32].schema(), other.totalOutstanding);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.totalOverdue)) {
        this.totalOverdue = data().deepCopy(fields()[33].schema(), other.totalOverdue);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.totalRecovered)) {
        this.totalRecovered = data().deepCopy(fields()[34].schema(), other.totalRecovered);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.overdueSinceDate)) {
        this.overdueSinceDate = data().deepCopy(fields()[35].schema(), other.overdueSinceDate);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.writeoffReasonId)) {
        this.writeoffReasonId = data().deepCopy(fields()[36].schema(), other.writeoffReasonId);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.writeoffReason)) {
        this.writeoffReason = data().deepCopy(fields()[37].schema(), other.writeoffReason);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.totalMerchantRefund)) {
        this.totalMerchantRefund = data().deepCopy(fields()[38].schema(), other.totalMerchantRefund);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.totalMerchantRefundReversed)) {
        this.totalMerchantRefundReversed = data().deepCopy(fields()[39].schema(), other.totalMerchantRefundReversed);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.totalPayoutRefund)) {
        this.totalPayoutRefund = data().deepCopy(fields()[40].schema(), other.totalPayoutRefund);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.totalPayoutRefundReversed)) {
        this.totalPayoutRefundReversed = data().deepCopy(fields()[41].schema(), other.totalPayoutRefundReversed);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.totalGoodwillCredit)) {
        this.totalGoodwillCredit = data().deepCopy(fields()[42].schema(), other.totalGoodwillCredit);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.totalGoodwillCreditReversed)) {
        this.totalGoodwillCreditReversed = data().deepCopy(fields()[43].schema(), other.totalGoodwillCreditReversed);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.totalChargeAdjustment)) {
        this.totalChargeAdjustment = data().deepCopy(fields()[44].schema(), other.totalChargeAdjustment);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.totalChargeAdjustmentReversed)) {
        this.totalChargeAdjustmentReversed = data().deepCopy(fields()[45].schema(), other.totalChargeAdjustmentReversed);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.totalChargeback)) {
        this.totalChargeback = data().deepCopy(fields()[46].schema(), other.totalChargeback);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.totalCreditBalanceRefund)) {
        this.totalCreditBalanceRefund = data().deepCopy(fields()[47].schema(), other.totalCreditBalanceRefund);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.totalCreditBalanceRefundReversed)) {
        this.totalCreditBalanceRefundReversed = data().deepCopy(fields()[48].schema(), other.totalCreditBalanceRefundReversed);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
      if (isValidValue(fields()[49], other.totalRepaymentTransaction)) {
        this.totalRepaymentTransaction = data().deepCopy(fields()[49].schema(), other.totalRepaymentTransaction);
        fieldSetFlags()[49] = other.fieldSetFlags()[49];
      }
      if (isValidValue(fields()[50], other.totalRepaymentTransactionReversed)) {
        this.totalRepaymentTransactionReversed = data().deepCopy(fields()[50].schema(), other.totalRepaymentTransactionReversed);
        fieldSetFlags()[50] = other.fieldSetFlags()[50];
      }
      if (isValidValue(fields()[51], other.chargeOffReasonId)) {
        this.chargeOffReasonId = data().deepCopy(fields()[51].schema(), other.chargeOffReasonId);
        fieldSetFlags()[51] = other.fieldSetFlags()[51];
      }
      if (isValidValue(fields()[52], other.chargeOffReason)) {
        this.chargeOffReason = data().deepCopy(fields()[52].schema(), other.chargeOffReason);
        fieldSetFlags()[52] = other.fieldSetFlags()[52];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanSummaryDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanSummaryDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.currency)) {
        this.currency = data().deepCopy(fields()[0].schema(), other.currency);
        fieldSetFlags()[0] = true;
      }
      this.currencyBuilder = null;
      if (isValidValue(fields()[1], other.principalDisbursed)) {
        this.principalDisbursed = data().deepCopy(fields()[1].schema(), other.principalDisbursed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.principalAdjustments)) {
        this.principalAdjustments = data().deepCopy(fields()[2].schema(), other.principalAdjustments);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.principalPaid)) {
        this.principalPaid = data().deepCopy(fields()[3].schema(), other.principalPaid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.principalWrittenOff)) {
        this.principalWrittenOff = data().deepCopy(fields()[4].schema(), other.principalWrittenOff);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.principalOutstanding)) {
        this.principalOutstanding = data().deepCopy(fields()[5].schema(), other.principalOutstanding);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.principalOverdue)) {
        this.principalOverdue = data().deepCopy(fields()[6].schema(), other.principalOverdue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.interestCharged)) {
        this.interestCharged = data().deepCopy(fields()[7].schema(), other.interestCharged);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.interestPaid)) {
        this.interestPaid = data().deepCopy(fields()[8].schema(), other.interestPaid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.interestWaived)) {
        this.interestWaived = data().deepCopy(fields()[9].schema(), other.interestWaived);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.interestWrittenOff)) {
        this.interestWrittenOff = data().deepCopy(fields()[10].schema(), other.interestWrittenOff);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.interestOutstanding)) {
        this.interestOutstanding = data().deepCopy(fields()[11].schema(), other.interestOutstanding);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.interestOverdue)) {
        this.interestOverdue = data().deepCopy(fields()[12].schema(), other.interestOverdue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.feeChargesCharged)) {
        this.feeChargesCharged = data().deepCopy(fields()[13].schema(), other.feeChargesCharged);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.feeChargesDueAtDisbursementCharged)) {
        this.feeChargesDueAtDisbursementCharged = data().deepCopy(fields()[14].schema(), other.feeChargesDueAtDisbursementCharged);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.feeChargesPaid)) {
        this.feeChargesPaid = data().deepCopy(fields()[15].schema(), other.feeChargesPaid);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.feeChargesWaived)) {
        this.feeChargesWaived = data().deepCopy(fields()[16].schema(), other.feeChargesWaived);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.feeChargesWrittenOff)) {
        this.feeChargesWrittenOff = data().deepCopy(fields()[17].schema(), other.feeChargesWrittenOff);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.feeChargesOutstanding)) {
        this.feeChargesOutstanding = data().deepCopy(fields()[18].schema(), other.feeChargesOutstanding);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.feeChargesOverdue)) {
        this.feeChargesOverdue = data().deepCopy(fields()[19].schema(), other.feeChargesOverdue);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.penaltyChargesCharged)) {
        this.penaltyChargesCharged = data().deepCopy(fields()[20].schema(), other.penaltyChargesCharged);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.penaltyChargesPaid)) {
        this.penaltyChargesPaid = data().deepCopy(fields()[21].schema(), other.penaltyChargesPaid);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.penaltyChargesWaived)) {
        this.penaltyChargesWaived = data().deepCopy(fields()[22].schema(), other.penaltyChargesWaived);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.penaltyChargesWrittenOff)) {
        this.penaltyChargesWrittenOff = data().deepCopy(fields()[23].schema(), other.penaltyChargesWrittenOff);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.penaltyChargesOutstanding)) {
        this.penaltyChargesOutstanding = data().deepCopy(fields()[24].schema(), other.penaltyChargesOutstanding);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.penaltyChargesOverdue)) {
        this.penaltyChargesOverdue = data().deepCopy(fields()[25].schema(), other.penaltyChargesOverdue);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.totalExpectedRepayment)) {
        this.totalExpectedRepayment = data().deepCopy(fields()[26].schema(), other.totalExpectedRepayment);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.totalRepayment)) {
        this.totalRepayment = data().deepCopy(fields()[27].schema(), other.totalRepayment);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.totalExpectedCostOfLoan)) {
        this.totalExpectedCostOfLoan = data().deepCopy(fields()[28].schema(), other.totalExpectedCostOfLoan);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.totalCostOfLoan)) {
        this.totalCostOfLoan = data().deepCopy(fields()[29].schema(), other.totalCostOfLoan);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.totalWaived)) {
        this.totalWaived = data().deepCopy(fields()[30].schema(), other.totalWaived);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.totalWrittenOff)) {
        this.totalWrittenOff = data().deepCopy(fields()[31].schema(), other.totalWrittenOff);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.totalOutstanding)) {
        this.totalOutstanding = data().deepCopy(fields()[32].schema(), other.totalOutstanding);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.totalOverdue)) {
        this.totalOverdue = data().deepCopy(fields()[33].schema(), other.totalOverdue);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.totalRecovered)) {
        this.totalRecovered = data().deepCopy(fields()[34].schema(), other.totalRecovered);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.overdueSinceDate)) {
        this.overdueSinceDate = data().deepCopy(fields()[35].schema(), other.overdueSinceDate);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.writeoffReasonId)) {
        this.writeoffReasonId = data().deepCopy(fields()[36].schema(), other.writeoffReasonId);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.writeoffReason)) {
        this.writeoffReason = data().deepCopy(fields()[37].schema(), other.writeoffReason);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.totalMerchantRefund)) {
        this.totalMerchantRefund = data().deepCopy(fields()[38].schema(), other.totalMerchantRefund);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.totalMerchantRefundReversed)) {
        this.totalMerchantRefundReversed = data().deepCopy(fields()[39].schema(), other.totalMerchantRefundReversed);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.totalPayoutRefund)) {
        this.totalPayoutRefund = data().deepCopy(fields()[40].schema(), other.totalPayoutRefund);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.totalPayoutRefundReversed)) {
        this.totalPayoutRefundReversed = data().deepCopy(fields()[41].schema(), other.totalPayoutRefundReversed);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.totalGoodwillCredit)) {
        this.totalGoodwillCredit = data().deepCopy(fields()[42].schema(), other.totalGoodwillCredit);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.totalGoodwillCreditReversed)) {
        this.totalGoodwillCreditReversed = data().deepCopy(fields()[43].schema(), other.totalGoodwillCreditReversed);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.totalChargeAdjustment)) {
        this.totalChargeAdjustment = data().deepCopy(fields()[44].schema(), other.totalChargeAdjustment);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.totalChargeAdjustmentReversed)) {
        this.totalChargeAdjustmentReversed = data().deepCopy(fields()[45].schema(), other.totalChargeAdjustmentReversed);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.totalChargeback)) {
        this.totalChargeback = data().deepCopy(fields()[46].schema(), other.totalChargeback);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.totalCreditBalanceRefund)) {
        this.totalCreditBalanceRefund = data().deepCopy(fields()[47].schema(), other.totalCreditBalanceRefund);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.totalCreditBalanceRefundReversed)) {
        this.totalCreditBalanceRefundReversed = data().deepCopy(fields()[48].schema(), other.totalCreditBalanceRefundReversed);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.totalRepaymentTransaction)) {
        this.totalRepaymentTransaction = data().deepCopy(fields()[49].schema(), other.totalRepaymentTransaction);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.totalRepaymentTransactionReversed)) {
        this.totalRepaymentTransactionReversed = data().deepCopy(fields()[50].schema(), other.totalRepaymentTransactionReversed);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.chargeOffReasonId)) {
        this.chargeOffReasonId = data().deepCopy(fields()[51].schema(), other.chargeOffReasonId);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.chargeOffReason)) {
        this.chargeOffReason = data().deepCopy(fields()[52].schema(), other.chargeOffReason);
        fieldSetFlags()[52] = true;
      }
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1 getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setCurrency(org.apache.fineract.avro.generic.v1.CurrencyDataV1 value) {
      validate(fields()[0], value);
      this.currencyBuilder = null;
      this.currency = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'currency' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder getCurrencyBuilder() {
      if (currencyBuilder == null) {
        if (hasCurrency()) {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder(currency));
        } else {
          setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.newBuilder());
        }
      }
      return currencyBuilder;
    }

    /**
     * Sets the Builder instance for the 'currency' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setCurrencyBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder value) {
      clearCurrency();
      currencyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'currency' field has an active Builder instance
     * @return True if the 'currency' field has an active Builder instance
     */
    public boolean hasCurrencyBuilder() {
      return currencyBuilder != null;
    }

    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearCurrency() {
      currency = null;
      currencyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalDisbursed' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalDisbursed() {
      return principalDisbursed;
    }


    /**
      * Sets the value of the 'principalDisbursed' field.
      * @param value The value of 'principalDisbursed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalDisbursed(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.principalDisbursed = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'principalDisbursed' field has been set.
      * @return True if the 'principalDisbursed' field has been set, false otherwise.
      */
    public boolean hasPrincipalDisbursed() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'principalDisbursed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalDisbursed() {
      principalDisbursed = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalAdjustments' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalAdjustments() {
      return principalAdjustments;
    }


    /**
      * Sets the value of the 'principalAdjustments' field.
      * @param value The value of 'principalAdjustments'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalAdjustments(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.principalAdjustments = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'principalAdjustments' field has been set.
      * @return True if the 'principalAdjustments' field has been set, false otherwise.
      */
    public boolean hasPrincipalAdjustments() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'principalAdjustments' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalAdjustments() {
      principalAdjustments = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalPaid' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalPaid() {
      return principalPaid;
    }


    /**
      * Sets the value of the 'principalPaid' field.
      * @param value The value of 'principalPaid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalPaid(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.principalPaid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'principalPaid' field has been set.
      * @return True if the 'principalPaid' field has been set, false otherwise.
      */
    public boolean hasPrincipalPaid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'principalPaid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalPaid() {
      principalPaid = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalWrittenOff' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalWrittenOff() {
      return principalWrittenOff;
    }


    /**
      * Sets the value of the 'principalWrittenOff' field.
      * @param value The value of 'principalWrittenOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalWrittenOff(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.principalWrittenOff = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'principalWrittenOff' field has been set.
      * @return True if the 'principalWrittenOff' field has been set, false otherwise.
      */
    public boolean hasPrincipalWrittenOff() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'principalWrittenOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalWrittenOff() {
      principalWrittenOff = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalOutstanding() {
      return principalOutstanding;
    }


    /**
      * Sets the value of the 'principalOutstanding' field.
      * @param value The value of 'principalOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalOutstanding(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.principalOutstanding = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'principalOutstanding' field has been set.
      * @return True if the 'principalOutstanding' field has been set, false otherwise.
      */
    public boolean hasPrincipalOutstanding() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'principalOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalOutstanding() {
      principalOutstanding = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'principalOverdue' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrincipalOverdue() {
      return principalOverdue;
    }


    /**
      * Sets the value of the 'principalOverdue' field.
      * @param value The value of 'principalOverdue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPrincipalOverdue(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.principalOverdue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'principalOverdue' field has been set.
      * @return True if the 'principalOverdue' field has been set, false otherwise.
      */
    public boolean hasPrincipalOverdue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'principalOverdue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPrincipalOverdue() {
      principalOverdue = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestCharged' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestCharged() {
      return interestCharged;
    }


    /**
      * Sets the value of the 'interestCharged' field.
      * @param value The value of 'interestCharged'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestCharged(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.interestCharged = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'interestCharged' field has been set.
      * @return True if the 'interestCharged' field has been set, false otherwise.
      */
    public boolean hasInterestCharged() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'interestCharged' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestCharged() {
      interestCharged = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestPaid' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestPaid() {
      return interestPaid;
    }


    /**
      * Sets the value of the 'interestPaid' field.
      * @param value The value of 'interestPaid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestPaid(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.interestPaid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'interestPaid' field has been set.
      * @return True if the 'interestPaid' field has been set, false otherwise.
      */
    public boolean hasInterestPaid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'interestPaid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestPaid() {
      interestPaid = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestWaived' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestWaived() {
      return interestWaived;
    }


    /**
      * Sets the value of the 'interestWaived' field.
      * @param value The value of 'interestWaived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestWaived(java.math.BigDecimal value) {
      validate(fields()[9], value);
      this.interestWaived = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'interestWaived' field has been set.
      * @return True if the 'interestWaived' field has been set, false otherwise.
      */
    public boolean hasInterestWaived() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'interestWaived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestWaived() {
      interestWaived = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestWrittenOff' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestWrittenOff() {
      return interestWrittenOff;
    }


    /**
      * Sets the value of the 'interestWrittenOff' field.
      * @param value The value of 'interestWrittenOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestWrittenOff(java.math.BigDecimal value) {
      validate(fields()[10], value);
      this.interestWrittenOff = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'interestWrittenOff' field has been set.
      * @return True if the 'interestWrittenOff' field has been set, false otherwise.
      */
    public boolean hasInterestWrittenOff() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'interestWrittenOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestWrittenOff() {
      interestWrittenOff = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestOutstanding() {
      return interestOutstanding;
    }


    /**
      * Sets the value of the 'interestOutstanding' field.
      * @param value The value of 'interestOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestOutstanding(java.math.BigDecimal value) {
      validate(fields()[11], value);
      this.interestOutstanding = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'interestOutstanding' field has been set.
      * @return True if the 'interestOutstanding' field has been set, false otherwise.
      */
    public boolean hasInterestOutstanding() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'interestOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestOutstanding() {
      interestOutstanding = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'interestOverdue' field.
      * @return The value.
      */
    public java.math.BigDecimal getInterestOverdue() {
      return interestOverdue;
    }


    /**
      * Sets the value of the 'interestOverdue' field.
      * @param value The value of 'interestOverdue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setInterestOverdue(java.math.BigDecimal value) {
      validate(fields()[12], value);
      this.interestOverdue = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'interestOverdue' field has been set.
      * @return True if the 'interestOverdue' field has been set, false otherwise.
      */
    public boolean hasInterestOverdue() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'interestOverdue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearInterestOverdue() {
      interestOverdue = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesCharged' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesCharged() {
      return feeChargesCharged;
    }


    /**
      * Sets the value of the 'feeChargesCharged' field.
      * @param value The value of 'feeChargesCharged'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesCharged(java.math.BigDecimal value) {
      validate(fields()[13], value);
      this.feeChargesCharged = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesCharged' field has been set.
      * @return True if the 'feeChargesCharged' field has been set, false otherwise.
      */
    public boolean hasFeeChargesCharged() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'feeChargesCharged' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesCharged() {
      feeChargesCharged = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesDueAtDisbursementCharged' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesDueAtDisbursementCharged() {
      return feeChargesDueAtDisbursementCharged;
    }


    /**
      * Sets the value of the 'feeChargesDueAtDisbursementCharged' field.
      * @param value The value of 'feeChargesDueAtDisbursementCharged'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesDueAtDisbursementCharged(java.math.BigDecimal value) {
      validate(fields()[14], value);
      this.feeChargesDueAtDisbursementCharged = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesDueAtDisbursementCharged' field has been set.
      * @return True if the 'feeChargesDueAtDisbursementCharged' field has been set, false otherwise.
      */
    public boolean hasFeeChargesDueAtDisbursementCharged() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'feeChargesDueAtDisbursementCharged' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesDueAtDisbursementCharged() {
      feeChargesDueAtDisbursementCharged = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesPaid' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesPaid() {
      return feeChargesPaid;
    }


    /**
      * Sets the value of the 'feeChargesPaid' field.
      * @param value The value of 'feeChargesPaid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesPaid(java.math.BigDecimal value) {
      validate(fields()[15], value);
      this.feeChargesPaid = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesPaid' field has been set.
      * @return True if the 'feeChargesPaid' field has been set, false otherwise.
      */
    public boolean hasFeeChargesPaid() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'feeChargesPaid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesPaid() {
      feeChargesPaid = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesWaived' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesWaived() {
      return feeChargesWaived;
    }


    /**
      * Sets the value of the 'feeChargesWaived' field.
      * @param value The value of 'feeChargesWaived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesWaived(java.math.BigDecimal value) {
      validate(fields()[16], value);
      this.feeChargesWaived = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesWaived' field has been set.
      * @return True if the 'feeChargesWaived' field has been set, false otherwise.
      */
    public boolean hasFeeChargesWaived() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'feeChargesWaived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesWaived() {
      feeChargesWaived = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesWrittenOff' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesWrittenOff() {
      return feeChargesWrittenOff;
    }


    /**
      * Sets the value of the 'feeChargesWrittenOff' field.
      * @param value The value of 'feeChargesWrittenOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesWrittenOff(java.math.BigDecimal value) {
      validate(fields()[17], value);
      this.feeChargesWrittenOff = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesWrittenOff' field has been set.
      * @return True if the 'feeChargesWrittenOff' field has been set, false otherwise.
      */
    public boolean hasFeeChargesWrittenOff() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'feeChargesWrittenOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesWrittenOff() {
      feeChargesWrittenOff = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesOutstanding() {
      return feeChargesOutstanding;
    }


    /**
      * Sets the value of the 'feeChargesOutstanding' field.
      * @param value The value of 'feeChargesOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesOutstanding(java.math.BigDecimal value) {
      validate(fields()[18], value);
      this.feeChargesOutstanding = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesOutstanding' field has been set.
      * @return True if the 'feeChargesOutstanding' field has been set, false otherwise.
      */
    public boolean hasFeeChargesOutstanding() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'feeChargesOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesOutstanding() {
      feeChargesOutstanding = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'feeChargesOverdue' field.
      * @return The value.
      */
    public java.math.BigDecimal getFeeChargesOverdue() {
      return feeChargesOverdue;
    }


    /**
      * Sets the value of the 'feeChargesOverdue' field.
      * @param value The value of 'feeChargesOverdue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setFeeChargesOverdue(java.math.BigDecimal value) {
      validate(fields()[19], value);
      this.feeChargesOverdue = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'feeChargesOverdue' field has been set.
      * @return True if the 'feeChargesOverdue' field has been set, false otherwise.
      */
    public boolean hasFeeChargesOverdue() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'feeChargesOverdue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearFeeChargesOverdue() {
      feeChargesOverdue = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesCharged' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesCharged() {
      return penaltyChargesCharged;
    }


    /**
      * Sets the value of the 'penaltyChargesCharged' field.
      * @param value The value of 'penaltyChargesCharged'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesCharged(java.math.BigDecimal value) {
      validate(fields()[20], value);
      this.penaltyChargesCharged = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesCharged' field has been set.
      * @return True if the 'penaltyChargesCharged' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesCharged() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'penaltyChargesCharged' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesCharged() {
      penaltyChargesCharged = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesPaid' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesPaid() {
      return penaltyChargesPaid;
    }


    /**
      * Sets the value of the 'penaltyChargesPaid' field.
      * @param value The value of 'penaltyChargesPaid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesPaid(java.math.BigDecimal value) {
      validate(fields()[21], value);
      this.penaltyChargesPaid = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesPaid' field has been set.
      * @return True if the 'penaltyChargesPaid' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesPaid() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'penaltyChargesPaid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesPaid() {
      penaltyChargesPaid = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesWaived' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesWaived() {
      return penaltyChargesWaived;
    }


    /**
      * Sets the value of the 'penaltyChargesWaived' field.
      * @param value The value of 'penaltyChargesWaived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesWaived(java.math.BigDecimal value) {
      validate(fields()[22], value);
      this.penaltyChargesWaived = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesWaived' field has been set.
      * @return True if the 'penaltyChargesWaived' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesWaived() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'penaltyChargesWaived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesWaived() {
      penaltyChargesWaived = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesWrittenOff' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesWrittenOff() {
      return penaltyChargesWrittenOff;
    }


    /**
      * Sets the value of the 'penaltyChargesWrittenOff' field.
      * @param value The value of 'penaltyChargesWrittenOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesWrittenOff(java.math.BigDecimal value) {
      validate(fields()[23], value);
      this.penaltyChargesWrittenOff = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesWrittenOff' field has been set.
      * @return True if the 'penaltyChargesWrittenOff' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesWrittenOff() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'penaltyChargesWrittenOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesWrittenOff() {
      penaltyChargesWrittenOff = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesOutstanding() {
      return penaltyChargesOutstanding;
    }


    /**
      * Sets the value of the 'penaltyChargesOutstanding' field.
      * @param value The value of 'penaltyChargesOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesOutstanding(java.math.BigDecimal value) {
      validate(fields()[24], value);
      this.penaltyChargesOutstanding = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesOutstanding' field has been set.
      * @return True if the 'penaltyChargesOutstanding' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesOutstanding() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'penaltyChargesOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesOutstanding() {
      penaltyChargesOutstanding = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'penaltyChargesOverdue' field.
      * @return The value.
      */
    public java.math.BigDecimal getPenaltyChargesOverdue() {
      return penaltyChargesOverdue;
    }


    /**
      * Sets the value of the 'penaltyChargesOverdue' field.
      * @param value The value of 'penaltyChargesOverdue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setPenaltyChargesOverdue(java.math.BigDecimal value) {
      validate(fields()[25], value);
      this.penaltyChargesOverdue = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'penaltyChargesOverdue' field has been set.
      * @return True if the 'penaltyChargesOverdue' field has been set, false otherwise.
      */
    public boolean hasPenaltyChargesOverdue() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'penaltyChargesOverdue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearPenaltyChargesOverdue() {
      penaltyChargesOverdue = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalExpectedRepayment' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalExpectedRepayment() {
      return totalExpectedRepayment;
    }


    /**
      * Sets the value of the 'totalExpectedRepayment' field.
      * @param value The value of 'totalExpectedRepayment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalExpectedRepayment(java.math.BigDecimal value) {
      validate(fields()[26], value);
      this.totalExpectedRepayment = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'totalExpectedRepayment' field has been set.
      * @return True if the 'totalExpectedRepayment' field has been set, false otherwise.
      */
    public boolean hasTotalExpectedRepayment() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'totalExpectedRepayment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalExpectedRepayment() {
      totalExpectedRepayment = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRepayment' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalRepayment() {
      return totalRepayment;
    }


    /**
      * Sets the value of the 'totalRepayment' field.
      * @param value The value of 'totalRepayment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalRepayment(java.math.BigDecimal value) {
      validate(fields()[27], value);
      this.totalRepayment = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRepayment' field has been set.
      * @return True if the 'totalRepayment' field has been set, false otherwise.
      */
    public boolean hasTotalRepayment() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'totalRepayment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalRepayment() {
      totalRepayment = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalExpectedCostOfLoan' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalExpectedCostOfLoan() {
      return totalExpectedCostOfLoan;
    }


    /**
      * Sets the value of the 'totalExpectedCostOfLoan' field.
      * @param value The value of 'totalExpectedCostOfLoan'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalExpectedCostOfLoan(java.math.BigDecimal value) {
      validate(fields()[28], value);
      this.totalExpectedCostOfLoan = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'totalExpectedCostOfLoan' field has been set.
      * @return True if the 'totalExpectedCostOfLoan' field has been set, false otherwise.
      */
    public boolean hasTotalExpectedCostOfLoan() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'totalExpectedCostOfLoan' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalExpectedCostOfLoan() {
      totalExpectedCostOfLoan = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCostOfLoan' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalCostOfLoan() {
      return totalCostOfLoan;
    }


    /**
      * Sets the value of the 'totalCostOfLoan' field.
      * @param value The value of 'totalCostOfLoan'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalCostOfLoan(java.math.BigDecimal value) {
      validate(fields()[29], value);
      this.totalCostOfLoan = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCostOfLoan' field has been set.
      * @return True if the 'totalCostOfLoan' field has been set, false otherwise.
      */
    public boolean hasTotalCostOfLoan() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'totalCostOfLoan' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalCostOfLoan() {
      totalCostOfLoan = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWaived' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalWaived() {
      return totalWaived;
    }


    /**
      * Sets the value of the 'totalWaived' field.
      * @param value The value of 'totalWaived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalWaived(java.math.BigDecimal value) {
      validate(fields()[30], value);
      this.totalWaived = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWaived' field has been set.
      * @return True if the 'totalWaived' field has been set, false otherwise.
      */
    public boolean hasTotalWaived() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'totalWaived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalWaived() {
      totalWaived = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWrittenOff' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalWrittenOff() {
      return totalWrittenOff;
    }


    /**
      * Sets the value of the 'totalWrittenOff' field.
      * @param value The value of 'totalWrittenOff'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalWrittenOff(java.math.BigDecimal value) {
      validate(fields()[31], value);
      this.totalWrittenOff = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWrittenOff' field has been set.
      * @return True if the 'totalWrittenOff' field has been set, false otherwise.
      */
    public boolean hasTotalWrittenOff() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'totalWrittenOff' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalWrittenOff() {
      totalWrittenOff = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalOutstanding() {
      return totalOutstanding;
    }


    /**
      * Sets the value of the 'totalOutstanding' field.
      * @param value The value of 'totalOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalOutstanding(java.math.BigDecimal value) {
      validate(fields()[32], value);
      this.totalOutstanding = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'totalOutstanding' field has been set.
      * @return True if the 'totalOutstanding' field has been set, false otherwise.
      */
    public boolean hasTotalOutstanding() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'totalOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalOutstanding() {
      totalOutstanding = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalOverdue' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalOverdue() {
      return totalOverdue;
    }


    /**
      * Sets the value of the 'totalOverdue' field.
      * @param value The value of 'totalOverdue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalOverdue(java.math.BigDecimal value) {
      validate(fields()[33], value);
      this.totalOverdue = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'totalOverdue' field has been set.
      * @return True if the 'totalOverdue' field has been set, false otherwise.
      */
    public boolean hasTotalOverdue() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'totalOverdue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalOverdue() {
      totalOverdue = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRecovered' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalRecovered() {
      return totalRecovered;
    }


    /**
      * Sets the value of the 'totalRecovered' field.
      * @param value The value of 'totalRecovered'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalRecovered(java.math.BigDecimal value) {
      validate(fields()[34], value);
      this.totalRecovered = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRecovered' field has been set.
      * @return True if the 'totalRecovered' field has been set, false otherwise.
      */
    public boolean hasTotalRecovered() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'totalRecovered' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalRecovered() {
      totalRecovered = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'overdueSinceDate' field.
      * @return The value.
      */
    public java.lang.String getOverdueSinceDate() {
      return overdueSinceDate;
    }


    /**
      * Sets the value of the 'overdueSinceDate' field.
      * @param value The value of 'overdueSinceDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setOverdueSinceDate(java.lang.String value) {
      validate(fields()[35], value);
      this.overdueSinceDate = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'overdueSinceDate' field has been set.
      * @return True if the 'overdueSinceDate' field has been set, false otherwise.
      */
    public boolean hasOverdueSinceDate() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'overdueSinceDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearOverdueSinceDate() {
      overdueSinceDate = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'writeoffReasonId' field.
      * @return The value.
      */
    public java.lang.Long getWriteoffReasonId() {
      return writeoffReasonId;
    }


    /**
      * Sets the value of the 'writeoffReasonId' field.
      * @param value The value of 'writeoffReasonId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setWriteoffReasonId(java.lang.Long value) {
      validate(fields()[36], value);
      this.writeoffReasonId = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'writeoffReasonId' field has been set.
      * @return True if the 'writeoffReasonId' field has been set, false otherwise.
      */
    public boolean hasWriteoffReasonId() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'writeoffReasonId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearWriteoffReasonId() {
      writeoffReasonId = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'writeoffReason' field.
      * @return The value.
      */
    public java.lang.String getWriteoffReason() {
      return writeoffReason;
    }


    /**
      * Sets the value of the 'writeoffReason' field.
      * @param value The value of 'writeoffReason'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setWriteoffReason(java.lang.String value) {
      validate(fields()[37], value);
      this.writeoffReason = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'writeoffReason' field has been set.
      * @return True if the 'writeoffReason' field has been set, false otherwise.
      */
    public boolean hasWriteoffReason() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'writeoffReason' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearWriteoffReason() {
      writeoffReason = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalMerchantRefund' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalMerchantRefund() {
      return totalMerchantRefund;
    }


    /**
      * Sets the value of the 'totalMerchantRefund' field.
      * @param value The value of 'totalMerchantRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalMerchantRefund(java.math.BigDecimal value) {
      validate(fields()[38], value);
      this.totalMerchantRefund = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'totalMerchantRefund' field has been set.
      * @return True if the 'totalMerchantRefund' field has been set, false otherwise.
      */
    public boolean hasTotalMerchantRefund() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'totalMerchantRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalMerchantRefund() {
      totalMerchantRefund = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalMerchantRefundReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalMerchantRefundReversed() {
      return totalMerchantRefundReversed;
    }


    /**
      * Sets the value of the 'totalMerchantRefundReversed' field.
      * @param value The value of 'totalMerchantRefundReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalMerchantRefundReversed(java.math.BigDecimal value) {
      validate(fields()[39], value);
      this.totalMerchantRefundReversed = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'totalMerchantRefundReversed' field has been set.
      * @return True if the 'totalMerchantRefundReversed' field has been set, false otherwise.
      */
    public boolean hasTotalMerchantRefundReversed() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'totalMerchantRefundReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalMerchantRefundReversed() {
      totalMerchantRefundReversed = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPayoutRefund' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalPayoutRefund() {
      return totalPayoutRefund;
    }


    /**
      * Sets the value of the 'totalPayoutRefund' field.
      * @param value The value of 'totalPayoutRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalPayoutRefund(java.math.BigDecimal value) {
      validate(fields()[40], value);
      this.totalPayoutRefund = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPayoutRefund' field has been set.
      * @return True if the 'totalPayoutRefund' field has been set, false otherwise.
      */
    public boolean hasTotalPayoutRefund() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'totalPayoutRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalPayoutRefund() {
      totalPayoutRefund = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPayoutRefundReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalPayoutRefundReversed() {
      return totalPayoutRefundReversed;
    }


    /**
      * Sets the value of the 'totalPayoutRefundReversed' field.
      * @param value The value of 'totalPayoutRefundReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalPayoutRefundReversed(java.math.BigDecimal value) {
      validate(fields()[41], value);
      this.totalPayoutRefundReversed = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPayoutRefundReversed' field has been set.
      * @return True if the 'totalPayoutRefundReversed' field has been set, false otherwise.
      */
    public boolean hasTotalPayoutRefundReversed() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'totalPayoutRefundReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalPayoutRefundReversed() {
      totalPayoutRefundReversed = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalGoodwillCredit' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalGoodwillCredit() {
      return totalGoodwillCredit;
    }


    /**
      * Sets the value of the 'totalGoodwillCredit' field.
      * @param value The value of 'totalGoodwillCredit'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalGoodwillCredit(java.math.BigDecimal value) {
      validate(fields()[42], value);
      this.totalGoodwillCredit = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'totalGoodwillCredit' field has been set.
      * @return True if the 'totalGoodwillCredit' field has been set, false otherwise.
      */
    public boolean hasTotalGoodwillCredit() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'totalGoodwillCredit' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalGoodwillCredit() {
      totalGoodwillCredit = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalGoodwillCreditReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalGoodwillCreditReversed() {
      return totalGoodwillCreditReversed;
    }


    /**
      * Sets the value of the 'totalGoodwillCreditReversed' field.
      * @param value The value of 'totalGoodwillCreditReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalGoodwillCreditReversed(java.math.BigDecimal value) {
      validate(fields()[43], value);
      this.totalGoodwillCreditReversed = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'totalGoodwillCreditReversed' field has been set.
      * @return True if the 'totalGoodwillCreditReversed' field has been set, false otherwise.
      */
    public boolean hasTotalGoodwillCreditReversed() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'totalGoodwillCreditReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalGoodwillCreditReversed() {
      totalGoodwillCreditReversed = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalChargeAdjustment' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalChargeAdjustment() {
      return totalChargeAdjustment;
    }


    /**
      * Sets the value of the 'totalChargeAdjustment' field.
      * @param value The value of 'totalChargeAdjustment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalChargeAdjustment(java.math.BigDecimal value) {
      validate(fields()[44], value);
      this.totalChargeAdjustment = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'totalChargeAdjustment' field has been set.
      * @return True if the 'totalChargeAdjustment' field has been set, false otherwise.
      */
    public boolean hasTotalChargeAdjustment() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'totalChargeAdjustment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalChargeAdjustment() {
      totalChargeAdjustment = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalChargeAdjustmentReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalChargeAdjustmentReversed() {
      return totalChargeAdjustmentReversed;
    }


    /**
      * Sets the value of the 'totalChargeAdjustmentReversed' field.
      * @param value The value of 'totalChargeAdjustmentReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalChargeAdjustmentReversed(java.math.BigDecimal value) {
      validate(fields()[45], value);
      this.totalChargeAdjustmentReversed = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'totalChargeAdjustmentReversed' field has been set.
      * @return True if the 'totalChargeAdjustmentReversed' field has been set, false otherwise.
      */
    public boolean hasTotalChargeAdjustmentReversed() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'totalChargeAdjustmentReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalChargeAdjustmentReversed() {
      totalChargeAdjustmentReversed = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalChargeback' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalChargeback() {
      return totalChargeback;
    }


    /**
      * Sets the value of the 'totalChargeback' field.
      * @param value The value of 'totalChargeback'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalChargeback(java.math.BigDecimal value) {
      validate(fields()[46], value);
      this.totalChargeback = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'totalChargeback' field has been set.
      * @return True if the 'totalChargeback' field has been set, false otherwise.
      */
    public boolean hasTotalChargeback() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'totalChargeback' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalChargeback() {
      totalChargeback = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCreditBalanceRefund' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalCreditBalanceRefund() {
      return totalCreditBalanceRefund;
    }


    /**
      * Sets the value of the 'totalCreditBalanceRefund' field.
      * @param value The value of 'totalCreditBalanceRefund'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalCreditBalanceRefund(java.math.BigDecimal value) {
      validate(fields()[47], value);
      this.totalCreditBalanceRefund = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCreditBalanceRefund' field has been set.
      * @return True if the 'totalCreditBalanceRefund' field has been set, false otherwise.
      */
    public boolean hasTotalCreditBalanceRefund() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'totalCreditBalanceRefund' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalCreditBalanceRefund() {
      totalCreditBalanceRefund = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalCreditBalanceRefundReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalCreditBalanceRefundReversed() {
      return totalCreditBalanceRefundReversed;
    }


    /**
      * Sets the value of the 'totalCreditBalanceRefundReversed' field.
      * @param value The value of 'totalCreditBalanceRefundReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalCreditBalanceRefundReversed(java.math.BigDecimal value) {
      validate(fields()[48], value);
      this.totalCreditBalanceRefundReversed = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'totalCreditBalanceRefundReversed' field has been set.
      * @return True if the 'totalCreditBalanceRefundReversed' field has been set, false otherwise.
      */
    public boolean hasTotalCreditBalanceRefundReversed() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'totalCreditBalanceRefundReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalCreditBalanceRefundReversed() {
      totalCreditBalanceRefundReversed = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRepaymentTransaction' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalRepaymentTransaction() {
      return totalRepaymentTransaction;
    }


    /**
      * Sets the value of the 'totalRepaymentTransaction' field.
      * @param value The value of 'totalRepaymentTransaction'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalRepaymentTransaction(java.math.BigDecimal value) {
      validate(fields()[49], value);
      this.totalRepaymentTransaction = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRepaymentTransaction' field has been set.
      * @return True if the 'totalRepaymentTransaction' field has been set, false otherwise.
      */
    public boolean hasTotalRepaymentTransaction() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'totalRepaymentTransaction' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalRepaymentTransaction() {
      totalRepaymentTransaction = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalRepaymentTransactionReversed' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalRepaymentTransactionReversed() {
      return totalRepaymentTransactionReversed;
    }


    /**
      * Sets the value of the 'totalRepaymentTransactionReversed' field.
      * @param value The value of 'totalRepaymentTransactionReversed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setTotalRepaymentTransactionReversed(java.math.BigDecimal value) {
      validate(fields()[50], value);
      this.totalRepaymentTransactionReversed = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRepaymentTransactionReversed' field has been set.
      * @return True if the 'totalRepaymentTransactionReversed' field has been set, false otherwise.
      */
    public boolean hasTotalRepaymentTransactionReversed() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'totalRepaymentTransactionReversed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearTotalRepaymentTransactionReversed() {
      totalRepaymentTransactionReversed = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeOffReasonId' field.
      * @return The value.
      */
    public java.lang.Long getChargeOffReasonId() {
      return chargeOffReasonId;
    }


    /**
      * Sets the value of the 'chargeOffReasonId' field.
      * @param value The value of 'chargeOffReasonId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setChargeOffReasonId(java.lang.Long value) {
      validate(fields()[51], value);
      this.chargeOffReasonId = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeOffReasonId' field has been set.
      * @return True if the 'chargeOffReasonId' field has been set, false otherwise.
      */
    public boolean hasChargeOffReasonId() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'chargeOffReasonId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearChargeOffReasonId() {
      chargeOffReasonId = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeOffReason' field.
      * @return The value.
      */
    public java.lang.String getChargeOffReason() {
      return chargeOffReason;
    }


    /**
      * Sets the value of the 'chargeOffReason' field.
      * @param value The value of 'chargeOffReason'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder setChargeOffReason(java.lang.String value) {
      validate(fields()[52], value);
      this.chargeOffReason = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeOffReason' field has been set.
      * @return True if the 'chargeOffReason' field has been set, false otherwise.
      */
    public boolean hasChargeOffReason() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'chargeOffReason' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanSummaryDataV1.Builder clearChargeOffReason() {
      chargeOffReason = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanSummaryDataV1 build() {
      try {
        LoanSummaryDataV1 record = new LoanSummaryDataV1();
        if (currencyBuilder != null) {
          try {
            record.currency = this.currencyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("currency"));
            throw e;
          }
        } else {
          record.currency = fieldSetFlags()[0] ? this.currency : (org.apache.fineract.avro.generic.v1.CurrencyDataV1) defaultValue(fields()[0]);
        }
        record.principalDisbursed = fieldSetFlags()[1] ? this.principalDisbursed : (java.math.BigDecimal) defaultValue(fields()[1]);
        record.principalAdjustments = fieldSetFlags()[2] ? this.principalAdjustments : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.principalPaid = fieldSetFlags()[3] ? this.principalPaid : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.principalWrittenOff = fieldSetFlags()[4] ? this.principalWrittenOff : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.principalOutstanding = fieldSetFlags()[5] ? this.principalOutstanding : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.principalOverdue = fieldSetFlags()[6] ? this.principalOverdue : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.interestCharged = fieldSetFlags()[7] ? this.interestCharged : (java.math.BigDecimal) defaultValue(fields()[7]);
        record.interestPaid = fieldSetFlags()[8] ? this.interestPaid : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.interestWaived = fieldSetFlags()[9] ? this.interestWaived : (java.math.BigDecimal) defaultValue(fields()[9]);
        record.interestWrittenOff = fieldSetFlags()[10] ? this.interestWrittenOff : (java.math.BigDecimal) defaultValue(fields()[10]);
        record.interestOutstanding = fieldSetFlags()[11] ? this.interestOutstanding : (java.math.BigDecimal) defaultValue(fields()[11]);
        record.interestOverdue = fieldSetFlags()[12] ? this.interestOverdue : (java.math.BigDecimal) defaultValue(fields()[12]);
        record.feeChargesCharged = fieldSetFlags()[13] ? this.feeChargesCharged : (java.math.BigDecimal) defaultValue(fields()[13]);
        record.feeChargesDueAtDisbursementCharged = fieldSetFlags()[14] ? this.feeChargesDueAtDisbursementCharged : (java.math.BigDecimal) defaultValue(fields()[14]);
        record.feeChargesPaid = fieldSetFlags()[15] ? this.feeChargesPaid : (java.math.BigDecimal) defaultValue(fields()[15]);
        record.feeChargesWaived = fieldSetFlags()[16] ? this.feeChargesWaived : (java.math.BigDecimal) defaultValue(fields()[16]);
        record.feeChargesWrittenOff = fieldSetFlags()[17] ? this.feeChargesWrittenOff : (java.math.BigDecimal) defaultValue(fields()[17]);
        record.feeChargesOutstanding = fieldSetFlags()[18] ? this.feeChargesOutstanding : (java.math.BigDecimal) defaultValue(fields()[18]);
        record.feeChargesOverdue = fieldSetFlags()[19] ? this.feeChargesOverdue : (java.math.BigDecimal) defaultValue(fields()[19]);
        record.penaltyChargesCharged = fieldSetFlags()[20] ? this.penaltyChargesCharged : (java.math.BigDecimal) defaultValue(fields()[20]);
        record.penaltyChargesPaid = fieldSetFlags()[21] ? this.penaltyChargesPaid : (java.math.BigDecimal) defaultValue(fields()[21]);
        record.penaltyChargesWaived = fieldSetFlags()[22] ? this.penaltyChargesWaived : (java.math.BigDecimal) defaultValue(fields()[22]);
        record.penaltyChargesWrittenOff = fieldSetFlags()[23] ? this.penaltyChargesWrittenOff : (java.math.BigDecimal) defaultValue(fields()[23]);
        record.penaltyChargesOutstanding = fieldSetFlags()[24] ? this.penaltyChargesOutstanding : (java.math.BigDecimal) defaultValue(fields()[24]);
        record.penaltyChargesOverdue = fieldSetFlags()[25] ? this.penaltyChargesOverdue : (java.math.BigDecimal) defaultValue(fields()[25]);
        record.totalExpectedRepayment = fieldSetFlags()[26] ? this.totalExpectedRepayment : (java.math.BigDecimal) defaultValue(fields()[26]);
        record.totalRepayment = fieldSetFlags()[27] ? this.totalRepayment : (java.math.BigDecimal) defaultValue(fields()[27]);
        record.totalExpectedCostOfLoan = fieldSetFlags()[28] ? this.totalExpectedCostOfLoan : (java.math.BigDecimal) defaultValue(fields()[28]);
        record.totalCostOfLoan = fieldSetFlags()[29] ? this.totalCostOfLoan : (java.math.BigDecimal) defaultValue(fields()[29]);
        record.totalWaived = fieldSetFlags()[30] ? this.totalWaived : (java.math.BigDecimal) defaultValue(fields()[30]);
        record.totalWrittenOff = fieldSetFlags()[31] ? this.totalWrittenOff : (java.math.BigDecimal) defaultValue(fields()[31]);
        record.totalOutstanding = fieldSetFlags()[32] ? this.totalOutstanding : (java.math.BigDecimal) defaultValue(fields()[32]);
        record.totalOverdue = fieldSetFlags()[33] ? this.totalOverdue : (java.math.BigDecimal) defaultValue(fields()[33]);
        record.totalRecovered = fieldSetFlags()[34] ? this.totalRecovered : (java.math.BigDecimal) defaultValue(fields()[34]);
        record.overdueSinceDate = fieldSetFlags()[35] ? this.overdueSinceDate : (java.lang.String) defaultValue(fields()[35]);
        record.writeoffReasonId = fieldSetFlags()[36] ? this.writeoffReasonId : (java.lang.Long) defaultValue(fields()[36]);
        record.writeoffReason = fieldSetFlags()[37] ? this.writeoffReason : (java.lang.String) defaultValue(fields()[37]);
        record.totalMerchantRefund = fieldSetFlags()[38] ? this.totalMerchantRefund : (java.math.BigDecimal) defaultValue(fields()[38]);
        record.totalMerchantRefundReversed = fieldSetFlags()[39] ? this.totalMerchantRefundReversed : (java.math.BigDecimal) defaultValue(fields()[39]);
        record.totalPayoutRefund = fieldSetFlags()[40] ? this.totalPayoutRefund : (java.math.BigDecimal) defaultValue(fields()[40]);
        record.totalPayoutRefundReversed = fieldSetFlags()[41] ? this.totalPayoutRefundReversed : (java.math.BigDecimal) defaultValue(fields()[41]);
        record.totalGoodwillCredit = fieldSetFlags()[42] ? this.totalGoodwillCredit : (java.math.BigDecimal) defaultValue(fields()[42]);
        record.totalGoodwillCreditReversed = fieldSetFlags()[43] ? this.totalGoodwillCreditReversed : (java.math.BigDecimal) defaultValue(fields()[43]);
        record.totalChargeAdjustment = fieldSetFlags()[44] ? this.totalChargeAdjustment : (java.math.BigDecimal) defaultValue(fields()[44]);
        record.totalChargeAdjustmentReversed = fieldSetFlags()[45] ? this.totalChargeAdjustmentReversed : (java.math.BigDecimal) defaultValue(fields()[45]);
        record.totalChargeback = fieldSetFlags()[46] ? this.totalChargeback : (java.math.BigDecimal) defaultValue(fields()[46]);
        record.totalCreditBalanceRefund = fieldSetFlags()[47] ? this.totalCreditBalanceRefund : (java.math.BigDecimal) defaultValue(fields()[47]);
        record.totalCreditBalanceRefundReversed = fieldSetFlags()[48] ? this.totalCreditBalanceRefundReversed : (java.math.BigDecimal) defaultValue(fields()[48]);
        record.totalRepaymentTransaction = fieldSetFlags()[49] ? this.totalRepaymentTransaction : (java.math.BigDecimal) defaultValue(fields()[49]);
        record.totalRepaymentTransactionReversed = fieldSetFlags()[50] ? this.totalRepaymentTransactionReversed : (java.math.BigDecimal) defaultValue(fields()[50]);
        record.chargeOffReasonId = fieldSetFlags()[51] ? this.chargeOffReasonId : (java.lang.Long) defaultValue(fields()[51]);
        record.chargeOffReason = fieldSetFlags()[52] ? this.chargeOffReason : (java.lang.String) defaultValue(fields()[52]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanSummaryDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanSummaryDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanSummaryDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanSummaryDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










