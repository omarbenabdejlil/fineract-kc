/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanInstallmentChargeDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -7556657262511005480L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanInstallmentChargeDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"installmentNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"dueDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"amountOutstanding\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"amountWaived\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"paid\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"waived\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"amountAccrued\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"amountUnrecognized\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanInstallmentChargeDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanInstallmentChargeDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanInstallmentChargeDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanInstallmentChargeDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanInstallmentChargeDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanInstallmentChargeDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanInstallmentChargeDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanInstallmentChargeDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanInstallmentChargeDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Integer installmentNumber;
  private java.lang.String dueDate;
  private java.math.BigDecimal amount;
  private java.math.BigDecimal amountOutstanding;
  private java.math.BigDecimal amountWaived;
  private java.lang.Boolean paid;
  private java.lang.Boolean waived;
  private java.math.BigDecimal amountAccrued;
  private java.math.BigDecimal amountUnrecognized;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanInstallmentChargeDataV1() {}

  /**
   * All-args constructor.
   * @param installmentNumber The new value for installmentNumber
   * @param dueDate The new value for dueDate
   * @param amount The new value for amount
   * @param amountOutstanding The new value for amountOutstanding
   * @param amountWaived The new value for amountWaived
   * @param paid The new value for paid
   * @param waived The new value for waived
   * @param amountAccrued The new value for amountAccrued
   * @param amountUnrecognized The new value for amountUnrecognized
   */
  public LoanInstallmentChargeDataV1(java.lang.Integer installmentNumber, java.lang.String dueDate, java.math.BigDecimal amount, java.math.BigDecimal amountOutstanding, java.math.BigDecimal amountWaived, java.lang.Boolean paid, java.lang.Boolean waived, java.math.BigDecimal amountAccrued, java.math.BigDecimal amountUnrecognized) {
    this.installmentNumber = installmentNumber;
    this.dueDate = dueDate;
    this.amount = amount;
    this.amountOutstanding = amountOutstanding;
    this.amountWaived = amountWaived;
    this.paid = paid;
    this.waived = waived;
    this.amountAccrued = amountAccrued;
    this.amountUnrecognized = amountUnrecognized;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return installmentNumber;
    case 1: return dueDate;
    case 2: return amount;
    case 3: return amountOutstanding;
    case 4: return amountWaived;
    case 5: return paid;
    case 6: return waived;
    case 7: return amountAccrued;
    case 8: return amountUnrecognized;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: installmentNumber = (java.lang.Integer)value$; break;
    case 1: dueDate = value$ != null ? value$.toString() : null; break;
    case 2: amount = (java.math.BigDecimal)value$; break;
    case 3: amountOutstanding = (java.math.BigDecimal)value$; break;
    case 4: amountWaived = (java.math.BigDecimal)value$; break;
    case 5: paid = (java.lang.Boolean)value$; break;
    case 6: waived = (java.lang.Boolean)value$; break;
    case 7: amountAccrued = (java.math.BigDecimal)value$; break;
    case 8: amountUnrecognized = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'installmentNumber' field.
   * @return The value of the 'installmentNumber' field.
   */
  public java.lang.Integer getInstallmentNumber() {
    return installmentNumber;
  }


  /**
   * Sets the value of the 'installmentNumber' field.
   * @param value the value to set.
   */
  public void setInstallmentNumber(java.lang.Integer value) {
    this.installmentNumber = value;
  }

  /**
   * Gets the value of the 'dueDate' field.
   * @return The value of the 'dueDate' field.
   */
  public java.lang.String getDueDate() {
    return dueDate;
  }


  /**
   * Sets the value of the 'dueDate' field.
   * @param value the value to set.
   */
  public void setDueDate(java.lang.String value) {
    this.dueDate = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'amountOutstanding' field.
   * @return The value of the 'amountOutstanding' field.
   */
  public java.math.BigDecimal getAmountOutstanding() {
    return amountOutstanding;
  }


  /**
   * Sets the value of the 'amountOutstanding' field.
   * @param value the value to set.
   */
  public void setAmountOutstanding(java.math.BigDecimal value) {
    this.amountOutstanding = value;
  }

  /**
   * Gets the value of the 'amountWaived' field.
   * @return The value of the 'amountWaived' field.
   */
  public java.math.BigDecimal getAmountWaived() {
    return amountWaived;
  }


  /**
   * Sets the value of the 'amountWaived' field.
   * @param value the value to set.
   */
  public void setAmountWaived(java.math.BigDecimal value) {
    this.amountWaived = value;
  }

  /**
   * Gets the value of the 'paid' field.
   * @return The value of the 'paid' field.
   */
  public java.lang.Boolean getPaid() {
    return paid;
  }


  /**
   * Sets the value of the 'paid' field.
   * @param value the value to set.
   */
  public void setPaid(java.lang.Boolean value) {
    this.paid = value;
  }

  /**
   * Gets the value of the 'waived' field.
   * @return The value of the 'waived' field.
   */
  public java.lang.Boolean getWaived() {
    return waived;
  }


  /**
   * Sets the value of the 'waived' field.
   * @param value the value to set.
   */
  public void setWaived(java.lang.Boolean value) {
    this.waived = value;
  }

  /**
   * Gets the value of the 'amountAccrued' field.
   * @return The value of the 'amountAccrued' field.
   */
  public java.math.BigDecimal getAmountAccrued() {
    return amountAccrued;
  }


  /**
   * Sets the value of the 'amountAccrued' field.
   * @param value the value to set.
   */
  public void setAmountAccrued(java.math.BigDecimal value) {
    this.amountAccrued = value;
  }

  /**
   * Gets the value of the 'amountUnrecognized' field.
   * @return The value of the 'amountUnrecognized' field.
   */
  public java.math.BigDecimal getAmountUnrecognized() {
    return amountUnrecognized;
  }


  /**
   * Sets the value of the 'amountUnrecognized' field.
   * @param value the value to set.
   */
  public void setAmountUnrecognized(java.math.BigDecimal value) {
    this.amountUnrecognized = value;
  }

  /**
   * Creates a new LoanInstallmentChargeDataV1 RecordBuilder.
   * @return A new LoanInstallmentChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder();
  }

  /**
   * Creates a new LoanInstallmentChargeDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanInstallmentChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanInstallmentChargeDataV1 RecordBuilder by copying an existing LoanInstallmentChargeDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanInstallmentChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanInstallmentChargeDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanInstallmentChargeDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanInstallmentChargeDataV1> {

    private java.lang.Integer installmentNumber;
    private java.lang.String dueDate;
    private java.math.BigDecimal amount;
    private java.math.BigDecimal amountOutstanding;
    private java.math.BigDecimal amountWaived;
    private java.lang.Boolean paid;
    private java.lang.Boolean waived;
    private java.math.BigDecimal amountAccrued;
    private java.math.BigDecimal amountUnrecognized;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.installmentNumber)) {
        this.installmentNumber = data().deepCopy(fields()[0].schema(), other.installmentNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[1].schema(), other.dueDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amountOutstanding)) {
        this.amountOutstanding = data().deepCopy(fields()[3].schema(), other.amountOutstanding);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amountWaived)) {
        this.amountWaived = data().deepCopy(fields()[4].schema(), other.amountWaived);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paid)) {
        this.paid = data().deepCopy(fields()[5].schema(), other.paid);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.waived)) {
        this.waived = data().deepCopy(fields()[6].schema(), other.waived);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.amountAccrued)) {
        this.amountAccrued = data().deepCopy(fields()[7].schema(), other.amountAccrued);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.amountUnrecognized)) {
        this.amountUnrecognized = data().deepCopy(fields()[8].schema(), other.amountUnrecognized);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanInstallmentChargeDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.installmentNumber)) {
        this.installmentNumber = data().deepCopy(fields()[0].schema(), other.installmentNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[1].schema(), other.dueDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amountOutstanding)) {
        this.amountOutstanding = data().deepCopy(fields()[3].schema(), other.amountOutstanding);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amountWaived)) {
        this.amountWaived = data().deepCopy(fields()[4].schema(), other.amountWaived);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paid)) {
        this.paid = data().deepCopy(fields()[5].schema(), other.paid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.waived)) {
        this.waived = data().deepCopy(fields()[6].schema(), other.waived);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.amountAccrued)) {
        this.amountAccrued = data().deepCopy(fields()[7].schema(), other.amountAccrued);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.amountUnrecognized)) {
        this.amountUnrecognized = data().deepCopy(fields()[8].schema(), other.amountUnrecognized);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'installmentNumber' field.
      * @return The value.
      */
    public java.lang.Integer getInstallmentNumber() {
      return installmentNumber;
    }


    /**
      * Sets the value of the 'installmentNumber' field.
      * @param value The value of 'installmentNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setInstallmentNumber(java.lang.Integer value) {
      validate(fields()[0], value);
      this.installmentNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'installmentNumber' field has been set.
      * @return True if the 'installmentNumber' field has been set, false otherwise.
      */
    public boolean hasInstallmentNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'installmentNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearInstallmentNumber() {
      installmentNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dueDate' field.
      * @return The value.
      */
    public java.lang.String getDueDate() {
      return dueDate;
    }


    /**
      * Sets the value of the 'dueDate' field.
      * @param value The value of 'dueDate'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setDueDate(java.lang.String value) {
      validate(fields()[1], value);
      this.dueDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dueDate' field has been set.
      * @return True if the 'dueDate' field has been set, false otherwise.
      */
    public boolean hasDueDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dueDate' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearDueDate() {
      dueDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountOutstanding' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmountOutstanding() {
      return amountOutstanding;
    }


    /**
      * Sets the value of the 'amountOutstanding' field.
      * @param value The value of 'amountOutstanding'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setAmountOutstanding(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amountOutstanding = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amountOutstanding' field has been set.
      * @return True if the 'amountOutstanding' field has been set, false otherwise.
      */
    public boolean hasAmountOutstanding() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amountOutstanding' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearAmountOutstanding() {
      amountOutstanding = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountWaived' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmountWaived() {
      return amountWaived;
    }


    /**
      * Sets the value of the 'amountWaived' field.
      * @param value The value of 'amountWaived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setAmountWaived(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.amountWaived = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amountWaived' field has been set.
      * @return True if the 'amountWaived' field has been set, false otherwise.
      */
    public boolean hasAmountWaived() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amountWaived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearAmountWaived() {
      amountWaived = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paid' field.
      * @return The value.
      */
    public java.lang.Boolean getPaid() {
      return paid;
    }


    /**
      * Sets the value of the 'paid' field.
      * @param value The value of 'paid'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setPaid(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.paid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paid' field has been set.
      * @return True if the 'paid' field has been set, false otherwise.
      */
    public boolean hasPaid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paid' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearPaid() {
      paid = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'waived' field.
      * @return The value.
      */
    public java.lang.Boolean getWaived() {
      return waived;
    }


    /**
      * Sets the value of the 'waived' field.
      * @param value The value of 'waived'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setWaived(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.waived = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'waived' field has been set.
      * @return True if the 'waived' field has been set, false otherwise.
      */
    public boolean hasWaived() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'waived' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearWaived() {
      waived = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountAccrued' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmountAccrued() {
      return amountAccrued;
    }


    /**
      * Sets the value of the 'amountAccrued' field.
      * @param value The value of 'amountAccrued'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setAmountAccrued(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.amountAccrued = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'amountAccrued' field has been set.
      * @return True if the 'amountAccrued' field has been set, false otherwise.
      */
    public boolean hasAmountAccrued() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'amountAccrued' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearAmountAccrued() {
      amountAccrued = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountUnrecognized' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmountUnrecognized() {
      return amountUnrecognized;
    }


    /**
      * Sets the value of the 'amountUnrecognized' field.
      * @param value The value of 'amountUnrecognized'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder setAmountUnrecognized(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.amountUnrecognized = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'amountUnrecognized' field has been set.
      * @return True if the 'amountUnrecognized' field has been set, false otherwise.
      */
    public boolean hasAmountUnrecognized() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'amountUnrecognized' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanInstallmentChargeDataV1.Builder clearAmountUnrecognized() {
      amountUnrecognized = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanInstallmentChargeDataV1 build() {
      try {
        LoanInstallmentChargeDataV1 record = new LoanInstallmentChargeDataV1();
        record.installmentNumber = fieldSetFlags()[0] ? this.installmentNumber : (java.lang.Integer) defaultValue(fields()[0]);
        record.dueDate = fieldSetFlags()[1] ? this.dueDate : (java.lang.String) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.amountOutstanding = fieldSetFlags()[3] ? this.amountOutstanding : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.amountWaived = fieldSetFlags()[4] ? this.amountWaived : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.paid = fieldSetFlags()[5] ? this.paid : (java.lang.Boolean) defaultValue(fields()[5]);
        record.waived = fieldSetFlags()[6] ? this.waived : (java.lang.Boolean) defaultValue(fields()[6]);
        record.amountAccrued = fieldSetFlags()[7] ? this.amountAccrued : (java.math.BigDecimal) defaultValue(fields()[7]);
        record.amountUnrecognized = fieldSetFlags()[8] ? this.amountUnrecognized : (java.math.BigDecimal) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanInstallmentChargeDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanInstallmentChargeDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanInstallmentChargeDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanInstallmentChargeDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










