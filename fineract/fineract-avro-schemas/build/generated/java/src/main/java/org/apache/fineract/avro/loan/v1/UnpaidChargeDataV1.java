/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UnpaidChargeDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -5580136934264167181L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UnpaidChargeDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"chargeId\",\"type\":\"long\"},{\"name\":\"chargeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"outstandingAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<UnpaidChargeDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UnpaidChargeDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UnpaidChargeDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UnpaidChargeDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UnpaidChargeDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UnpaidChargeDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UnpaidChargeDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UnpaidChargeDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UnpaidChargeDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long chargeId;
  private java.lang.String chargeName;
  private java.math.BigDecimal outstandingAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UnpaidChargeDataV1() {}

  /**
   * All-args constructor.
   * @param chargeId The new value for chargeId
   * @param chargeName The new value for chargeName
   * @param outstandingAmount The new value for outstandingAmount
   */
  public UnpaidChargeDataV1(java.lang.Long chargeId, java.lang.String chargeName, java.math.BigDecimal outstandingAmount) {
    this.chargeId = chargeId;
    this.chargeName = chargeName;
    this.outstandingAmount = outstandingAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chargeId;
    case 1: return chargeName;
    case 2: return outstandingAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chargeId = (java.lang.Long)value$; break;
    case 1: chargeName = value$ != null ? value$.toString() : null; break;
    case 2: outstandingAmount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'chargeId' field.
   * @return The value of the 'chargeId' field.
   */
  public long getChargeId() {
    return chargeId;
  }


  /**
   * Sets the value of the 'chargeId' field.
   * @param value the value to set.
   */
  public void setChargeId(long value) {
    this.chargeId = value;
  }

  /**
   * Gets the value of the 'chargeName' field.
   * @return The value of the 'chargeName' field.
   */
  public java.lang.String getChargeName() {
    return chargeName;
  }


  /**
   * Sets the value of the 'chargeName' field.
   * @param value the value to set.
   */
  public void setChargeName(java.lang.String value) {
    this.chargeName = value;
  }

  /**
   * Gets the value of the 'outstandingAmount' field.
   * @return The value of the 'outstandingAmount' field.
   */
  public java.math.BigDecimal getOutstandingAmount() {
    return outstandingAmount;
  }


  /**
   * Sets the value of the 'outstandingAmount' field.
   * @param value the value to set.
   */
  public void setOutstandingAmount(java.math.BigDecimal value) {
    this.outstandingAmount = value;
  }

  /**
   * Creates a new UnpaidChargeDataV1 RecordBuilder.
   * @return A new UnpaidChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder();
  }

  /**
   * Creates a new UnpaidChargeDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UnpaidChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder(other);
    }
  }

  /**
   * Creates a new UnpaidChargeDataV1 RecordBuilder by copying an existing UnpaidChargeDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new UnpaidChargeDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for UnpaidChargeDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UnpaidChargeDataV1>
    implements org.apache.avro.data.RecordBuilder<UnpaidChargeDataV1> {

    private long chargeId;
    private java.lang.String chargeName;
    private java.math.BigDecimal outstandingAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chargeId)) {
        this.chargeId = data().deepCopy(fields()[0].schema(), other.chargeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.chargeName)) {
        this.chargeName = data().deepCopy(fields()[1].schema(), other.chargeName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.outstandingAmount)) {
        this.outstandingAmount = data().deepCopy(fields()[2].schema(), other.outstandingAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing UnpaidChargeDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.chargeId)) {
        this.chargeId = data().deepCopy(fields()[0].schema(), other.chargeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chargeName)) {
        this.chargeName = data().deepCopy(fields()[1].schema(), other.chargeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outstandingAmount)) {
        this.outstandingAmount = data().deepCopy(fields()[2].schema(), other.outstandingAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'chargeId' field.
      * @return The value.
      */
    public long getChargeId() {
      return chargeId;
    }


    /**
      * Sets the value of the 'chargeId' field.
      * @param value The value of 'chargeId'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder setChargeId(long value) {
      validate(fields()[0], value);
      this.chargeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeId' field has been set.
      * @return True if the 'chargeId' field has been set, false otherwise.
      */
    public boolean hasChargeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'chargeId' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder clearChargeId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chargeName' field.
      * @return The value.
      */
    public java.lang.String getChargeName() {
      return chargeName;
    }


    /**
      * Sets the value of the 'chargeName' field.
      * @param value The value of 'chargeName'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder setChargeName(java.lang.String value) {
      validate(fields()[1], value);
      this.chargeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chargeName' field has been set.
      * @return True if the 'chargeName' field has been set, false otherwise.
      */
    public boolean hasChargeName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'chargeName' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder clearChargeName() {
      chargeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'outstandingAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getOutstandingAmount() {
      return outstandingAmount;
    }


    /**
      * Sets the value of the 'outstandingAmount' field.
      * @param value The value of 'outstandingAmount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder setOutstandingAmount(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.outstandingAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'outstandingAmount' field has been set.
      * @return True if the 'outstandingAmount' field has been set, false otherwise.
      */
    public boolean hasOutstandingAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'outstandingAmount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.UnpaidChargeDataV1.Builder clearOutstandingAmount() {
      outstandingAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UnpaidChargeDataV1 build() {
      try {
        UnpaidChargeDataV1 record = new UnpaidChargeDataV1();
        record.chargeId = fieldSetFlags()[0] ? this.chargeId : (java.lang.Long) defaultValue(fields()[0]);
        record.chargeName = fieldSetFlags()[1] ? this.chargeName : (java.lang.String) defaultValue(fields()[1]);
        record.outstandingAmount = fieldSetFlags()[2] ? this.outstandingAmount : (java.math.BigDecimal) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UnpaidChargeDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<UnpaidChargeDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UnpaidChargeDataV1>
    READER$ = (org.apache.avro.io.DatumReader<UnpaidChargeDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










