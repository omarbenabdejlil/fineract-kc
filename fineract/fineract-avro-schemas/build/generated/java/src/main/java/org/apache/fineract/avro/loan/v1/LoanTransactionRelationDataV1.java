/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanTransactionRelationDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 4992002507466145731L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanTransactionRelationDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"fromLoanTransaction\",\"type\":\"long\"},{\"name\":\"toLoanTransaction\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"toLoanCharge\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"relationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"paymentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanTransactionRelationDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanTransactionRelationDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanTransactionRelationDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanTransactionRelationDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanTransactionRelationDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanTransactionRelationDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanTransactionRelationDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanTransactionRelationDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanTransactionRelationDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long fromLoanTransaction;
  private java.lang.Long toLoanTransaction;
  private java.lang.Long toLoanCharge;
  private java.math.BigDecimal amount;
  private java.lang.String relationType;
  private java.lang.String paymentType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanTransactionRelationDataV1() {}

  /**
   * All-args constructor.
   * @param fromLoanTransaction The new value for fromLoanTransaction
   * @param toLoanTransaction The new value for toLoanTransaction
   * @param toLoanCharge The new value for toLoanCharge
   * @param amount The new value for amount
   * @param relationType The new value for relationType
   * @param paymentType The new value for paymentType
   */
  public LoanTransactionRelationDataV1(java.lang.Long fromLoanTransaction, java.lang.Long toLoanTransaction, java.lang.Long toLoanCharge, java.math.BigDecimal amount, java.lang.String relationType, java.lang.String paymentType) {
    this.fromLoanTransaction = fromLoanTransaction;
    this.toLoanTransaction = toLoanTransaction;
    this.toLoanCharge = toLoanCharge;
    this.amount = amount;
    this.relationType = relationType;
    this.paymentType = paymentType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fromLoanTransaction;
    case 1: return toLoanTransaction;
    case 2: return toLoanCharge;
    case 3: return amount;
    case 4: return relationType;
    case 5: return paymentType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fromLoanTransaction = (java.lang.Long)value$; break;
    case 1: toLoanTransaction = (java.lang.Long)value$; break;
    case 2: toLoanCharge = (java.lang.Long)value$; break;
    case 3: amount = (java.math.BigDecimal)value$; break;
    case 4: relationType = value$ != null ? value$.toString() : null; break;
    case 5: paymentType = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'fromLoanTransaction' field.
   * @return The value of the 'fromLoanTransaction' field.
   */
  public long getFromLoanTransaction() {
    return fromLoanTransaction;
  }


  /**
   * Sets the value of the 'fromLoanTransaction' field.
   * @param value the value to set.
   */
  public void setFromLoanTransaction(long value) {
    this.fromLoanTransaction = value;
  }

  /**
   * Gets the value of the 'toLoanTransaction' field.
   * @return The value of the 'toLoanTransaction' field.
   */
  public java.lang.Long getToLoanTransaction() {
    return toLoanTransaction;
  }


  /**
   * Sets the value of the 'toLoanTransaction' field.
   * @param value the value to set.
   */
  public void setToLoanTransaction(java.lang.Long value) {
    this.toLoanTransaction = value;
  }

  /**
   * Gets the value of the 'toLoanCharge' field.
   * @return The value of the 'toLoanCharge' field.
   */
  public java.lang.Long getToLoanCharge() {
    return toLoanCharge;
  }


  /**
   * Sets the value of the 'toLoanCharge' field.
   * @param value the value to set.
   */
  public void setToLoanCharge(java.lang.Long value) {
    this.toLoanCharge = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'relationType' field.
   * @return The value of the 'relationType' field.
   */
  public java.lang.String getRelationType() {
    return relationType;
  }


  /**
   * Sets the value of the 'relationType' field.
   * @param value the value to set.
   */
  public void setRelationType(java.lang.String value) {
    this.relationType = value;
  }

  /**
   * Gets the value of the 'paymentType' field.
   * @return The value of the 'paymentType' field.
   */
  public java.lang.String getPaymentType() {
    return paymentType;
  }


  /**
   * Sets the value of the 'paymentType' field.
   * @param value the value to set.
   */
  public void setPaymentType(java.lang.String value) {
    this.paymentType = value;
  }

  /**
   * Creates a new LoanTransactionRelationDataV1 RecordBuilder.
   * @return A new LoanTransactionRelationDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder();
  }

  /**
   * Creates a new LoanTransactionRelationDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanTransactionRelationDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanTransactionRelationDataV1 RecordBuilder by copying an existing LoanTransactionRelationDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanTransactionRelationDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanTransactionRelationDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanTransactionRelationDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanTransactionRelationDataV1> {

    private long fromLoanTransaction;
    private java.lang.Long toLoanTransaction;
    private java.lang.Long toLoanCharge;
    private java.math.BigDecimal amount;
    private java.lang.String relationType;
    private java.lang.String paymentType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fromLoanTransaction)) {
        this.fromLoanTransaction = data().deepCopy(fields()[0].schema(), other.fromLoanTransaction);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.toLoanTransaction)) {
        this.toLoanTransaction = data().deepCopy(fields()[1].schema(), other.toLoanTransaction);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.toLoanCharge)) {
        this.toLoanCharge = data().deepCopy(fields()[2].schema(), other.toLoanCharge);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.relationType)) {
        this.relationType = data().deepCopy(fields()[4].schema(), other.relationType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[5].schema(), other.paymentType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanTransactionRelationDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.fromLoanTransaction)) {
        this.fromLoanTransaction = data().deepCopy(fields()[0].schema(), other.fromLoanTransaction);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.toLoanTransaction)) {
        this.toLoanTransaction = data().deepCopy(fields()[1].schema(), other.toLoanTransaction);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toLoanCharge)) {
        this.toLoanCharge = data().deepCopy(fields()[2].schema(), other.toLoanCharge);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.relationType)) {
        this.relationType = data().deepCopy(fields()[4].schema(), other.relationType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[5].schema(), other.paymentType);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'fromLoanTransaction' field.
      * @return The value.
      */
    public long getFromLoanTransaction() {
      return fromLoanTransaction;
    }


    /**
      * Sets the value of the 'fromLoanTransaction' field.
      * @param value The value of 'fromLoanTransaction'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setFromLoanTransaction(long value) {
      validate(fields()[0], value);
      this.fromLoanTransaction = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fromLoanTransaction' field has been set.
      * @return True if the 'fromLoanTransaction' field has been set, false otherwise.
      */
    public boolean hasFromLoanTransaction() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fromLoanTransaction' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearFromLoanTransaction() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'toLoanTransaction' field.
      * @return The value.
      */
    public java.lang.Long getToLoanTransaction() {
      return toLoanTransaction;
    }


    /**
      * Sets the value of the 'toLoanTransaction' field.
      * @param value The value of 'toLoanTransaction'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setToLoanTransaction(java.lang.Long value) {
      validate(fields()[1], value);
      this.toLoanTransaction = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'toLoanTransaction' field has been set.
      * @return True if the 'toLoanTransaction' field has been set, false otherwise.
      */
    public boolean hasToLoanTransaction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'toLoanTransaction' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearToLoanTransaction() {
      toLoanTransaction = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toLoanCharge' field.
      * @return The value.
      */
    public java.lang.Long getToLoanCharge() {
      return toLoanCharge;
    }


    /**
      * Sets the value of the 'toLoanCharge' field.
      * @param value The value of 'toLoanCharge'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setToLoanCharge(java.lang.Long value) {
      validate(fields()[2], value);
      this.toLoanCharge = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toLoanCharge' field has been set.
      * @return True if the 'toLoanCharge' field has been set, false otherwise.
      */
    public boolean hasToLoanCharge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toLoanCharge' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearToLoanCharge() {
      toLoanCharge = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationType' field.
      * @return The value.
      */
    public java.lang.String getRelationType() {
      return relationType;
    }


    /**
      * Sets the value of the 'relationType' field.
      * @param value The value of 'relationType'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setRelationType(java.lang.String value) {
      validate(fields()[4], value);
      this.relationType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'relationType' field has been set.
      * @return True if the 'relationType' field has been set, false otherwise.
      */
    public boolean hasRelationType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'relationType' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearRelationType() {
      relationType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentType' field.
      * @return The value.
      */
    public java.lang.String getPaymentType() {
      return paymentType;
    }


    /**
      * Sets the value of the 'paymentType' field.
      * @param value The value of 'paymentType'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder setPaymentType(java.lang.String value) {
      validate(fields()[5], value);
      this.paymentType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentType' field has been set.
      * @return True if the 'paymentType' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentType' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTransactionRelationDataV1.Builder clearPaymentType() {
      paymentType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanTransactionRelationDataV1 build() {
      try {
        LoanTransactionRelationDataV1 record = new LoanTransactionRelationDataV1();
        record.fromLoanTransaction = fieldSetFlags()[0] ? this.fromLoanTransaction : (java.lang.Long) defaultValue(fields()[0]);
        record.toLoanTransaction = fieldSetFlags()[1] ? this.toLoanTransaction : (java.lang.Long) defaultValue(fields()[1]);
        record.toLoanCharge = fieldSetFlags()[2] ? this.toLoanCharge : (java.lang.Long) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.relationType = fieldSetFlags()[4] ? this.relationType : (java.lang.String) defaultValue(fields()[4]);
        record.paymentType = fieldSetFlags()[5] ? this.paymentType : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanTransactionRelationDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanTransactionRelationDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanTransactionRelationDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanTransactionRelationDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










