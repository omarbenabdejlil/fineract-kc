/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.generic.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CurrencyDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = 6742102689043092191L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CurrencyDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalPlaces\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"inMultiplesOf\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"displaySymbol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nameCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"displayLabel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CurrencyDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CurrencyDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CurrencyDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CurrencyDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CurrencyDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CurrencyDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CurrencyDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CurrencyDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CurrencyDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String code;
  private java.lang.String name;
  private java.lang.Integer decimalPlaces;
  private java.lang.Integer inMultiplesOf;
  private java.lang.String displaySymbol;
  private java.lang.String nameCode;
  private java.lang.String displayLabel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CurrencyDataV1() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param name The new value for name
   * @param decimalPlaces The new value for decimalPlaces
   * @param inMultiplesOf The new value for inMultiplesOf
   * @param displaySymbol The new value for displaySymbol
   * @param nameCode The new value for nameCode
   * @param displayLabel The new value for displayLabel
   */
  public CurrencyDataV1(java.lang.String code, java.lang.String name, java.lang.Integer decimalPlaces, java.lang.Integer inMultiplesOf, java.lang.String displaySymbol, java.lang.String nameCode, java.lang.String displayLabel) {
    this.code = code;
    this.name = name;
    this.decimalPlaces = decimalPlaces;
    this.inMultiplesOf = inMultiplesOf;
    this.displaySymbol = displaySymbol;
    this.nameCode = nameCode;
    this.displayLabel = displayLabel;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return name;
    case 2: return decimalPlaces;
    case 3: return inMultiplesOf;
    case 4: return displaySymbol;
    case 5: return nameCode;
    case 6: return displayLabel;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: decimalPlaces = (java.lang.Integer)value$; break;
    case 3: inMultiplesOf = (java.lang.Integer)value$; break;
    case 4: displaySymbol = value$ != null ? value$.toString() : null; break;
    case 5: nameCode = value$ != null ? value$.toString() : null; break;
    case 6: displayLabel = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.String getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.String value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'decimalPlaces' field.
   * @return The value of the 'decimalPlaces' field.
   */
  public java.lang.Integer getDecimalPlaces() {
    return decimalPlaces;
  }


  /**
   * Sets the value of the 'decimalPlaces' field.
   * @param value the value to set.
   */
  public void setDecimalPlaces(java.lang.Integer value) {
    this.decimalPlaces = value;
  }

  /**
   * Gets the value of the 'inMultiplesOf' field.
   * @return The value of the 'inMultiplesOf' field.
   */
  public java.lang.Integer getInMultiplesOf() {
    return inMultiplesOf;
  }


  /**
   * Sets the value of the 'inMultiplesOf' field.
   * @param value the value to set.
   */
  public void setInMultiplesOf(java.lang.Integer value) {
    this.inMultiplesOf = value;
  }

  /**
   * Gets the value of the 'displaySymbol' field.
   * @return The value of the 'displaySymbol' field.
   */
  public java.lang.String getDisplaySymbol() {
    return displaySymbol;
  }


  /**
   * Sets the value of the 'displaySymbol' field.
   * @param value the value to set.
   */
  public void setDisplaySymbol(java.lang.String value) {
    this.displaySymbol = value;
  }

  /**
   * Gets the value of the 'nameCode' field.
   * @return The value of the 'nameCode' field.
   */
  public java.lang.String getNameCode() {
    return nameCode;
  }


  /**
   * Sets the value of the 'nameCode' field.
   * @param value the value to set.
   */
  public void setNameCode(java.lang.String value) {
    this.nameCode = value;
  }

  /**
   * Gets the value of the 'displayLabel' field.
   * @return The value of the 'displayLabel' field.
   */
  public java.lang.String getDisplayLabel() {
    return displayLabel;
  }


  /**
   * Sets the value of the 'displayLabel' field.
   * @param value the value to set.
   */
  public void setDisplayLabel(java.lang.String value) {
    this.displayLabel = value;
  }

  /**
   * Creates a new CurrencyDataV1 RecordBuilder.
   * @return A new CurrencyDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder();
  }

  /**
   * Creates a new CurrencyDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CurrencyDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder newBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder(other);
    }
  }

  /**
   * Creates a new CurrencyDataV1 RecordBuilder by copying an existing CurrencyDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new CurrencyDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder newBuilder(org.apache.fineract.avro.generic.v1.CurrencyDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for CurrencyDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CurrencyDataV1>
    implements org.apache.avro.data.RecordBuilder<CurrencyDataV1> {

    private java.lang.String code;
    private java.lang.String name;
    private java.lang.Integer decimalPlaces;
    private java.lang.Integer inMultiplesOf;
    private java.lang.String displaySymbol;
    private java.lang.String nameCode;
    private java.lang.String displayLabel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.decimalPlaces)) {
        this.decimalPlaces = data().deepCopy(fields()[2].schema(), other.decimalPlaces);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.inMultiplesOf)) {
        this.inMultiplesOf = data().deepCopy(fields()[3].schema(), other.inMultiplesOf);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.displaySymbol)) {
        this.displaySymbol = data().deepCopy(fields()[4].schema(), other.displaySymbol);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.nameCode)) {
        this.nameCode = data().deepCopy(fields()[5].schema(), other.nameCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.displayLabel)) {
        this.displayLabel = data().deepCopy(fields()[6].schema(), other.displayLabel);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CurrencyDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.generic.v1.CurrencyDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.decimalPlaces)) {
        this.decimalPlaces = data().deepCopy(fields()[2].schema(), other.decimalPlaces);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inMultiplesOf)) {
        this.inMultiplesOf = data().deepCopy(fields()[3].schema(), other.inMultiplesOf);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.displaySymbol)) {
        this.displaySymbol = data().deepCopy(fields()[4].schema(), other.displaySymbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nameCode)) {
        this.nameCode = data().deepCopy(fields()[5].schema(), other.nameCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.displayLabel)) {
        this.displayLabel = data().deepCopy(fields()[6].schema(), other.displayLabel);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.String getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setCode(java.lang.String value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimalPlaces' field.
      * @return The value.
      */
    public java.lang.Integer getDecimalPlaces() {
      return decimalPlaces;
    }


    /**
      * Sets the value of the 'decimalPlaces' field.
      * @param value The value of 'decimalPlaces'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setDecimalPlaces(java.lang.Integer value) {
      validate(fields()[2], value);
      this.decimalPlaces = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'decimalPlaces' field has been set.
      * @return True if the 'decimalPlaces' field has been set, false otherwise.
      */
    public boolean hasDecimalPlaces() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'decimalPlaces' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearDecimalPlaces() {
      decimalPlaces = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'inMultiplesOf' field.
      * @return The value.
      */
    public java.lang.Integer getInMultiplesOf() {
      return inMultiplesOf;
    }


    /**
      * Sets the value of the 'inMultiplesOf' field.
      * @param value The value of 'inMultiplesOf'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setInMultiplesOf(java.lang.Integer value) {
      validate(fields()[3], value);
      this.inMultiplesOf = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'inMultiplesOf' field has been set.
      * @return True if the 'inMultiplesOf' field has been set, false otherwise.
      */
    public boolean hasInMultiplesOf() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'inMultiplesOf' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearInMultiplesOf() {
      inMultiplesOf = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'displaySymbol' field.
      * @return The value.
      */
    public java.lang.String getDisplaySymbol() {
      return displaySymbol;
    }


    /**
      * Sets the value of the 'displaySymbol' field.
      * @param value The value of 'displaySymbol'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setDisplaySymbol(java.lang.String value) {
      validate(fields()[4], value);
      this.displaySymbol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'displaySymbol' field has been set.
      * @return True if the 'displaySymbol' field has been set, false otherwise.
      */
    public boolean hasDisplaySymbol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'displaySymbol' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearDisplaySymbol() {
      displaySymbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nameCode' field.
      * @return The value.
      */
    public java.lang.String getNameCode() {
      return nameCode;
    }


    /**
      * Sets the value of the 'nameCode' field.
      * @param value The value of 'nameCode'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setNameCode(java.lang.String value) {
      validate(fields()[5], value);
      this.nameCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nameCode' field has been set.
      * @return True if the 'nameCode' field has been set, false otherwise.
      */
    public boolean hasNameCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'nameCode' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearNameCode() {
      nameCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'displayLabel' field.
      * @return The value.
      */
    public java.lang.String getDisplayLabel() {
      return displayLabel;
    }


    /**
      * Sets the value of the 'displayLabel' field.
      * @param value The value of 'displayLabel'.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder setDisplayLabel(java.lang.String value) {
      validate(fields()[6], value);
      this.displayLabel = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'displayLabel' field has been set.
      * @return True if the 'displayLabel' field has been set, false otherwise.
      */
    public boolean hasDisplayLabel() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'displayLabel' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.generic.v1.CurrencyDataV1.Builder clearDisplayLabel() {
      displayLabel = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CurrencyDataV1 build() {
      try {
        CurrencyDataV1 record = new CurrencyDataV1();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.decimalPlaces = fieldSetFlags()[2] ? this.decimalPlaces : (java.lang.Integer) defaultValue(fields()[2]);
        record.inMultiplesOf = fieldSetFlags()[3] ? this.inMultiplesOf : (java.lang.Integer) defaultValue(fields()[3]);
        record.displaySymbol = fieldSetFlags()[4] ? this.displaySymbol : (java.lang.String) defaultValue(fields()[4]);
        record.nameCode = fieldSetFlags()[5] ? this.nameCode : (java.lang.String) defaultValue(fields()[5]);
        record.displayLabel = fieldSetFlags()[6] ? this.displayLabel : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CurrencyDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<CurrencyDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CurrencyDataV1>
    READER$ = (org.apache.avro.io.DatumReader<CurrencyDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.decimalPlaces == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.decimalPlaces);
    }

    if (this.inMultiplesOf == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.inMultiplesOf);
    }

    if (this.displaySymbol == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.displaySymbol);
    }

    if (this.nameCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nameCode);
    }

    if (this.displayLabel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.displayLabel);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.decimalPlaces = null;
      } else {
        this.decimalPlaces = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.inMultiplesOf = null;
      } else {
        this.inMultiplesOf = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.displaySymbol = null;
      } else {
        this.displaySymbol = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nameCode = null;
      } else {
        this.nameCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.displayLabel = null;
      } else {
        this.displayLabel = in.readString();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.decimalPlaces = null;
          } else {
            this.decimalPlaces = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.inMultiplesOf = null;
          } else {
            this.inMultiplesOf = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.displaySymbol = null;
          } else {
            this.displaySymbol = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nameCode = null;
          } else {
            this.nameCode = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.displayLabel = null;
          } else {
            this.displayLabel = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










