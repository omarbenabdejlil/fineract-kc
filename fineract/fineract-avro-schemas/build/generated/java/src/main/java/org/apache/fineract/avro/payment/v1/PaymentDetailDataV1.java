/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.payment.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentDetailDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -423190915611428184L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentDetailDataV1\",\"namespace\":\"org.apache.fineract.avro.payment.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"paymentType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PaymentTypeDataV1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isCashPayment\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"position\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"codeName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isSystemDefined\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}],\"default\":null},{\"name\":\"accountNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"checkNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"routingCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"receiptNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"bankNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentDetailDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentDetailDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentDetailDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentDetailDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentDetailDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentDetailDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentDetailDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentDetailDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentDetailDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 paymentType;
  private java.lang.String accountNumber;
  private java.lang.String checkNumber;
  private java.lang.String routingCode;
  private java.lang.String receiptNumber;
  private java.lang.String bankNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentDetailDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param paymentType The new value for paymentType
   * @param accountNumber The new value for accountNumber
   * @param checkNumber The new value for checkNumber
   * @param routingCode The new value for routingCode
   * @param receiptNumber The new value for receiptNumber
   * @param bankNumber The new value for bankNumber
   */
  public PaymentDetailDataV1(java.lang.Long id, org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 paymentType, java.lang.String accountNumber, java.lang.String checkNumber, java.lang.String routingCode, java.lang.String receiptNumber, java.lang.String bankNumber) {
    this.id = id;
    this.paymentType = paymentType;
    this.accountNumber = accountNumber;
    this.checkNumber = checkNumber;
    this.routingCode = routingCode;
    this.receiptNumber = receiptNumber;
    this.bankNumber = bankNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return paymentType;
    case 2: return accountNumber;
    case 3: return checkNumber;
    case 4: return routingCode;
    case 5: return receiptNumber;
    case 6: return bankNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: paymentType = (org.apache.fineract.avro.payment.v1.PaymentTypeDataV1)value$; break;
    case 2: accountNumber = value$ != null ? value$.toString() : null; break;
    case 3: checkNumber = value$ != null ? value$.toString() : null; break;
    case 4: routingCode = value$ != null ? value$.toString() : null; break;
    case 5: receiptNumber = value$ != null ? value$.toString() : null; break;
    case 6: bankNumber = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'paymentType' field.
   * @return The value of the 'paymentType' field.
   */
  public org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 getPaymentType() {
    return paymentType;
  }


  /**
   * Sets the value of the 'paymentType' field.
   * @param value the value to set.
   */
  public void setPaymentType(org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 value) {
    this.paymentType = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.String getAccountNumber() {
    return accountNumber;
  }


  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.String value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'checkNumber' field.
   * @return The value of the 'checkNumber' field.
   */
  public java.lang.String getCheckNumber() {
    return checkNumber;
  }


  /**
   * Sets the value of the 'checkNumber' field.
   * @param value the value to set.
   */
  public void setCheckNumber(java.lang.String value) {
    this.checkNumber = value;
  }

  /**
   * Gets the value of the 'routingCode' field.
   * @return The value of the 'routingCode' field.
   */
  public java.lang.String getRoutingCode() {
    return routingCode;
  }


  /**
   * Sets the value of the 'routingCode' field.
   * @param value the value to set.
   */
  public void setRoutingCode(java.lang.String value) {
    this.routingCode = value;
  }

  /**
   * Gets the value of the 'receiptNumber' field.
   * @return The value of the 'receiptNumber' field.
   */
  public java.lang.String getReceiptNumber() {
    return receiptNumber;
  }


  /**
   * Sets the value of the 'receiptNumber' field.
   * @param value the value to set.
   */
  public void setReceiptNumber(java.lang.String value) {
    this.receiptNumber = value;
  }

  /**
   * Gets the value of the 'bankNumber' field.
   * @return The value of the 'bankNumber' field.
   */
  public java.lang.String getBankNumber() {
    return bankNumber;
  }


  /**
   * Sets the value of the 'bankNumber' field.
   * @param value the value to set.
   */
  public void setBankNumber(java.lang.String value) {
    this.bankNumber = value;
  }

  /**
   * Creates a new PaymentDetailDataV1 RecordBuilder.
   * @return A new PaymentDetailDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder();
  }

  /**
   * Creates a new PaymentDetailDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentDetailDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder newBuilder(org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder(other);
    }
  }

  /**
   * Creates a new PaymentDetailDataV1 RecordBuilder by copying an existing PaymentDetailDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new PaymentDetailDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder newBuilder(org.apache.fineract.avro.payment.v1.PaymentDetailDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentDetailDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentDetailDataV1>
    implements org.apache.avro.data.RecordBuilder<PaymentDetailDataV1> {

    private java.lang.Long id;
    private org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 paymentType;
    private org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.Builder paymentTypeBuilder;
    private java.lang.String accountNumber;
    private java.lang.String checkNumber;
    private java.lang.String routingCode;
    private java.lang.String receiptNumber;
    private java.lang.String bankNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[1].schema(), other.paymentType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPaymentTypeBuilder()) {
        this.paymentTypeBuilder = org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.newBuilder(other.getPaymentTypeBuilder());
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.checkNumber)) {
        this.checkNumber = data().deepCopy(fields()[3].schema(), other.checkNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.routingCode)) {
        this.routingCode = data().deepCopy(fields()[4].schema(), other.routingCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.receiptNumber)) {
        this.receiptNumber = data().deepCopy(fields()[5].schema(), other.receiptNumber);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.bankNumber)) {
        this.bankNumber = data().deepCopy(fields()[6].schema(), other.bankNumber);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentDetailDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.payment.v1.PaymentDetailDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentType)) {
        this.paymentType = data().deepCopy(fields()[1].schema(), other.paymentType);
        fieldSetFlags()[1] = true;
      }
      this.paymentTypeBuilder = null;
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.checkNumber)) {
        this.checkNumber = data().deepCopy(fields()[3].schema(), other.checkNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.routingCode)) {
        this.routingCode = data().deepCopy(fields()[4].schema(), other.routingCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.receiptNumber)) {
        this.receiptNumber = data().deepCopy(fields()[5].schema(), other.receiptNumber);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bankNumber)) {
        this.bankNumber = data().deepCopy(fields()[6].schema(), other.bankNumber);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentType' field.
      * @return The value.
      */
    public org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 getPaymentType() {
      return paymentType;
    }


    /**
      * Sets the value of the 'paymentType' field.
      * @param value The value of 'paymentType'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setPaymentType(org.apache.fineract.avro.payment.v1.PaymentTypeDataV1 value) {
      validate(fields()[1], value);
      this.paymentTypeBuilder = null;
      this.paymentType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentType' field has been set.
      * @return True if the 'paymentType' field has been set, false otherwise.
      */
    public boolean hasPaymentType() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'paymentType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.Builder getPaymentTypeBuilder() {
      if (paymentTypeBuilder == null) {
        if (hasPaymentType()) {
          setPaymentTypeBuilder(org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.newBuilder(paymentType));
        } else {
          setPaymentTypeBuilder(org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.newBuilder());
        }
      }
      return paymentTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'paymentType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setPaymentTypeBuilder(org.apache.fineract.avro.payment.v1.PaymentTypeDataV1.Builder value) {
      clearPaymentType();
      paymentTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'paymentType' field has an active Builder instance
     * @return True if the 'paymentType' field has an active Builder instance
     */
    public boolean hasPaymentTypeBuilder() {
      return paymentTypeBuilder != null;
    }

    /**
      * Clears the value of the 'paymentType' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearPaymentType() {
      paymentType = null;
      paymentTypeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.String getAccountNumber() {
      return accountNumber;
    }


    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setAccountNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.accountNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearAccountNumber() {
      accountNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkNumber' field.
      * @return The value.
      */
    public java.lang.String getCheckNumber() {
      return checkNumber;
    }


    /**
      * Sets the value of the 'checkNumber' field.
      * @param value The value of 'checkNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setCheckNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.checkNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'checkNumber' field has been set.
      * @return True if the 'checkNumber' field has been set, false otherwise.
      */
    public boolean hasCheckNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'checkNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearCheckNumber() {
      checkNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'routingCode' field.
      * @return The value.
      */
    public java.lang.String getRoutingCode() {
      return routingCode;
    }


    /**
      * Sets the value of the 'routingCode' field.
      * @param value The value of 'routingCode'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setRoutingCode(java.lang.String value) {
      validate(fields()[4], value);
      this.routingCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'routingCode' field has been set.
      * @return True if the 'routingCode' field has been set, false otherwise.
      */
    public boolean hasRoutingCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'routingCode' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearRoutingCode() {
      routingCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiptNumber' field.
      * @return The value.
      */
    public java.lang.String getReceiptNumber() {
      return receiptNumber;
    }


    /**
      * Sets the value of the 'receiptNumber' field.
      * @param value The value of 'receiptNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setReceiptNumber(java.lang.String value) {
      validate(fields()[5], value);
      this.receiptNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'receiptNumber' field has been set.
      * @return True if the 'receiptNumber' field has been set, false otherwise.
      */
    public boolean hasReceiptNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'receiptNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearReceiptNumber() {
      receiptNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bankNumber' field.
      * @return The value.
      */
    public java.lang.String getBankNumber() {
      return bankNumber;
    }


    /**
      * Sets the value of the 'bankNumber' field.
      * @param value The value of 'bankNumber'.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder setBankNumber(java.lang.String value) {
      validate(fields()[6], value);
      this.bankNumber = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bankNumber' field has been set.
      * @return True if the 'bankNumber' field has been set, false otherwise.
      */
    public boolean hasBankNumber() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bankNumber' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.payment.v1.PaymentDetailDataV1.Builder clearBankNumber() {
      bankNumber = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentDetailDataV1 build() {
      try {
        PaymentDetailDataV1 record = new PaymentDetailDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        if (paymentTypeBuilder != null) {
          try {
            record.paymentType = this.paymentTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("paymentType"));
            throw e;
          }
        } else {
          record.paymentType = fieldSetFlags()[1] ? this.paymentType : (org.apache.fineract.avro.payment.v1.PaymentTypeDataV1) defaultValue(fields()[1]);
        }
        record.accountNumber = fieldSetFlags()[2] ? this.accountNumber : (java.lang.String) defaultValue(fields()[2]);
        record.checkNumber = fieldSetFlags()[3] ? this.checkNumber : (java.lang.String) defaultValue(fields()[3]);
        record.routingCode = fieldSetFlags()[4] ? this.routingCode : (java.lang.String) defaultValue(fields()[4]);
        record.receiptNumber = fieldSetFlags()[5] ? this.receiptNumber : (java.lang.String) defaultValue(fields()[5]);
        record.bankNumber = fieldSetFlags()[6] ? this.bankNumber : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentDetailDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentDetailDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentDetailDataV1>
    READER$ = (org.apache.avro.io.DatumReader<PaymentDetailDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id);
    }

    if (this.paymentType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.paymentType.customEncode(out);
    }

    if (this.accountNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.accountNumber);
    }

    if (this.checkNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.checkNumber);
    }

    if (this.routingCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.routingCode);
    }

    if (this.receiptNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.receiptNumber);
    }

    if (this.bankNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bankNumber);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.paymentType = null;
      } else {
        if (this.paymentType == null) {
          this.paymentType = new org.apache.fineract.avro.payment.v1.PaymentTypeDataV1();
        }
        this.paymentType.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accountNumber = null;
      } else {
        this.accountNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.checkNumber = null;
      } else {
        this.checkNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.routingCode = null;
      } else {
        this.routingCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.receiptNumber = null;
      } else {
        this.receiptNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bankNumber = null;
      } else {
        this.bankNumber = in.readString();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.paymentType = null;
          } else {
            if (this.paymentType == null) {
              this.paymentType = new org.apache.fineract.avro.payment.v1.PaymentTypeDataV1();
            }
            this.paymentType.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accountNumber = null;
          } else {
            this.accountNumber = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.checkNumber = null;
          } else {
            this.checkNumber = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.routingCode = null;
          } else {
            this.routingCode = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.receiptNumber = null;
          } else {
            this.receiptNumber = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bankNumber = null;
          } else {
            this.bankNumber = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










