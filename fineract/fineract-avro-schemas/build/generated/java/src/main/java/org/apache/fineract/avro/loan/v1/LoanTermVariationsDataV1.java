/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

package org.apache.fineract.avro.loan.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoanTermVariationsDataV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, org.apache.fineract.avro.generator.ByteBufferSerializable {
  private static final long serialVersionUID = -8116986890705423066L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoanTermVariationsDataV1\",\"namespace\":\"org.apache.fineract.avro.loan.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"termType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EnumOptionDataV1\",\"namespace\":\"org.apache.fineract.avro.generic.v1\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"termVariationApplicableFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decimalValue\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":8}],\"default\":null},{\"name\":\"dateValue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isSpecificToInstallment\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"isProcessed\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<LoanTermVariationsDataV1> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoanTermVariationsDataV1> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoanTermVariationsDataV1> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoanTermVariationsDataV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoanTermVariationsDataV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoanTermVariationsDataV1 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  @Override
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoanTermVariationsDataV1 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoanTermVariationsDataV1 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoanTermVariationsDataV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Long id;
  private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 termType;
  private java.lang.String termVariationApplicableFrom;
  private java.math.BigDecimal decimalValue;
  private java.lang.String dateValue;
  private java.lang.Boolean isSpecificToInstallment;
  private java.lang.Boolean isProcessed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoanTermVariationsDataV1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param termType The new value for termType
   * @param termVariationApplicableFrom The new value for termVariationApplicableFrom
   * @param decimalValue The new value for decimalValue
   * @param dateValue The new value for dateValue
   * @param isSpecificToInstallment The new value for isSpecificToInstallment
   * @param isProcessed The new value for isProcessed
   */
  public LoanTermVariationsDataV1(java.lang.Long id, org.apache.fineract.avro.generic.v1.EnumOptionDataV1 termType, java.lang.String termVariationApplicableFrom, java.math.BigDecimal decimalValue, java.lang.String dateValue, java.lang.Boolean isSpecificToInstallment, java.lang.Boolean isProcessed) {
    this.id = id;
    this.termType = termType;
    this.termVariationApplicableFrom = termVariationApplicableFrom;
    this.decimalValue = decimalValue;
    this.dateValue = dateValue;
    this.isSpecificToInstallment = isSpecificToInstallment;
    this.isProcessed = isProcessed;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return termType;
    case 2: return termVariationApplicableFrom;
    case 3: return decimalValue;
    case 4: return dateValue;
    case 5: return isSpecificToInstallment;
    case 6: return isProcessed;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: termType = (org.apache.fineract.avro.generic.v1.EnumOptionDataV1)value$; break;
    case 2: termVariationApplicableFrom = value$ != null ? value$.toString() : null; break;
    case 3: decimalValue = (java.math.BigDecimal)value$; break;
    case 4: dateValue = value$ != null ? value$.toString() : null; break;
    case 5: isSpecificToInstallment = (java.lang.Boolean)value$; break;
    case 6: isProcessed = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'termType' field.
   * @return The value of the 'termType' field.
   */
  public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getTermType() {
    return termType;
  }


  /**
   * Sets the value of the 'termType' field.
   * @param value the value to set.
   */
  public void setTermType(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
    this.termType = value;
  }

  /**
   * Gets the value of the 'termVariationApplicableFrom' field.
   * @return The value of the 'termVariationApplicableFrom' field.
   */
  public java.lang.String getTermVariationApplicableFrom() {
    return termVariationApplicableFrom;
  }


  /**
   * Sets the value of the 'termVariationApplicableFrom' field.
   * @param value the value to set.
   */
  public void setTermVariationApplicableFrom(java.lang.String value) {
    this.termVariationApplicableFrom = value;
  }

  /**
   * Gets the value of the 'decimalValue' field.
   * @return The value of the 'decimalValue' field.
   */
  public java.math.BigDecimal getDecimalValue() {
    return decimalValue;
  }


  /**
   * Sets the value of the 'decimalValue' field.
   * @param value the value to set.
   */
  public void setDecimalValue(java.math.BigDecimal value) {
    this.decimalValue = value;
  }

  /**
   * Gets the value of the 'dateValue' field.
   * @return The value of the 'dateValue' field.
   */
  public java.lang.String getDateValue() {
    return dateValue;
  }


  /**
   * Sets the value of the 'dateValue' field.
   * @param value the value to set.
   */
  public void setDateValue(java.lang.String value) {
    this.dateValue = value;
  }

  /**
   * Gets the value of the 'isSpecificToInstallment' field.
   * @return The value of the 'isSpecificToInstallment' field.
   */
  public java.lang.Boolean getIsSpecificToInstallment() {
    return isSpecificToInstallment;
  }


  /**
   * Sets the value of the 'isSpecificToInstallment' field.
   * @param value the value to set.
   */
  public void setIsSpecificToInstallment(java.lang.Boolean value) {
    this.isSpecificToInstallment = value;
  }

  /**
   * Gets the value of the 'isProcessed' field.
   * @return The value of the 'isProcessed' field.
   */
  public java.lang.Boolean getIsProcessed() {
    return isProcessed;
  }


  /**
   * Sets the value of the 'isProcessed' field.
   * @param value the value to set.
   */
  public void setIsProcessed(java.lang.Boolean value) {
    this.isProcessed = value;
  }

  /**
   * Creates a new LoanTermVariationsDataV1 RecordBuilder.
   * @return A new LoanTermVariationsDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder newBuilder() {
    return new org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder();
  }

  /**
   * Creates a new LoanTermVariationsDataV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoanTermVariationsDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder(other);
    }
  }

  /**
   * Creates a new LoanTermVariationsDataV1 RecordBuilder by copying an existing LoanTermVariationsDataV1 instance.
   * @param other The existing instance to copy.
   * @return A new LoanTermVariationsDataV1 RecordBuilder
   */
  public static org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder newBuilder(org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1 other) {
    if (other == null) {
      return new org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder();
    } else {
      return new org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoanTermVariationsDataV1 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoanTermVariationsDataV1>
    implements org.apache.avro.data.RecordBuilder<LoanTermVariationsDataV1> {

    private java.lang.Long id;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1 termType;
    private org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder termTypeBuilder;
    private java.lang.String termVariationApplicableFrom;
    private java.math.BigDecimal decimalValue;
    private java.lang.String dateValue;
    private java.lang.Boolean isSpecificToInstallment;
    private java.lang.Boolean isProcessed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.termType)) {
        this.termType = data().deepCopy(fields()[1].schema(), other.termType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasTermTypeBuilder()) {
        this.termTypeBuilder = org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(other.getTermTypeBuilder());
      }
      if (isValidValue(fields()[2], other.termVariationApplicableFrom)) {
        this.termVariationApplicableFrom = data().deepCopy(fields()[2].schema(), other.termVariationApplicableFrom);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.decimalValue)) {
        this.decimalValue = data().deepCopy(fields()[3].schema(), other.decimalValue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dateValue)) {
        this.dateValue = data().deepCopy(fields()[4].schema(), other.dateValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isSpecificToInstallment)) {
        this.isSpecificToInstallment = data().deepCopy(fields()[5].schema(), other.isSpecificToInstallment);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isProcessed)) {
        this.isProcessed = data().deepCopy(fields()[6].schema(), other.isProcessed);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing LoanTermVariationsDataV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.termType)) {
        this.termType = data().deepCopy(fields()[1].schema(), other.termType);
        fieldSetFlags()[1] = true;
      }
      this.termTypeBuilder = null;
      if (isValidValue(fields()[2], other.termVariationApplicableFrom)) {
        this.termVariationApplicableFrom = data().deepCopy(fields()[2].schema(), other.termVariationApplicableFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimalValue)) {
        this.decimalValue = data().deepCopy(fields()[3].schema(), other.decimalValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateValue)) {
        this.dateValue = data().deepCopy(fields()[4].schema(), other.dateValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isSpecificToInstallment)) {
        this.isSpecificToInstallment = data().deepCopy(fields()[5].schema(), other.isSpecificToInstallment);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isProcessed)) {
        this.isProcessed = data().deepCopy(fields()[6].schema(), other.isProcessed);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'termType' field.
      * @return The value.
      */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1 getTermType() {
      return termType;
    }


    /**
      * Sets the value of the 'termType' field.
      * @param value The value of 'termType'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setTermType(org.apache.fineract.avro.generic.v1.EnumOptionDataV1 value) {
      validate(fields()[1], value);
      this.termTypeBuilder = null;
      this.termType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'termType' field has been set.
      * @return True if the 'termType' field has been set, false otherwise.
      */
    public boolean hasTermType() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'termType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder getTermTypeBuilder() {
      if (termTypeBuilder == null) {
        if (hasTermType()) {
          setTermTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder(termType));
        } else {
          setTermTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.newBuilder());
        }
      }
      return termTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'termType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setTermTypeBuilder(org.apache.fineract.avro.generic.v1.EnumOptionDataV1.Builder value) {
      clearTermType();
      termTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'termType' field has an active Builder instance
     * @return True if the 'termType' field has an active Builder instance
     */
    public boolean hasTermTypeBuilder() {
      return termTypeBuilder != null;
    }

    /**
      * Clears the value of the 'termType' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearTermType() {
      termType = null;
      termTypeBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'termVariationApplicableFrom' field.
      * @return The value.
      */
    public java.lang.String getTermVariationApplicableFrom() {
      return termVariationApplicableFrom;
    }


    /**
      * Sets the value of the 'termVariationApplicableFrom' field.
      * @param value The value of 'termVariationApplicableFrom'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setTermVariationApplicableFrom(java.lang.String value) {
      validate(fields()[2], value);
      this.termVariationApplicableFrom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'termVariationApplicableFrom' field has been set.
      * @return True if the 'termVariationApplicableFrom' field has been set, false otherwise.
      */
    public boolean hasTermVariationApplicableFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'termVariationApplicableFrom' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearTermVariationApplicableFrom() {
      termVariationApplicableFrom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimalValue' field.
      * @return The value.
      */
    public java.math.BigDecimal getDecimalValue() {
      return decimalValue;
    }


    /**
      * Sets the value of the 'decimalValue' field.
      * @param value The value of 'decimalValue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setDecimalValue(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.decimalValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'decimalValue' field has been set.
      * @return True if the 'decimalValue' field has been set, false otherwise.
      */
    public boolean hasDecimalValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'decimalValue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearDecimalValue() {
      decimalValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateValue' field.
      * @return The value.
      */
    public java.lang.String getDateValue() {
      return dateValue;
    }


    /**
      * Sets the value of the 'dateValue' field.
      * @param value The value of 'dateValue'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setDateValue(java.lang.String value) {
      validate(fields()[4], value);
      this.dateValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dateValue' field has been set.
      * @return True if the 'dateValue' field has been set, false otherwise.
      */
    public boolean hasDateValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dateValue' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearDateValue() {
      dateValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSpecificToInstallment' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSpecificToInstallment() {
      return isSpecificToInstallment;
    }


    /**
      * Sets the value of the 'isSpecificToInstallment' field.
      * @param value The value of 'isSpecificToInstallment'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setIsSpecificToInstallment(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isSpecificToInstallment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isSpecificToInstallment' field has been set.
      * @return True if the 'isSpecificToInstallment' field has been set, false otherwise.
      */
    public boolean hasIsSpecificToInstallment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isSpecificToInstallment' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearIsSpecificToInstallment() {
      isSpecificToInstallment = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isProcessed' field.
      * @return The value.
      */
    public java.lang.Boolean getIsProcessed() {
      return isProcessed;
    }


    /**
      * Sets the value of the 'isProcessed' field.
      * @param value The value of 'isProcessed'.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder setIsProcessed(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.isProcessed = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isProcessed' field has been set.
      * @return True if the 'isProcessed' field has been set, false otherwise.
      */
    public boolean hasIsProcessed() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isProcessed' field.
      * @return This builder.
      */
    public org.apache.fineract.avro.loan.v1.LoanTermVariationsDataV1.Builder clearIsProcessed() {
      isProcessed = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoanTermVariationsDataV1 build() {
      try {
        LoanTermVariationsDataV1 record = new LoanTermVariationsDataV1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        if (termTypeBuilder != null) {
          try {
            record.termType = this.termTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("termType"));
            throw e;
          }
        } else {
          record.termType = fieldSetFlags()[1] ? this.termType : (org.apache.fineract.avro.generic.v1.EnumOptionDataV1) defaultValue(fields()[1]);
        }
        record.termVariationApplicableFrom = fieldSetFlags()[2] ? this.termVariationApplicableFrom : (java.lang.String) defaultValue(fields()[2]);
        record.decimalValue = fieldSetFlags()[3] ? this.decimalValue : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.dateValue = fieldSetFlags()[4] ? this.dateValue : (java.lang.String) defaultValue(fields()[4]);
        record.isSpecificToInstallment = fieldSetFlags()[5] ? this.isSpecificToInstallment : (java.lang.Boolean) defaultValue(fields()[5]);
        record.isProcessed = fieldSetFlags()[6] ? this.isProcessed : (java.lang.Boolean) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoanTermVariationsDataV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoanTermVariationsDataV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoanTermVariationsDataV1>
    READER$ = (org.apache.avro.io.DatumReader<LoanTermVariationsDataV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










